(declare-fun temp988_1 () (_ BitVec 64))
(declare-fun var81157 () (_ BitVec 64))
(declare-fun ARGNAME_n_fft_NAMEEND () (_ BitVec 64))
(declare-fun temp988_2 () (_ BitVec 64))
(declare-fun var1050945 () (_ BitVec 64))
(declare-fun temp988_3 () (_ BitVec 64))
(declare-fun var67312 () (_ BitVec 64))
(declare-fun temp988_4 () (_ BitVec 64))
(declare-fun var81838 () (_ BitVec 64))
(declare-fun temp988_5 () (_ BitVec 64))
(declare-fun var81839 () (_ BitVec 64))
(declare-fun temp988_6 () (_ BitVec 64))
(declare-fun var82185 () (_ BitVec 64))
(declare-fun ARGNAME_hop_length_NAMEEND () (_ BitVec 64))
(declare-fun var82186 () (_ BitVec 64))
(declare-fun null () (_ BitVec 64))
(declare-fun temp988_7 () (_ BitVec 64))
(declare-fun var82187 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun var82356 () (_ BitVec 64))
(declare-fun temp988_8 () (_ BitVec 64))
(declare-fun temp988_9 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var82528 () (_ BitVec 64))
(declare-fun temp988_10 () (_ BitVec 64))
(declare-fun temp988_11 () (_ BitVec 64))
(declare-fun var65913 () (_ BitVec 64))
(declare-fun temp988_12 () (_ BitVec 64))
(declare-fun temp988_13 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp988_14 () (_ BitVec 64))
(declare-fun temp988_15 () (_ BitVec 64))
(declare-fun temp988_16 () (_ BitVec 64))
(declare-fun temp988_17 () (_ BitVec 64))
(declare-fun temp988_18 () (_ BitVec 64))
(declare-fun temp988_19 () (_ BitVec 64))
(declare-fun temp988_20 () (_ BitVec 64))
(declare-fun temp988_21 () (_ BitVec 64))
(declare-fun temp988_22 () (_ BitVec 64))
(declare-fun temp988_23 () (_ BitVec 64))
(declare-fun temp988_24 () (_ BitVec 64))
(declare-fun temp988_25 () (_ BitVec 64))
(declare-fun temp988_26 () (_ BitVec 64))
(declare-fun temp988_27 () (_ BitVec 64))
(declare-fun temp988_28 () (_ BitVec 64))
(declare-fun temp988_29 () (_ BitVec 64))
(declare-fun temp988_31 () (_ BitVec 64))
(declare-fun temp988_30 () (_ BitVec 64))
(declare-fun temp988_32 () (_ BitVec 64))
(declare-fun temp988_33 () (_ BitVec 64))
(declare-fun var82530 () (_ BitVec 64))
(declare-fun var82531 () (_ BitVec 64))
(declare-fun temp988_34 () (_ BitVec 64))
(declare-fun var82728 () (_ BitVec 64))
(declare-fun temp988_35 () (_ BitVec 64))
(declare-fun var1914351 () (_ BitVec 64))
(declare-fun temp988_36 () (_ BitVec 64))
(declare-fun var2115797 () (_ BitVec 64))
(declare-fun temp988_37 () (_ BitVec 64))
(declare-fun var2115798 () (_ BitVec 64))
(declare-fun temp988_39 () (_ BitVec 64))
(declare-fun temp988_38 () (_ BitVec 64))
(declare-fun temp988_40 () (_ BitVec 64))
(declare-fun var2628020 () (_ BitVec 64))
(declare-fun temp988_41 () (_ BitVec 64))
(declare-fun temp988_42 () (_ BitVec 64))
(declare-fun ARGNAME_normalized_NAMEEND () (_ BitVec 64))
(declare-fun var82862 () (_ BitVec 64))
(declare-fun temp988_43 () (_ BitVec 64))
(declare-fun ARGNAME_return_complex_NAMEEND () (_ BitVec 64))
(declare-fun var82911 () (_ BitVec 64))
(declare-fun var3740376 () (_ BitVec 64))
(declare-fun temp988_44 () (_ BitVec 64))
(declare-fun var3740377 () (_ BitVec 64))
(declare-fun temp988_45 () (_ BitVec 64))
(declare-fun var69143 () (_ BitVec 64))
(declare-fun temp988_47 () (_ BitVec 64))
(declare-fun temp988_46 () (_ BitVec 64))
(declare-fun temp988_49 () (_ BitVec 64))
(declare-fun temp988_48 () (_ BitVec 64))
(declare-fun temp988_51 () (_ BitVec 64))
(declare-fun temp988_50 () (_ BitVec 64))
(declare-fun temp988_52 () (_ BitVec 64))
(declare-fun var4212949 () (_ BitVec 64))
(declare-fun var4212950 () (_ BitVec 64))
(declare-fun temp988_54 () (_ BitVec 64))
(declare-fun temp988_53 () (_ BitVec 64))
(declare-fun temp988_56 () (_ BitVec 64))
(declare-fun temp988_55 () (_ BitVec 64))
(declare-fun temp988_58 () (_ BitVec 64))
(declare-fun temp988_57 () (_ BitVec 64))
(declare-fun temp988_60 () (_ BitVec 64))
(declare-fun temp988_59 () (_ BitVec 64))
(declare-fun temp988_62 () (_ BitVec 64))
(declare-fun temp988_61 () (_ BitVec 64))
(declare-fun temp988_64 () (_ BitVec 64))
(declare-fun temp988_63 () (_ BitVec 64))
(declare-fun var4868391 () (_ BitVec 64))
(declare-fun temp988_65 () (_ BitVec 64))
(declare-fun var4983962 () (_ BitVec 64))
(declare-fun temp988_67 () (_ BitVec 64))
(declare-fun temp988_66 () (_ BitVec 64))
(declare-fun temp988_69 () (_ BitVec 64))
(declare-fun temp988_68 () (_ BitVec 64))
(declare-fun var5453295 () (_ BitVec 64))
(declare-fun temp988_71 () (_ BitVec 64))
(declare-fun temp988_70 () (_ BitVec 64))
(declare-fun temp988_73 () (_ BitVec 64))
(declare-fun temp988_72 () (_ BitVec 64))
(declare-fun temp988_75 () (_ BitVec 64))
(declare-fun temp988_74 () (_ BitVec 64))
(declare-fun temp988_77 () (_ BitVec 64))
(declare-fun temp988_76 () (_ BitVec 64))
(declare-fun temp988_79 () (_ BitVec 64))
(declare-fun temp988_78 () (_ BitVec 64))
(declare-fun temp988_81 () (_ BitVec 64))
(declare-fun temp988_80 () (_ BitVec 64))
(declare-fun var6375719 () (_ BitVec 64))
(declare-fun temp988_82 () (_ BitVec 64))
(declare-fun ARGNAME_center_NAMEEND () (_ BitVec 64))
(declare-fun var83534 () (_ BitVec 64))
(declare-fun temp988_83 () (_ BitVec 64))
(declare-fun var83540 () (_ BitVec 64))
(declare-fun var6506824 () (_ BitVec 64))
(declare-fun var6818804 () (_ BitVec 64))
(declare-fun temp988_84 () (_ BitVec 64))
(declare-fun var6818808 () (_ BitVec 64))
(declare-fun temp988_85 () (_ BitVec 64))
(declare-fun var6818858 () (_ BitVec 64))
(declare-fun temp988_86 () (_ BitVec 64))
(declare-fun var7736308 () (_ BitVec 64))
(declare-fun temp988_87 () (_ BitVec 64))
(declare-fun var7736312 () (_ BitVec 64))
(declare-fun temp988_88 () (_ BitVec 64))
(declare-fun var9128231 () (_ BitVec 64))
(declare-fun temp988_89 () (_ BitVec 64))
(declare-fun var9440410 () (_ BitVec 64))
(assert (= temp988_1 #x0000000000000002))
(assert (= var81157 (bvashr ARGNAME_n_fft_NAMEEND temp988_1)))
(assert (= temp988_2 #x0000000000000000))
(assert (= var1050945 temp988_2))
(assert (= temp988_3 #xffffffffffffffff))
(assert (= var67312 temp988_3))
(assert (= temp988_4 #x0000000000000002))
(assert (= var81838 (bvsdiv ARGNAME_n_fft_NAMEEND temp988_4)))
(assert (= temp988_5 #x0000000000000001))
(assert (= var81839 (bvadd var81838 temp988_5)))
(assert (= temp988_6 #x0000000000000001))
(assert (= var82185
   (ite (bvslt ARGNAME_hop_length_NAMEEND temp988_6)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82186
   (ite (bvsgt ARGNAME_hop_length_NAMEEND null)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82187 (bvor var82185 var82186)))
(assert (= temp988_7 #x0000000000000000))
(assert (= var82187 temp988_7))
(assert (= var82356
   (ite (bvsgt null ARGNAME_n_fft_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp988_8 #x0000000000000000))
(assert (= var82356 temp988_8))
(assert (= temp988_9 #x0000000000000001))
(assert (= var82528
   (ite (= ARGNAME_window_NAMEEND_DIM temp988_9)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp988_10 #x0000000000000001))
(assert (= var82528 temp988_10))
(assert (= temp988_11 #x0000000000000000))
(assert (= var65913 temp988_11))
(assert (= temp988_12 #x0000000000000000))
(assert (= temp988_13 temp988_12))
(assert (= temp988_14 (select ARGNAME_window_NAMEEND_DIMSIZE temp988_13)))
(assert (= temp988_15 #x0000000000000001))
(assert (= temp988_16 temp988_15))
(assert (= temp988_17 (select ARGNAME_window_NAMEEND_DIMSIZE temp988_16)))
(assert (= temp988_18 #x0000000000000002))
(assert (= temp988_19 temp988_18))
(assert (= temp988_20 (select ARGNAME_window_NAMEEND_DIMSIZE temp988_19)))
(assert (= temp988_21 #x0000000000000003))
(assert (= temp988_22 temp988_21))
(assert (= temp988_23 (select ARGNAME_window_NAMEEND_DIMSIZE temp988_22)))
(assert (= temp988_24 #x0000000000000004))
(assert (= temp988_25 temp988_24))
(assert (= temp988_26 (select ARGNAME_window_NAMEEND_DIMSIZE temp988_25)))
(assert (= temp988_27 #x0000000000000005))
(assert (= temp988_28 temp988_27))
(assert (= temp988_29 (select ARGNAME_window_NAMEEND_DIMSIZE temp988_28)))
(assert (= temp988_31 #x0000000000000000))
(assert (= temp988_30
   (ite (bvslt var65913 temp988_31)
        (bvadd ARGNAME_window_NAMEEND_DIM var65913)
        var65913)))
(assert (= temp988_32 temp988_30))
(assert (= temp988_33 (select ARGNAME_window_NAMEEND_DIMSIZE temp988_32)))
(assert (= var82530 temp988_33))
(assert (bvslt temp988_30 ARGNAME_window_NAMEEND_DIM))
(assert (= var82531 (ite (= var82530 null) #x0000000000000001 #x0000000000000000)))
(assert (= temp988_34 #x0000000000000001))
(assert (= var82531 temp988_34))
(assert (= var82728
   (ite (= ARGNAME_n_fft_NAMEEND null) #x0000000000000001 #x0000000000000000)))
(assert (= temp988_35 #x0000000000000001))
(assert (= var82728 temp988_35))
(assert (= var1914351 var65913))
(assert (= temp988_36 #x0000000000000001))
(assert (= var2115797 temp988_36))
(assert (= temp988_37 #x0000000000000002))
(assert (= var2115798 temp988_37))
(assert (= temp988_39 #x0000000000000000))
(assert (= temp988_38 temp988_39))
(assert (= temp988_40 #x0000000000000000))
(assert (= var2628020 temp988_40))
(assert (= temp988_41 #x0000000000000001))
(assert (= temp988_42 #x0000000000000002))
(assert (= var82862
   (ite (= ARGNAME_normalized_NAMEEND #x0000000000000001) temp988_41 temp988_42)))
(assert (= temp988_43 #x0000000000000001))
(assert (= ARGNAME_return_complex_NAMEEND temp988_43))
(assert (= var82911 var82862))
(assert (= var3740376 var82911))
(assert (= temp988_44 #x0000000000000000))
(assert (= var3740377 temp988_44))
(assert (= temp988_45 #x0000000000000002))
(assert (= var69143 temp988_45))
(assert (= temp988_47 #x0000000000000001))
(assert (= temp988_46 temp988_47))
(assert (= temp988_49 #x0000000000000001))
(assert (= temp988_48 temp988_49))
(assert (= temp988_51 #x0000000000000003))
(assert (= temp988_50 temp988_51))
(assert (= temp988_52 #x0000000000000001))
(assert (= var4212949 temp988_52))
(assert (= var4212950 var69143))
(assert (= temp988_54 #x0000000000000001))
(assert (= temp988_53 temp988_54))
(assert (= temp988_56 #x0000000000000001))
(assert (= temp988_55 temp988_56))
(assert (= temp988_58 #x0000000000000001))
(assert (= temp988_57 temp988_58))
(assert (= temp988_60 #x0000000000000001))
(assert (= temp988_59 temp988_60))
(assert (= temp988_62 #x0000000000000000))
(assert (= temp988_61 temp988_62))
(assert (= temp988_64 #x0000000000000001))
(assert (= temp988_63 temp988_64))
(assert (= var4868391 var69143))
(assert (= temp988_65 #x0000000000000002))
(assert (= var4983962 temp988_65))
(assert (= temp988_67 #x0000000000000001))
(assert (= temp988_66 temp988_67))
(assert (= temp988_69 #x0000000000000001))
(assert (= temp988_68 temp988_69))
(assert (= var5453295 var65913))
(assert (= temp988_71 #x0000000000000001))
(assert (= temp988_70 temp988_71))
(assert (= temp988_73 #x0000000000000001))
(assert (= temp988_72 temp988_73))
(assert (= temp988_75 #x0000000000000001))
(assert (= temp988_74 temp988_75))
(assert (= temp988_77 #x0000000000000001))
(assert (= temp988_76 temp988_77))
(assert (= temp988_79 #x0000000000000000))
(assert (= temp988_78 temp988_79))
(assert (= temp988_81 #x0000000000000001))
(assert (= temp988_80 temp988_81))
(assert (= var6375719 var69143))
(assert (= temp988_82 #x0000000000000000))
(assert (= var83534
   (ite (= ARGNAME_center_NAMEEND temp988_82)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp988_83 #x0000000000000001))
(assert (= var83534 temp988_83))
(assert (= var83540 var65913))
(assert (= var6506824 var83540))
(assert (= var6818804 var69143))
(assert (= temp988_84 #x0000000000000001))
(assert (= var6818808 temp988_84))
(assert (= temp988_85 #x0000000000000000))
(assert (= var6818858 temp988_85))
(assert (= temp988_86 #x0000000000000000))
(assert (= var6818858 temp988_86))
(assert (= var7736308 var69143))
(assert (= temp988_87 #x0000000000000001))
(assert (= var7736312 temp988_87))
(assert (= temp988_88 #x0000000000000001))
(assert (= var9128231 temp988_88))
(assert (= temp988_89 #x0000000000000000))
(assert (= var9440410 temp988_89))
(model-add temp988_1 () (_ BitVec 64) #x0000000000000002)
(model-add var81157
           ()
           (_ BitVec 64)
           (bvashr ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp988_2 () (_ BitVec 64) #x0000000000000000)
(model-add var1050945 () (_ BitVec 64) #x0000000000000000)
(model-add temp988_3 () (_ BitVec 64) #xffffffffffffffff)
(model-add var67312 () (_ BitVec 64) #xffffffffffffffff)
(model-add temp988_4 () (_ BitVec 64) #x0000000000000002)
(model-add var81838
           ()
           (_ BitVec 64)
           (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp988_5 () (_ BitVec 64) #x0000000000000001)
(model-add var81839
           ()
           (_ BitVec 64)
           (bvadd #x0000000000000001
                  (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002)))
(model-add temp988_6 () (_ BitVec 64) #x0000000000000001)
(model-add var82185
           ()
           (_ BitVec 64)
           (ite (bvsle #x0000000000000001 ARGNAME_hop_length_NAMEEND)
                #x0000000000000000
                #x0000000000000001))
(model-add var82186
           ()
           (_ BitVec 64)
           (ite (bvsle ARGNAME_hop_length_NAMEEND null)
                #x0000000000000000
                #x0000000000000001))
(model-add temp988_7 () (_ BitVec 64) #x0000000000000000)
(model-add var82187 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add null
           ()
           (_ BitVec 64)
           (ite (or k!0 (= ARGNAME_hop_length_NAMEEND #x8000000000000000))
                ARGNAME_hop_length_NAMEEND
                (bvsub ARGNAME_hop_length_NAMEEND #x0000000000000001)))




