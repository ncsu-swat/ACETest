(declare-fun temp986_1 () (_ BitVec 64))
(declare-fun var81157 () (_ BitVec 64))
(declare-fun ARGNAME_n_fft_NAMEEND () (_ BitVec 64))
(declare-fun temp986_2 () (_ BitVec 64))
(declare-fun var1050945 () (_ BitVec 64))
(declare-fun temp986_3 () (_ BitVec 64))
(declare-fun var67312 () (_ BitVec 64))
(declare-fun temp986_4 () (_ BitVec 64))
(declare-fun var81838 () (_ BitVec 64))
(declare-fun temp986_5 () (_ BitVec 64))
(declare-fun var81839 () (_ BitVec 64))
(declare-fun temp986_6 () (_ BitVec 64))
(declare-fun var82185 () (_ BitVec 64))
(declare-fun ARGNAME_hop_length_NAMEEND () (_ BitVec 64))
(declare-fun var82186 () (_ BitVec 64))
(declare-fun null () (_ BitVec 64))
(declare-fun temp986_7 () (_ BitVec 64))
(declare-fun var82187 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun var82356 () (_ BitVec 64))
(declare-fun temp986_8 () (_ BitVec 64))
(declare-fun temp986_9 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var82528 () (_ BitVec 64))
(declare-fun temp986_10 () (_ BitVec 64))
(declare-fun temp986_11 () (_ BitVec 64))
(declare-fun var65913 () (_ BitVec 64))
(declare-fun temp986_12 () (_ BitVec 64))
(declare-fun temp986_13 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp986_14 () (_ BitVec 64))
(declare-fun temp986_15 () (_ BitVec 64))
(declare-fun temp986_16 () (_ BitVec 64))
(declare-fun temp986_17 () (_ BitVec 64))
(declare-fun temp986_18 () (_ BitVec 64))
(declare-fun temp986_19 () (_ BitVec 64))
(declare-fun temp986_20 () (_ BitVec 64))
(declare-fun temp986_21 () (_ BitVec 64))
(declare-fun temp986_22 () (_ BitVec 64))
(declare-fun temp986_23 () (_ BitVec 64))
(declare-fun temp986_24 () (_ BitVec 64))
(declare-fun temp986_25 () (_ BitVec 64))
(declare-fun temp986_26 () (_ BitVec 64))
(declare-fun temp986_27 () (_ BitVec 64))
(declare-fun temp986_28 () (_ BitVec 64))
(declare-fun temp986_29 () (_ BitVec 64))
(declare-fun temp986_31 () (_ BitVec 64))
(declare-fun temp986_30 () (_ BitVec 64))
(declare-fun temp986_32 () (_ BitVec 64))
(declare-fun temp986_33 () (_ BitVec 64))
(declare-fun var82530 () (_ BitVec 64))
(declare-fun var82531 () (_ BitVec 64))
(declare-fun temp986_34 () (_ BitVec 64))
(declare-fun var82728 () (_ BitVec 64))
(declare-fun temp986_35 () (_ BitVec 64))
(declare-fun var1914351 () (_ BitVec 64))
(declare-fun temp986_36 () (_ BitVec 64))
(declare-fun var2115797 () (_ BitVec 64))
(declare-fun temp986_37 () (_ BitVec 64))
(declare-fun var2115798 () (_ BitVec 64))
(declare-fun temp986_39 () (_ BitVec 64))
(declare-fun temp986_38 () (_ BitVec 64))
(declare-fun temp986_40 () (_ BitVec 64))
(declare-fun var2628020 () (_ BitVec 64))
(declare-fun temp986_41 () (_ BitVec 64))
(declare-fun temp986_42 () (_ BitVec 64))
(declare-fun ARGNAME_normalized_NAMEEND () (_ BitVec 64))
(declare-fun var82862 () (_ BitVec 64))
(declare-fun temp986_43 () (_ BitVec 64))
(declare-fun ARGNAME_return_complex_NAMEEND () (_ BitVec 64))
(declare-fun var82911 () (_ BitVec 64))
(declare-fun var3740376 () (_ BitVec 64))
(declare-fun temp986_44 () (_ BitVec 64))
(declare-fun var3740377 () (_ BitVec 64))
(declare-fun temp986_45 () (_ BitVec 64))
(declare-fun var69143 () (_ BitVec 64))
(declare-fun temp986_47 () (_ BitVec 64))
(declare-fun temp986_46 () (_ BitVec 64))
(declare-fun temp986_49 () (_ BitVec 64))
(declare-fun temp986_48 () (_ BitVec 64))
(declare-fun temp986_51 () (_ BitVec 64))
(declare-fun temp986_50 () (_ BitVec 64))
(declare-fun temp986_52 () (_ BitVec 64))
(declare-fun var4212949 () (_ BitVec 64))
(declare-fun var4212950 () (_ BitVec 64))
(declare-fun temp986_54 () (_ BitVec 64))
(declare-fun temp986_53 () (_ BitVec 64))
(declare-fun temp986_56 () (_ BitVec 64))
(declare-fun temp986_55 () (_ BitVec 64))
(declare-fun temp986_58 () (_ BitVec 64))
(declare-fun temp986_57 () (_ BitVec 64))
(declare-fun temp986_60 () (_ BitVec 64))
(declare-fun temp986_59 () (_ BitVec 64))
(declare-fun temp986_62 () (_ BitVec 64))
(declare-fun temp986_61 () (_ BitVec 64))
(declare-fun temp986_64 () (_ BitVec 64))
(declare-fun temp986_63 () (_ BitVec 64))
(declare-fun var4868391 () (_ BitVec 64))
(declare-fun temp986_65 () (_ BitVec 64))
(declare-fun var4983962 () (_ BitVec 64))
(declare-fun temp986_67 () (_ BitVec 64))
(declare-fun temp986_66 () (_ BitVec 64))
(declare-fun temp986_69 () (_ BitVec 64))
(declare-fun temp986_68 () (_ BitVec 64))
(declare-fun var5453295 () (_ BitVec 64))
(declare-fun temp986_71 () (_ BitVec 64))
(declare-fun temp986_70 () (_ BitVec 64))
(declare-fun temp986_73 () (_ BitVec 64))
(declare-fun temp986_72 () (_ BitVec 64))
(declare-fun temp986_75 () (_ BitVec 64))
(declare-fun temp986_74 () (_ BitVec 64))
(declare-fun temp986_77 () (_ BitVec 64))
(declare-fun temp986_76 () (_ BitVec 64))
(declare-fun temp986_79 () (_ BitVec 64))
(declare-fun temp986_78 () (_ BitVec 64))
(declare-fun temp986_81 () (_ BitVec 64))
(declare-fun temp986_80 () (_ BitVec 64))
(declare-fun var6375719 () (_ BitVec 64))
(declare-fun temp986_82 () (_ BitVec 64))
(declare-fun ARGNAME_center_NAMEEND () (_ BitVec 64))
(declare-fun var83534 () (_ BitVec 64))
(declare-fun temp986_83 () (_ BitVec 64))
(declare-fun var83540 () (_ BitVec 64))
(declare-fun var6506824 () (_ BitVec 64))
(declare-fun var6818804 () (_ BitVec 64))
(declare-fun temp986_84 () (_ BitVec 64))
(declare-fun var6818808 () (_ BitVec 64))
(declare-fun temp986_85 () (_ BitVec 64))
(declare-fun var6818858 () (_ BitVec 64))
(declare-fun temp986_86 () (_ BitVec 64))
(declare-fun var7736308 () (_ BitVec 64))
(declare-fun temp986_87 () (_ BitVec 64))
(declare-fun var7736312 () (_ BitVec 64))
(declare-fun temp986_88 () (_ BitVec 64))
(declare-fun var9128231 () (_ BitVec 64))
(declare-fun temp986_89 () (_ BitVec 64))
(declare-fun var9440410 () (_ BitVec 64))
(assert (= temp986_1 #x0000000000000002))
(assert (= var81157 (bvashr ARGNAME_n_fft_NAMEEND temp986_1)))
(assert (= temp986_2 #x0000000000000000))
(assert (= var1050945 temp986_2))
(assert (= temp986_3 #xffffffffffffffff))
(assert (= var67312 temp986_3))
(assert (= temp986_4 #x0000000000000002))
(assert (= var81838 (bvsdiv ARGNAME_n_fft_NAMEEND temp986_4)))
(assert (= temp986_5 #x0000000000000001))
(assert (= var81839 (bvadd var81838 temp986_5)))
(assert (= temp986_6 #x0000000000000001))
(assert (= var82185
   (ite (bvslt ARGNAME_hop_length_NAMEEND temp986_6)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82186
   (ite (bvsgt ARGNAME_hop_length_NAMEEND null)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82187 (bvor var82185 var82186)))
(assert (= temp986_7 #x0000000000000000))
(assert (= var82187 temp986_7))
(assert (= var82356
   (ite (bvsgt null ARGNAME_n_fft_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp986_8 #x0000000000000000))
(assert (= var82356 temp986_8))
(assert (= temp986_9 #x0000000000000001))
(assert (= var82528
   (ite (= ARGNAME_window_NAMEEND_DIM temp986_9)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp986_10 #x0000000000000001))
(assert (= var82528 temp986_10))
(assert (= temp986_11 #x0000000000000000))
(assert (= var65913 temp986_11))
(assert (= temp986_12 #x0000000000000000))
(assert (= temp986_13 temp986_12))
(assert (= temp986_14 (select ARGNAME_window_NAMEEND_DIMSIZE temp986_13)))
(assert (= temp986_15 #x0000000000000001))
(assert (= temp986_16 temp986_15))
(assert (= temp986_17 (select ARGNAME_window_NAMEEND_DIMSIZE temp986_16)))
(assert (= temp986_18 #x0000000000000002))
(assert (= temp986_19 temp986_18))
(assert (= temp986_20 (select ARGNAME_window_NAMEEND_DIMSIZE temp986_19)))
(assert (= temp986_21 #x0000000000000003))
(assert (= temp986_22 temp986_21))
(assert (= temp986_23 (select ARGNAME_window_NAMEEND_DIMSIZE temp986_22)))
(assert (= temp986_24 #x0000000000000004))
(assert (= temp986_25 temp986_24))
(assert (= temp986_26 (select ARGNAME_window_NAMEEND_DIMSIZE temp986_25)))
(assert (= temp986_27 #x0000000000000005))
(assert (= temp986_28 temp986_27))
(assert (= temp986_29 (select ARGNAME_window_NAMEEND_DIMSIZE temp986_28)))
(assert (= temp986_31 #x0000000000000000))
(assert (= temp986_30
   (ite (bvslt var65913 temp986_31)
        (bvadd ARGNAME_window_NAMEEND_DIM var65913)
        var65913)))
(assert (= temp986_32 temp986_30))
(assert (= temp986_33 (select ARGNAME_window_NAMEEND_DIMSIZE temp986_32)))
(assert (= var82530 temp986_33))
(assert (bvslt temp986_30 ARGNAME_window_NAMEEND_DIM))
(assert (= var82531 (ite (= var82530 null) #x0000000000000001 #x0000000000000000)))
(assert (= temp986_34 #x0000000000000001))
(assert (= var82531 temp986_34))
(assert (= var82728
   (ite (= ARGNAME_n_fft_NAMEEND null) #x0000000000000001 #x0000000000000000)))
(assert (= temp986_35 #x0000000000000001))
(assert (= var82728 temp986_35))
(assert (= var1914351 var65913))
(assert (= temp986_36 #x0000000000000001))
(assert (= var2115797 temp986_36))
(assert (= temp986_37 #x0000000000000002))
(assert (= var2115798 temp986_37))
(assert (= temp986_39 #x0000000000000000))
(assert (= temp986_38 temp986_39))
(assert (= temp986_40 #x0000000000000000))
(assert (= var2628020 temp986_40))
(assert (= temp986_41 #x0000000000000001))
(assert (= temp986_42 #x0000000000000002))
(assert (= var82862
   (ite (= ARGNAME_normalized_NAMEEND #x0000000000000001) temp986_41 temp986_42)))
(assert (= temp986_43 #x0000000000000001))
(assert (= ARGNAME_return_complex_NAMEEND temp986_43))
(assert (= var82911 var82862))
(assert (= var3740376 var82911))
(assert (= temp986_44 #x0000000000000000))
(assert (= var3740377 temp986_44))
(assert (= temp986_45 #x0000000000000002))
(assert (= var69143 temp986_45))
(assert (= temp986_47 #x0000000000000001))
(assert (= temp986_46 temp986_47))
(assert (= temp986_49 #x0000000000000001))
(assert (= temp986_48 temp986_49))
(assert (= temp986_51 #x0000000000000003))
(assert (= temp986_50 temp986_51))
(assert (= temp986_52 #x0000000000000001))
(assert (= var4212949 temp986_52))
(assert (= var4212950 var69143))
(assert (= temp986_54 #x0000000000000001))
(assert (= temp986_53 temp986_54))
(assert (= temp986_56 #x0000000000000001))
(assert (= temp986_55 temp986_56))
(assert (= temp986_58 #x0000000000000001))
(assert (= temp986_57 temp986_58))
(assert (= temp986_60 #x0000000000000001))
(assert (= temp986_59 temp986_60))
(assert (= temp986_62 #x0000000000000000))
(assert (= temp986_61 temp986_62))
(assert (= temp986_64 #x0000000000000001))
(assert (= temp986_63 temp986_64))
(assert (= var4868391 var69143))
(assert (= temp986_65 #x0000000000000002))
(assert (= var4983962 temp986_65))
(assert (= temp986_67 #x0000000000000001))
(assert (= temp986_66 temp986_67))
(assert (= temp986_69 #x0000000000000001))
(assert (= temp986_68 temp986_69))
(assert (= var5453295 var65913))
(assert (= temp986_71 #x0000000000000001))
(assert (= temp986_70 temp986_71))
(assert (= temp986_73 #x0000000000000001))
(assert (= temp986_72 temp986_73))
(assert (= temp986_75 #x0000000000000001))
(assert (= temp986_74 temp986_75))
(assert (= temp986_77 #x0000000000000001))
(assert (= temp986_76 temp986_77))
(assert (= temp986_79 #x0000000000000000))
(assert (= temp986_78 temp986_79))
(assert (= temp986_81 #x0000000000000001))
(assert (= temp986_80 temp986_81))
(assert (= var6375719 var69143))
(assert (= temp986_82 #x0000000000000000))
(assert (= var83534
   (ite (= ARGNAME_center_NAMEEND temp986_82)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp986_83 #x0000000000000001))
(assert (= var83534 temp986_83))
(assert (= var83540 var65913))
(assert (= var6506824 var83540))
(assert (= var6818804 var69143))
(assert (= temp986_84 #x0000000000000001))
(assert (= var6818808 temp986_84))
(assert (= temp986_85 #x0000000000000000))
(assert (= var6818858 temp986_85))
(assert (= temp986_86 #x0000000000000000))
(assert (= var6818858 temp986_86))
(assert (= var7736308 var69143))
(assert (= temp986_87 #x0000000000000001))
(assert (= var7736312 temp986_87))
(assert (= temp986_88 #x0000000000000001))
(assert (= var9128231 temp986_88))
(assert (= temp986_89 #x0000000000000000))
(assert (= var9440410 temp986_89))
(model-add temp986_1 () (_ BitVec 64) #x0000000000000002)
(model-add var81157
           ()
           (_ BitVec 64)
           (bvashr ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp986_2 () (_ BitVec 64) #x0000000000000000)
(model-add var1050945 () (_ BitVec 64) #x0000000000000000)
(model-add temp986_3 () (_ BitVec 64) #xffffffffffffffff)
(model-add var67312 () (_ BitVec 64) #xffffffffffffffff)
(model-add temp986_4 () (_ BitVec 64) #x0000000000000002)
(model-add var81838
           ()
           (_ BitVec 64)
           (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp986_5 () (_ BitVec 64) #x0000000000000001)
(model-add var81839
           ()
           (_ BitVec 64)
           (bvadd #x0000000000000001
                  (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002)))
(model-add temp986_6 () (_ BitVec 64) #x0000000000000001)
(model-add var82185
           ()
           (_ BitVec 64)
           (ite (bvsle #x0000000000000001 ARGNAME_hop_length_NAMEEND)
                #x0000000000000000
                #x0000000000000001))
(model-add var82186
           ()
           (_ BitVec 64)
           (ite (bvsle ARGNAME_hop_length_NAMEEND null)
                #x0000000000000000
                #x0000000000000001))
(model-add temp986_7 () (_ BitVec 64) #x0000000000000000)
(model-add var82187 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add null
           ()
           (_ BitVec 64)
           (ite (or k!0 (= ARGNAME_hop_length_NAMEEND #x8000000000000000))
                ARGNAME_hop_length_NAMEEND
                (bvsub ARGNAME_hop_length_NAMEEND #x0000000000000001)))





