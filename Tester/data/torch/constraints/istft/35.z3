(declare-fun temp64_1 () (_ BitVec 64))
(declare-fun var81157 () (_ BitVec 64))
(declare-fun ARGNAME_n_fft_NAMEEND () (_ BitVec 64))
(declare-fun temp64_2 () (_ BitVec 64))
(declare-fun var1050945 () (_ BitVec 64))
(declare-fun temp64_3 () (_ BitVec 64))
(declare-fun var67312 () (_ BitVec 64))
(declare-fun temp64_4 () (_ BitVec 64))
(declare-fun var81838 () (_ BitVec 64))
(declare-fun temp64_5 () (_ BitVec 64))
(declare-fun var81839 () (_ BitVec 64))
(declare-fun temp64_6 () (_ BitVec 64))
(declare-fun var82185 () (_ BitVec 64))
(declare-fun ARGNAME_hop_length_NAMEEND () (_ BitVec 64))
(declare-fun var82186 () (_ BitVec 64))
(declare-fun null () (_ BitVec 64))
(declare-fun temp64_7 () (_ BitVec 64))
(declare-fun var82187 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun var82356 () (_ BitVec 64))
(declare-fun temp64_8 () (_ BitVec 64))
(declare-fun temp64_9 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var82528 () (_ BitVec 64))
(declare-fun temp64_10 () (_ BitVec 64))
(declare-fun temp64_11 () (_ BitVec 64))
(declare-fun var65913 () (_ BitVec 64))
(declare-fun temp64_12 () (_ BitVec 64))
(declare-fun temp64_13 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp64_14 () (_ BitVec 64))
(declare-fun temp64_15 () (_ BitVec 64))
(declare-fun temp64_16 () (_ BitVec 64))
(declare-fun temp64_17 () (_ BitVec 64))
(declare-fun temp64_18 () (_ BitVec 64))
(declare-fun temp64_19 () (_ BitVec 64))
(declare-fun temp64_20 () (_ BitVec 64))
(declare-fun temp64_21 () (_ BitVec 64))
(declare-fun temp64_22 () (_ BitVec 64))
(declare-fun temp64_23 () (_ BitVec 64))
(declare-fun temp64_24 () (_ BitVec 64))
(declare-fun temp64_25 () (_ BitVec 64))
(declare-fun temp64_26 () (_ BitVec 64))
(declare-fun temp64_27 () (_ BitVec 64))
(declare-fun temp64_28 () (_ BitVec 64))
(declare-fun temp64_29 () (_ BitVec 64))
(declare-fun temp64_31 () (_ BitVec 64))
(declare-fun temp64_30 () (_ BitVec 64))
(declare-fun temp64_32 () (_ BitVec 64))
(declare-fun temp64_33 () (_ BitVec 64))
(declare-fun var82530 () (_ BitVec 64))
(declare-fun var82531 () (_ BitVec 64))
(declare-fun temp64_34 () (_ BitVec 64))
(declare-fun var82728 () (_ BitVec 64))
(declare-fun temp64_35 () (_ BitVec 64))
(declare-fun var1914351 () (_ BitVec 64))
(declare-fun temp64_36 () (_ BitVec 64))
(declare-fun var2115797 () (_ BitVec 64))
(declare-fun temp64_37 () (_ BitVec 64))
(declare-fun var2115798 () (_ BitVec 64))
(declare-fun temp64_39 () (_ BitVec 64))
(declare-fun temp64_38 () (_ BitVec 64))
(declare-fun temp64_40 () (_ BitVec 64))
(declare-fun var2628020 () (_ BitVec 64))
(declare-fun temp64_41 () (_ BitVec 64))
(declare-fun temp64_42 () (_ BitVec 64))
(declare-fun ARGNAME_normalized_NAMEEND () (_ BitVec 64))
(declare-fun var82862 () (_ BitVec 64))
(declare-fun temp64_43 () (_ BitVec 64))
(declare-fun ARGNAME_return_complex_NAMEEND () (_ BitVec 64))
(declare-fun var82911 () (_ BitVec 64))
(declare-fun var3740376 () (_ BitVec 64))
(declare-fun temp64_44 () (_ BitVec 64))
(declare-fun var3740377 () (_ BitVec 64))
(declare-fun temp64_45 () (_ BitVec 64))
(declare-fun var69143 () (_ BitVec 64))
(declare-fun temp64_47 () (_ BitVec 64))
(declare-fun temp64_46 () (_ BitVec 64))
(declare-fun temp64_49 () (_ BitVec 64))
(declare-fun temp64_48 () (_ BitVec 64))
(declare-fun temp64_51 () (_ BitVec 64))
(declare-fun temp64_50 () (_ BitVec 64))
(declare-fun temp64_52 () (_ BitVec 64))
(declare-fun var4212949 () (_ BitVec 64))
(declare-fun var4212950 () (_ BitVec 64))
(declare-fun temp64_54 () (_ BitVec 64))
(declare-fun temp64_53 () (_ BitVec 64))
(declare-fun temp64_56 () (_ BitVec 64))
(declare-fun temp64_55 () (_ BitVec 64))
(declare-fun temp64_58 () (_ BitVec 64))
(declare-fun temp64_57 () (_ BitVec 64))
(declare-fun temp64_60 () (_ BitVec 64))
(declare-fun temp64_59 () (_ BitVec 64))
(declare-fun temp64_62 () (_ BitVec 64))
(declare-fun temp64_61 () (_ BitVec 64))
(declare-fun temp64_64 () (_ BitVec 64))
(declare-fun temp64_63 () (_ BitVec 64))
(declare-fun var4868391 () (_ BitVec 64))
(declare-fun temp64_65 () (_ BitVec 64))
(declare-fun var4983962 () (_ BitVec 64))
(declare-fun temp64_67 () (_ BitVec 64))
(declare-fun temp64_66 () (_ BitVec 64))
(declare-fun temp64_69 () (_ BitVec 64))
(declare-fun temp64_68 () (_ BitVec 64))
(declare-fun var5453295 () (_ BitVec 64))
(declare-fun temp64_71 () (_ BitVec 64))
(declare-fun temp64_70 () (_ BitVec 64))
(declare-fun temp64_73 () (_ BitVec 64))
(declare-fun temp64_72 () (_ BitVec 64))
(declare-fun temp64_75 () (_ BitVec 64))
(declare-fun temp64_74 () (_ BitVec 64))
(declare-fun temp64_77 () (_ BitVec 64))
(declare-fun temp64_76 () (_ BitVec 64))
(declare-fun temp64_79 () (_ BitVec 64))
(declare-fun temp64_78 () (_ BitVec 64))
(declare-fun temp64_81 () (_ BitVec 64))
(declare-fun temp64_80 () (_ BitVec 64))
(declare-fun var6375719 () (_ BitVec 64))
(declare-fun temp64_82 () (_ BitVec 64))
(declare-fun ARGNAME_center_NAMEEND () (_ BitVec 64))
(declare-fun var83534 () (_ BitVec 64))
(declare-fun temp64_83 () (_ BitVec 64))
(declare-fun var83540 () (_ BitVec 64))
(declare-fun var6506824 () (_ BitVec 64))
(declare-fun var6818804 () (_ BitVec 64))
(declare-fun temp64_84 () (_ BitVec 64))
(declare-fun var6818808 () (_ BitVec 64))
(declare-fun var7867380 () (_ BitVec 64))
(declare-fun temp64_85 () (_ BitVec 64))
(declare-fun var7867384 () (_ BitVec 64))
(declare-fun temp64_86 () (_ BitVec 64))
(declare-fun var7867434 () (_ BitVec 64))
(declare-fun temp64_87 () (_ BitVec 64))
(declare-fun temp64_88 () (_ BitVec 64))
(declare-fun var9193767 () (_ BitVec 64))
(declare-fun var9455911 () (_ BitVec 64))
(assert (= temp64_1 #x0000000000000002))
(assert (= var81157 (bvashr ARGNAME_n_fft_NAMEEND temp64_1)))
(assert (= temp64_2 #x0000000000000000))
(assert (= var1050945 temp64_2))
(assert (= temp64_3 #xffffffffffffffff))
(assert (= var67312 temp64_3))
(assert (= temp64_4 #x0000000000000002))
(assert (= var81838 (bvsdiv ARGNAME_n_fft_NAMEEND temp64_4)))
(assert (= temp64_5 #x0000000000000001))
(assert (= var81839 (bvadd var81838 temp64_5)))
(assert (= temp64_6 #x0000000000000001))
(assert (= var82185
   (ite (bvslt ARGNAME_hop_length_NAMEEND temp64_6)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82186
   (ite (bvsgt ARGNAME_hop_length_NAMEEND null)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82187 (bvor var82185 var82186)))
(assert (= temp64_7 #x0000000000000000))
(assert (= var82187 temp64_7))
(assert (= var82356
   (ite (bvsgt null ARGNAME_n_fft_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_8 #x0000000000000000))
(assert (= var82356 temp64_8))
(assert (= temp64_9 #x0000000000000001))
(assert (= var82528
   (ite (= ARGNAME_window_NAMEEND_DIM temp64_9)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_10 #x0000000000000001))
(assert (= var82528 temp64_10))
(assert (= temp64_11 #x0000000000000000))
(assert (= var65913 temp64_11))
(assert (= temp64_12 #x0000000000000000))
(assert (= temp64_13 temp64_12))
(assert (= temp64_14 (select ARGNAME_window_NAMEEND_DIMSIZE temp64_13)))
(assert (= temp64_15 #x0000000000000001))
(assert (= temp64_16 temp64_15))
(assert (= temp64_17 (select ARGNAME_window_NAMEEND_DIMSIZE temp64_16)))
(assert (= temp64_18 #x0000000000000002))
(assert (= temp64_19 temp64_18))
(assert (= temp64_20 (select ARGNAME_window_NAMEEND_DIMSIZE temp64_19)))
(assert (= temp64_21 #x0000000000000003))
(assert (= temp64_22 temp64_21))
(assert (= temp64_23 (select ARGNAME_window_NAMEEND_DIMSIZE temp64_22)))
(assert (= temp64_24 #x0000000000000004))
(assert (= temp64_25 temp64_24))
(assert (= temp64_26 (select ARGNAME_window_NAMEEND_DIMSIZE temp64_25)))
(assert (= temp64_27 #x0000000000000005))
(assert (= temp64_28 temp64_27))
(assert (= temp64_29 (select ARGNAME_window_NAMEEND_DIMSIZE temp64_28)))
(assert (= temp64_31 #x0000000000000000))
(assert (= temp64_30
   (ite (bvslt var65913 temp64_31)
        (bvadd ARGNAME_window_NAMEEND_DIM var65913)
        var65913)))
(assert (= temp64_32 temp64_30))
(assert (= temp64_33 (select ARGNAME_window_NAMEEND_DIMSIZE temp64_32)))
(assert (= var82530 temp64_33))
(assert (bvslt temp64_30 ARGNAME_window_NAMEEND_DIM))
(assert (= var82531 (ite (= var82530 null) #x0000000000000001 #x0000000000000000)))
(assert (= temp64_34 #x0000000000000001))
(assert (= var82531 temp64_34))
(assert (= var82728
   (ite (= ARGNAME_n_fft_NAMEEND null) #x0000000000000001 #x0000000000000000)))
(assert (= temp64_35 #x0000000000000001))
(assert (= var82728 temp64_35))
(assert (= var1914351 var65913))
(assert (= temp64_36 #x0000000000000001))
(assert (= var2115797 temp64_36))
(assert (= temp64_37 #x0000000000000002))
(assert (= var2115798 temp64_37))
(assert (= temp64_39 #x0000000000000000))
(assert (= temp64_38 temp64_39))
(assert (= temp64_40 #x0000000000000000))
(assert (= var2628020 temp64_40))
(assert (= temp64_41 #x0000000000000001))
(assert (= temp64_42 #x0000000000000002))
(assert (= var82862
   (ite (= ARGNAME_normalized_NAMEEND #x0000000000000001) temp64_41 temp64_42)))
(assert (= temp64_43 #x0000000000000001))
(assert (= ARGNAME_return_complex_NAMEEND temp64_43))
(assert (= var82911 var82862))
(assert (= var3740376 var82911))
(assert (= temp64_44 #x0000000000000000))
(assert (= var3740377 temp64_44))
(assert (= temp64_45 #x0000000000000002))
(assert (= var69143 temp64_45))
(assert (= temp64_47 #x0000000000000001))
(assert (= temp64_46 temp64_47))
(assert (= temp64_49 #x0000000000000001))
(assert (= temp64_48 temp64_49))
(assert (= temp64_51 #x0000000000000003))
(assert (= temp64_50 temp64_51))
(assert (= temp64_52 #x0000000000000001))
(assert (= var4212949 temp64_52))
(assert (= var4212950 var69143))
(assert (= temp64_54 #x0000000000000001))
(assert (= temp64_53 temp64_54))
(assert (= temp64_56 #x0000000000000001))
(assert (= temp64_55 temp64_56))
(assert (= temp64_58 #x0000000000000001))
(assert (= temp64_57 temp64_58))
(assert (= temp64_60 #x0000000000000001))
(assert (= temp64_59 temp64_60))
(assert (= temp64_62 #x0000000000000000))
(assert (= temp64_61 temp64_62))
(assert (= temp64_64 #x0000000000000001))
(assert (= temp64_63 temp64_64))
(assert (= var4868391 var69143))
(assert (= temp64_65 #x0000000000000002))
(assert (= var4983962 temp64_65))
(assert (= temp64_67 #x0000000000000001))
(assert (= temp64_66 temp64_67))
(assert (= temp64_69 #x0000000000000001))
(assert (= temp64_68 temp64_69))
(assert (= var5453295 var65913))
(assert (= temp64_71 #x0000000000000001))
(assert (= temp64_70 temp64_71))
(assert (= temp64_73 #x0000000000000001))
(assert (= temp64_72 temp64_73))
(assert (= temp64_75 #x0000000000000001))
(assert (= temp64_74 temp64_75))
(assert (= temp64_77 #x0000000000000001))
(assert (= temp64_76 temp64_77))
(assert (= temp64_79 #x0000000000000000))
(assert (= temp64_78 temp64_79))
(assert (= temp64_81 #x0000000000000001))
(assert (= temp64_80 temp64_81))
(assert (= var6375719 var69143))
(assert (= temp64_82 #x0000000000000000))
(assert (= var83534
   (ite (= ARGNAME_center_NAMEEND temp64_82)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_83 #x0000000000000001))
(assert (= var83534 temp64_83))
(assert (= var83540 var65913))
(assert (= var6506824 var83540))
(assert (= var6818804 var69143))
(assert (= temp64_84 #x0000000000000001))
(assert (= var6818808 temp64_84))
(assert (= var7867380 var69143))
(assert (= temp64_85 #x0000000000000001))
(assert (= var7867384 temp64_85))
(assert (= temp64_86 #x0000000000000000))
(assert (= var7867434 temp64_86))
(assert (= temp64_87 #x0000000000000000))
(assert (= var7867434 temp64_87))
(assert (= temp64_88 #x0000000000000001))
(assert (= var9193767 temp64_88))
(assert (= var9455911 var65913))
(model-add temp64_1 () (_ BitVec 64) #x0000000000000002)
(model-add var81157
           ()
           (_ BitVec 64)
           (bvashr ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp64_2 () (_ BitVec 64) #x0000000000000000)
(model-add var1050945 () (_ BitVec 64) #x0000000000000000)
(model-add temp64_3 () (_ BitVec 64) #xffffffffffffffff)
(model-add var67312 () (_ BitVec 64) #xffffffffffffffff)
(model-add temp64_4 () (_ BitVec 64) #x0000000000000002)
(model-add var81838
           ()
           (_ BitVec 64)
           (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp64_5 () (_ BitVec 64) #x0000000000000001)
(model-add var81839
           ()
           (_ BitVec 64)
           (bvadd #x0000000000000001
                  (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002)))
(model-add temp64_6 () (_ BitVec 64) #x0000000000000001)
(model-add var82185
           ()
           (_ BitVec 64)
           (ite (bvsle #x0000000000000001 ARGNAME_hop_length_NAMEEND)
                #x0000000000000000
                #x0000000000000001))
(model-add var82186
           ()
           (_ BitVec 64)
           (ite (bvsle ARGNAME_hop_length_NAMEEND null)
                #x0000000000000000
                #x0000000000000001))
(model-add temp64_7 () (_ BitVec 64) #x0000000000000000)
(model-add var82187 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add null
           ()
           (_ BitVec 64)
           (ite (or k!0 (= ARGNAME_hop_length_NAMEEND #x8000000000000000))
                ARGNAME_hop_length_NAMEEND
                (bvsub ARGNAME_hop_length_NAMEEND #x0000000000000001)))






