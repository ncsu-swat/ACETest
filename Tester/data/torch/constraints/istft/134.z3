(declare-fun temp278_1 () (_ BitVec 64))
(declare-fun var81157 () (_ BitVec 64))
(declare-fun ARGNAME_n_fft_NAMEEND () (_ BitVec 64))
(declare-fun temp278_2 () (_ BitVec 64))
(declare-fun var1050945 () (_ BitVec 64))
(declare-fun temp278_3 () (_ BitVec 64))
(declare-fun var67312 () (_ BitVec 64))
(declare-fun temp278_4 () (_ BitVec 64))
(declare-fun var81838 () (_ BitVec 64))
(declare-fun temp278_5 () (_ BitVec 64))
(declare-fun var81839 () (_ BitVec 64))
(declare-fun temp278_6 () (_ BitVec 64))
(declare-fun var82185 () (_ BitVec 64))
(declare-fun ARGNAME_hop_length_NAMEEND () (_ BitVec 64))
(declare-fun var82186 () (_ BitVec 64))
(declare-fun null () (_ BitVec 64))
(declare-fun temp278_7 () (_ BitVec 64))
(declare-fun var82187 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun var82356 () (_ BitVec 64))
(declare-fun temp278_8 () (_ BitVec 64))
(declare-fun temp278_9 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var82528 () (_ BitVec 64))
(declare-fun temp278_10 () (_ BitVec 64))
(declare-fun temp278_11 () (_ BitVec 64))
(declare-fun var65913 () (_ BitVec 64))
(declare-fun temp278_12 () (_ BitVec 64))
(declare-fun temp278_13 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp278_14 () (_ BitVec 64))
(declare-fun temp278_15 () (_ BitVec 64))
(declare-fun temp278_16 () (_ BitVec 64))
(declare-fun temp278_17 () (_ BitVec 64))
(declare-fun temp278_18 () (_ BitVec 64))
(declare-fun temp278_19 () (_ BitVec 64))
(declare-fun temp278_20 () (_ BitVec 64))
(declare-fun temp278_21 () (_ BitVec 64))
(declare-fun temp278_22 () (_ BitVec 64))
(declare-fun temp278_23 () (_ BitVec 64))
(declare-fun temp278_24 () (_ BitVec 64))
(declare-fun temp278_25 () (_ BitVec 64))
(declare-fun temp278_26 () (_ BitVec 64))
(declare-fun temp278_27 () (_ BitVec 64))
(declare-fun temp278_28 () (_ BitVec 64))
(declare-fun temp278_29 () (_ BitVec 64))
(declare-fun temp278_31 () (_ BitVec 64))
(declare-fun temp278_30 () (_ BitVec 64))
(declare-fun temp278_32 () (_ BitVec 64))
(declare-fun temp278_33 () (_ BitVec 64))
(declare-fun var82530 () (_ BitVec 64))
(declare-fun var82531 () (_ BitVec 64))
(declare-fun temp278_34 () (_ BitVec 64))
(declare-fun var82728 () (_ BitVec 64))
(declare-fun temp278_35 () (_ BitVec 64))
(declare-fun var1914351 () (_ BitVec 64))
(declare-fun temp278_36 () (_ BitVec 64))
(declare-fun var2115797 () (_ BitVec 64))
(declare-fun temp278_37 () (_ BitVec 64))
(declare-fun var2115798 () (_ BitVec 64))
(declare-fun temp278_39 () (_ BitVec 64))
(declare-fun temp278_38 () (_ BitVec 64))
(declare-fun temp278_40 () (_ BitVec 64))
(declare-fun var2628020 () (_ BitVec 64))
(declare-fun temp278_41 () (_ BitVec 64))
(declare-fun temp278_42 () (_ BitVec 64))
(declare-fun ARGNAME_normalized_NAMEEND () (_ BitVec 64))
(declare-fun var82862 () (_ BitVec 64))
(declare-fun temp278_43 () (_ BitVec 64))
(declare-fun ARGNAME_return_complex_NAMEEND () (_ BitVec 64))
(declare-fun var82911 () (_ BitVec 64))
(declare-fun var3740376 () (_ BitVec 64))
(declare-fun temp278_44 () (_ BitVec 64))
(declare-fun var3740377 () (_ BitVec 64))
(declare-fun temp278_45 () (_ BitVec 64))
(declare-fun var69143 () (_ BitVec 64))
(declare-fun temp278_47 () (_ BitVec 64))
(declare-fun temp278_46 () (_ BitVec 64))
(declare-fun temp278_49 () (_ BitVec 64))
(declare-fun temp278_48 () (_ BitVec 64))
(declare-fun temp278_51 () (_ BitVec 64))
(declare-fun temp278_50 () (_ BitVec 64))
(declare-fun temp278_52 () (_ BitVec 64))
(declare-fun var4212949 () (_ BitVec 64))
(declare-fun var4212950 () (_ BitVec 64))
(declare-fun temp278_54 () (_ BitVec 64))
(declare-fun temp278_53 () (_ BitVec 64))
(declare-fun temp278_56 () (_ BitVec 64))
(declare-fun temp278_55 () (_ BitVec 64))
(declare-fun temp278_58 () (_ BitVec 64))
(declare-fun temp278_57 () (_ BitVec 64))
(declare-fun temp278_60 () (_ BitVec 64))
(declare-fun temp278_59 () (_ BitVec 64))
(declare-fun temp278_62 () (_ BitVec 64))
(declare-fun temp278_61 () (_ BitVec 64))
(declare-fun temp278_64 () (_ BitVec 64))
(declare-fun temp278_63 () (_ BitVec 64))
(declare-fun var4868391 () (_ BitVec 64))
(declare-fun temp278_65 () (_ BitVec 64))
(declare-fun var4983962 () (_ BitVec 64))
(declare-fun temp278_67 () (_ BitVec 64))
(declare-fun temp278_66 () (_ BitVec 64))
(declare-fun temp278_69 () (_ BitVec 64))
(declare-fun temp278_68 () (_ BitVec 64))
(declare-fun var5453295 () (_ BitVec 64))
(declare-fun temp278_71 () (_ BitVec 64))
(declare-fun temp278_70 () (_ BitVec 64))
(declare-fun temp278_73 () (_ BitVec 64))
(declare-fun temp278_72 () (_ BitVec 64))
(declare-fun temp278_75 () (_ BitVec 64))
(declare-fun temp278_74 () (_ BitVec 64))
(declare-fun temp278_77 () (_ BitVec 64))
(declare-fun temp278_76 () (_ BitVec 64))
(declare-fun temp278_79 () (_ BitVec 64))
(declare-fun temp278_78 () (_ BitVec 64))
(declare-fun temp278_81 () (_ BitVec 64))
(declare-fun temp278_80 () (_ BitVec 64))
(declare-fun var6375719 () (_ BitVec 64))
(declare-fun temp278_82 () (_ BitVec 64))
(declare-fun ARGNAME_center_NAMEEND () (_ BitVec 64))
(declare-fun var83534 () (_ BitVec 64))
(declare-fun temp278_83 () (_ BitVec 64))
(declare-fun var83540 () (_ BitVec 64))
(declare-fun var6506824 () (_ BitVec 64))
(declare-fun var6818804 () (_ BitVec 64))
(declare-fun temp278_84 () (_ BitVec 64))
(declare-fun var6818808 () (_ BitVec 64))
(declare-fun var7801844 () (_ BitVec 64))
(declare-fun temp278_85 () (_ BitVec 64))
(declare-fun var7801848 () (_ BitVec 64))
(declare-fun temp278_86 () (_ BitVec 64))
(declare-fun var7801886 () (_ BitVec 64))
(declare-fun temp278_87 () (_ BitVec 64))
(declare-fun temp278_88 () (_ BitVec 64))
(declare-fun var9062695 () (_ BitVec 64))
(declare-fun temp278_89 () (_ BitVec 64))
(declare-fun var9374874 () (_ BitVec 64))
(assert (= temp278_1 #x0000000000000002))
(assert (= var81157 (bvashr ARGNAME_n_fft_NAMEEND temp278_1)))
(assert (= temp278_2 #x0000000000000000))
(assert (= var1050945 temp278_2))
(assert (= temp278_3 #xffffffffffffffff))
(assert (= var67312 temp278_3))
(assert (= temp278_4 #x0000000000000002))
(assert (= var81838 (bvsdiv ARGNAME_n_fft_NAMEEND temp278_4)))
(assert (= temp278_5 #x0000000000000001))
(assert (= var81839 (bvadd var81838 temp278_5)))
(assert (= temp278_6 #x0000000000000001))
(assert (= var82185
   (ite (bvslt ARGNAME_hop_length_NAMEEND temp278_6)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82186
   (ite (bvsgt ARGNAME_hop_length_NAMEEND null)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82187 (bvor var82185 var82186)))
(assert (= temp278_7 #x0000000000000000))
(assert (= var82187 temp278_7))
(assert (= var82356
   (ite (bvsgt null ARGNAME_n_fft_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp278_8 #x0000000000000000))
(assert (= var82356 temp278_8))
(assert (= temp278_9 #x0000000000000001))
(assert (= var82528
   (ite (= ARGNAME_window_NAMEEND_DIM temp278_9)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp278_10 #x0000000000000001))
(assert (= var82528 temp278_10))
(assert (= temp278_11 #x0000000000000000))
(assert (= var65913 temp278_11))
(assert (= temp278_12 #x0000000000000000))
(assert (= temp278_13 temp278_12))
(assert (= temp278_14 (select ARGNAME_window_NAMEEND_DIMSIZE temp278_13)))
(assert (= temp278_15 #x0000000000000001))
(assert (= temp278_16 temp278_15))
(assert (= temp278_17 (select ARGNAME_window_NAMEEND_DIMSIZE temp278_16)))
(assert (= temp278_18 #x0000000000000002))
(assert (= temp278_19 temp278_18))
(assert (= temp278_20 (select ARGNAME_window_NAMEEND_DIMSIZE temp278_19)))
(assert (= temp278_21 #x0000000000000003))
(assert (= temp278_22 temp278_21))
(assert (= temp278_23 (select ARGNAME_window_NAMEEND_DIMSIZE temp278_22)))
(assert (= temp278_24 #x0000000000000004))
(assert (= temp278_25 temp278_24))
(assert (= temp278_26 (select ARGNAME_window_NAMEEND_DIMSIZE temp278_25)))
(assert (= temp278_27 #x0000000000000005))
(assert (= temp278_28 temp278_27))
(assert (= temp278_29 (select ARGNAME_window_NAMEEND_DIMSIZE temp278_28)))
(assert (= temp278_31 #x0000000000000000))
(assert (= temp278_30
   (ite (bvslt var65913 temp278_31)
        (bvadd ARGNAME_window_NAMEEND_DIM var65913)
        var65913)))
(assert (= temp278_32 temp278_30))
(assert (= temp278_33 (select ARGNAME_window_NAMEEND_DIMSIZE temp278_32)))
(assert (= var82530 temp278_33))
(assert (bvslt temp278_30 ARGNAME_window_NAMEEND_DIM))
(assert (= var82531 (ite (= var82530 null) #x0000000000000001 #x0000000000000000)))
(assert (= temp278_34 #x0000000000000001))
(assert (= var82531 temp278_34))
(assert (= var82728
   (ite (= ARGNAME_n_fft_NAMEEND null) #x0000000000000001 #x0000000000000000)))
(assert (= temp278_35 #x0000000000000001))
(assert (= var82728 temp278_35))
(assert (= var1914351 var65913))
(assert (= temp278_36 #x0000000000000001))
(assert (= var2115797 temp278_36))
(assert (= temp278_37 #x0000000000000002))
(assert (= var2115798 temp278_37))
(assert (= temp278_39 #x0000000000000000))
(assert (= temp278_38 temp278_39))
(assert (= temp278_40 #x0000000000000000))
(assert (= var2628020 temp278_40))
(assert (= temp278_41 #x0000000000000001))
(assert (= temp278_42 #x0000000000000002))
(assert (= var82862
   (ite (= ARGNAME_normalized_NAMEEND #x0000000000000001) temp278_41 temp278_42)))
(assert (= temp278_43 #x0000000000000001))
(assert (= ARGNAME_return_complex_NAMEEND temp278_43))
(assert (= var82911 var82862))
(assert (= var3740376 var82911))
(assert (= temp278_44 #x0000000000000000))
(assert (= var3740377 temp278_44))
(assert (= temp278_45 #x0000000000000002))
(assert (= var69143 temp278_45))
(assert (= temp278_47 #x0000000000000001))
(assert (= temp278_46 temp278_47))
(assert (= temp278_49 #x0000000000000001))
(assert (= temp278_48 temp278_49))
(assert (= temp278_51 #x0000000000000003))
(assert (= temp278_50 temp278_51))
(assert (= temp278_52 #x0000000000000001))
(assert (= var4212949 temp278_52))
(assert (= var4212950 var69143))
(assert (= temp278_54 #x0000000000000001))
(assert (= temp278_53 temp278_54))
(assert (= temp278_56 #x0000000000000001))
(assert (= temp278_55 temp278_56))
(assert (= temp278_58 #x0000000000000001))
(assert (= temp278_57 temp278_58))
(assert (= temp278_60 #x0000000000000001))
(assert (= temp278_59 temp278_60))
(assert (= temp278_62 #x0000000000000000))
(assert (= temp278_61 temp278_62))
(assert (= temp278_64 #x0000000000000001))
(assert (= temp278_63 temp278_64))
(assert (= var4868391 var69143))
(assert (= temp278_65 #x0000000000000002))
(assert (= var4983962 temp278_65))
(assert (= temp278_67 #x0000000000000001))
(assert (= temp278_66 temp278_67))
(assert (= temp278_69 #x0000000000000001))
(assert (= temp278_68 temp278_69))
(assert (= var5453295 var65913))
(assert (= temp278_71 #x0000000000000001))
(assert (= temp278_70 temp278_71))
(assert (= temp278_73 #x0000000000000001))
(assert (= temp278_72 temp278_73))
(assert (= temp278_75 #x0000000000000001))
(assert (= temp278_74 temp278_75))
(assert (= temp278_77 #x0000000000000001))
(assert (= temp278_76 temp278_77))
(assert (= temp278_79 #x0000000000000000))
(assert (= temp278_78 temp278_79))
(assert (= temp278_81 #x0000000000000001))
(assert (= temp278_80 temp278_81))
(assert (= var6375719 var69143))
(assert (= temp278_82 #x0000000000000000))
(assert (= var83534
   (ite (= ARGNAME_center_NAMEEND temp278_82)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp278_83 #x0000000000000001))
(assert (= var83534 temp278_83))
(assert (= var83540 var65913))
(assert (= var6506824 var83540))
(assert (= var6818804 var69143))
(assert (= temp278_84 #x0000000000000001))
(assert (= var6818808 temp278_84))
(assert (= var7801844 var69143))
(assert (= temp278_85 #x0000000000000001))
(assert (= var7801848 temp278_85))
(assert (= temp278_86 #x0000000000000000))
(assert (= var7801886 temp278_86))
(assert (= temp278_87 #x0000000000000000))
(assert (= var7801886 temp278_87))
(assert (= temp278_88 #x0000000000000001))
(assert (= var9062695 temp278_88))
(assert (= temp278_89 #x0000000000000000))
(assert (= var9374874 temp278_89))
(model-add temp278_1 () (_ BitVec 64) #x0000000000000002)
(model-add var81157
           ()
           (_ BitVec 64)
           (bvashr ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp278_2 () (_ BitVec 64) #x0000000000000000)
(model-add var1050945 () (_ BitVec 64) #x0000000000000000)
(model-add temp278_3 () (_ BitVec 64) #xffffffffffffffff)
(model-add var67312 () (_ BitVec 64) #xffffffffffffffff)
(model-add temp278_4 () (_ BitVec 64) #x0000000000000002)
(model-add var81838
           ()
           (_ BitVec 64)
           (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp278_5 () (_ BitVec 64) #x0000000000000001)
(model-add var81839
           ()
           (_ BitVec 64)
           (bvadd #x0000000000000001
                  (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002)))
(model-add temp278_6 () (_ BitVec 64) #x0000000000000001)
(model-add var82185
           ()
           (_ BitVec 64)
           (ite (bvsle #x0000000000000001 ARGNAME_hop_length_NAMEEND)
                #x0000000000000000
                #x0000000000000001))
(model-add var82186
           ()
           (_ BitVec 64)
           (ite (bvsle ARGNAME_hop_length_NAMEEND null)
                #x0000000000000000
                #x0000000000000001))
(model-add temp278_7 () (_ BitVec 64) #x0000000000000000)
(model-add var82187 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add null
           ()
           (_ BitVec 64)
           (ite (or k!0 (= ARGNAME_hop_length_NAMEEND #x8000000000000000))
                ARGNAME_hop_length_NAMEEND
                (bvsub ARGNAME_hop_length_NAMEEND #x0000000000000001)))





