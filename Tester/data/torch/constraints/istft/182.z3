(declare-fun temp388_1 () (_ BitVec 64))
(declare-fun var81157 () (_ BitVec 64))
(declare-fun ARGNAME_n_fft_NAMEEND () (_ BitVec 64))
(declare-fun temp388_2 () (_ BitVec 64))
(declare-fun var1050945 () (_ BitVec 64))
(declare-fun temp388_3 () (_ BitVec 64))
(declare-fun var67312 () (_ BitVec 64))
(declare-fun temp388_4 () (_ BitVec 64))
(declare-fun var81838 () (_ BitVec 64))
(declare-fun temp388_5 () (_ BitVec 64))
(declare-fun var81839 () (_ BitVec 64))
(declare-fun temp388_6 () (_ BitVec 64))
(declare-fun var82185 () (_ BitVec 64))
(declare-fun ARGNAME_hop_length_NAMEEND () (_ BitVec 64))
(declare-fun var82186 () (_ BitVec 64))
(declare-fun null () (_ BitVec 64))
(declare-fun temp388_7 () (_ BitVec 64))
(declare-fun var82187 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun var82356 () (_ BitVec 64))
(declare-fun temp388_8 () (_ BitVec 64))
(declare-fun temp388_9 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var82528 () (_ BitVec 64))
(declare-fun temp388_10 () (_ BitVec 64))
(declare-fun temp388_11 () (_ BitVec 64))
(declare-fun var65913 () (_ BitVec 64))
(declare-fun temp388_12 () (_ BitVec 64))
(declare-fun temp388_13 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp388_14 () (_ BitVec 64))
(declare-fun temp388_15 () (_ BitVec 64))
(declare-fun temp388_16 () (_ BitVec 64))
(declare-fun temp388_17 () (_ BitVec 64))
(declare-fun temp388_18 () (_ BitVec 64))
(declare-fun temp388_19 () (_ BitVec 64))
(declare-fun temp388_20 () (_ BitVec 64))
(declare-fun temp388_21 () (_ BitVec 64))
(declare-fun temp388_22 () (_ BitVec 64))
(declare-fun temp388_23 () (_ BitVec 64))
(declare-fun temp388_24 () (_ BitVec 64))
(declare-fun temp388_25 () (_ BitVec 64))
(declare-fun temp388_26 () (_ BitVec 64))
(declare-fun temp388_27 () (_ BitVec 64))
(declare-fun temp388_28 () (_ BitVec 64))
(declare-fun temp388_29 () (_ BitVec 64))
(declare-fun temp388_31 () (_ BitVec 64))
(declare-fun temp388_30 () (_ BitVec 64))
(declare-fun temp388_32 () (_ BitVec 64))
(declare-fun temp388_33 () (_ BitVec 64))
(declare-fun var82530 () (_ BitVec 64))
(declare-fun var82531 () (_ BitVec 64))
(declare-fun temp388_34 () (_ BitVec 64))
(declare-fun var82728 () (_ BitVec 64))
(declare-fun temp388_35 () (_ BitVec 64))
(declare-fun var1914351 () (_ BitVec 64))
(declare-fun temp388_36 () (_ BitVec 64))
(declare-fun var2115797 () (_ BitVec 64))
(declare-fun temp388_37 () (_ BitVec 64))
(declare-fun var2115798 () (_ BitVec 64))
(declare-fun temp388_39 () (_ BitVec 64))
(declare-fun temp388_38 () (_ BitVec 64))
(declare-fun temp388_40 () (_ BitVec 64))
(declare-fun var2628020 () (_ BitVec 64))
(declare-fun temp388_41 () (_ BitVec 64))
(declare-fun temp388_42 () (_ BitVec 64))
(declare-fun ARGNAME_normalized_NAMEEND () (_ BitVec 64))
(declare-fun var82862 () (_ BitVec 64))
(declare-fun temp388_43 () (_ BitVec 64))
(declare-fun ARGNAME_return_complex_NAMEEND () (_ BitVec 64))
(declare-fun var82911 () (_ BitVec 64))
(declare-fun var3740376 () (_ BitVec 64))
(declare-fun temp388_44 () (_ BitVec 64))
(declare-fun var3740377 () (_ BitVec 64))
(declare-fun temp388_45 () (_ BitVec 64))
(declare-fun var69143 () (_ BitVec 64))
(declare-fun temp388_47 () (_ BitVec 64))
(declare-fun temp388_46 () (_ BitVec 64))
(declare-fun temp388_49 () (_ BitVec 64))
(declare-fun temp388_48 () (_ BitVec 64))
(declare-fun temp388_51 () (_ BitVec 64))
(declare-fun temp388_50 () (_ BitVec 64))
(declare-fun temp388_52 () (_ BitVec 64))
(declare-fun var4212949 () (_ BitVec 64))
(declare-fun var4212950 () (_ BitVec 64))
(declare-fun temp388_54 () (_ BitVec 64))
(declare-fun temp388_53 () (_ BitVec 64))
(declare-fun temp388_56 () (_ BitVec 64))
(declare-fun temp388_55 () (_ BitVec 64))
(declare-fun temp388_58 () (_ BitVec 64))
(declare-fun temp388_57 () (_ BitVec 64))
(declare-fun temp388_60 () (_ BitVec 64))
(declare-fun temp388_59 () (_ BitVec 64))
(declare-fun temp388_62 () (_ BitVec 64))
(declare-fun temp388_61 () (_ BitVec 64))
(declare-fun temp388_64 () (_ BitVec 64))
(declare-fun temp388_63 () (_ BitVec 64))
(declare-fun var4868391 () (_ BitVec 64))
(declare-fun temp388_65 () (_ BitVec 64))
(declare-fun var4983962 () (_ BitVec 64))
(declare-fun temp388_67 () (_ BitVec 64))
(declare-fun temp388_66 () (_ BitVec 64))
(declare-fun temp388_69 () (_ BitVec 64))
(declare-fun temp388_68 () (_ BitVec 64))
(declare-fun var5453295 () (_ BitVec 64))
(declare-fun temp388_71 () (_ BitVec 64))
(declare-fun temp388_70 () (_ BitVec 64))
(declare-fun temp388_73 () (_ BitVec 64))
(declare-fun temp388_72 () (_ BitVec 64))
(declare-fun temp388_75 () (_ BitVec 64))
(declare-fun temp388_74 () (_ BitVec 64))
(declare-fun temp388_77 () (_ BitVec 64))
(declare-fun temp388_76 () (_ BitVec 64))
(declare-fun temp388_79 () (_ BitVec 64))
(declare-fun temp388_78 () (_ BitVec 64))
(declare-fun temp388_81 () (_ BitVec 64))
(declare-fun temp388_80 () (_ BitVec 64))
(declare-fun var6375719 () (_ BitVec 64))
(declare-fun temp388_82 () (_ BitVec 64))
(declare-fun ARGNAME_center_NAMEEND () (_ BitVec 64))
(declare-fun var83534 () (_ BitVec 64))
(declare-fun temp388_83 () (_ BitVec 64))
(declare-fun var83540 () (_ BitVec 64))
(declare-fun var6506824 () (_ BitVec 64))
(declare-fun var6818804 () (_ BitVec 64))
(declare-fun temp388_84 () (_ BitVec 64))
(declare-fun var6818808 () (_ BitVec 64))
(declare-fun var7801844 () (_ BitVec 64))
(declare-fun temp388_85 () (_ BitVec 64))
(declare-fun var7801848 () (_ BitVec 64))
(declare-fun temp388_86 () (_ BitVec 64))
(declare-fun var7801898 () (_ BitVec 64))
(declare-fun temp388_87 () (_ BitVec 64))
(declare-fun temp388_88 () (_ BitVec 64))
(declare-fun var9128231 () (_ BitVec 64))
(declare-fun temp388_89 () (_ BitVec 64))
(declare-fun var9440410 () (_ BitVec 64))
(assert (= temp388_1 #x0000000000000002))
(assert (= var81157 (bvashr ARGNAME_n_fft_NAMEEND temp388_1)))
(assert (= temp388_2 #x0000000000000000))
(assert (= var1050945 temp388_2))
(assert (= temp388_3 #xffffffffffffffff))
(assert (= var67312 temp388_3))
(assert (= temp388_4 #x0000000000000002))
(assert (= var81838 (bvsdiv ARGNAME_n_fft_NAMEEND temp388_4)))
(assert (= temp388_5 #x0000000000000001))
(assert (= var81839 (bvadd var81838 temp388_5)))
(assert (= temp388_6 #x0000000000000001))
(assert (= var82185
   (ite (bvslt ARGNAME_hop_length_NAMEEND temp388_6)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82186
   (ite (bvsgt ARGNAME_hop_length_NAMEEND null)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82187 (bvor var82185 var82186)))
(assert (= temp388_7 #x0000000000000000))
(assert (= var82187 temp388_7))
(assert (= var82356
   (ite (bvsgt null ARGNAME_n_fft_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp388_8 #x0000000000000000))
(assert (= var82356 temp388_8))
(assert (= temp388_9 #x0000000000000001))
(assert (= var82528
   (ite (= ARGNAME_window_NAMEEND_DIM temp388_9)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp388_10 #x0000000000000001))
(assert (= var82528 temp388_10))
(assert (= temp388_11 #x0000000000000000))
(assert (= var65913 temp388_11))
(assert (= temp388_12 #x0000000000000000))
(assert (= temp388_13 temp388_12))
(assert (= temp388_14 (select ARGNAME_window_NAMEEND_DIMSIZE temp388_13)))
(assert (= temp388_15 #x0000000000000001))
(assert (= temp388_16 temp388_15))
(assert (= temp388_17 (select ARGNAME_window_NAMEEND_DIMSIZE temp388_16)))
(assert (= temp388_18 #x0000000000000002))
(assert (= temp388_19 temp388_18))
(assert (= temp388_20 (select ARGNAME_window_NAMEEND_DIMSIZE temp388_19)))
(assert (= temp388_21 #x0000000000000003))
(assert (= temp388_22 temp388_21))
(assert (= temp388_23 (select ARGNAME_window_NAMEEND_DIMSIZE temp388_22)))
(assert (= temp388_24 #x0000000000000004))
(assert (= temp388_25 temp388_24))
(assert (= temp388_26 (select ARGNAME_window_NAMEEND_DIMSIZE temp388_25)))
(assert (= temp388_27 #x0000000000000005))
(assert (= temp388_28 temp388_27))
(assert (= temp388_29 (select ARGNAME_window_NAMEEND_DIMSIZE temp388_28)))
(assert (= temp388_31 #x0000000000000000))
(assert (= temp388_30
   (ite (bvslt var65913 temp388_31)
        (bvadd ARGNAME_window_NAMEEND_DIM var65913)
        var65913)))
(assert (= temp388_32 temp388_30))
(assert (= temp388_33 (select ARGNAME_window_NAMEEND_DIMSIZE temp388_32)))
(assert (= var82530 temp388_33))
(assert (bvslt temp388_30 ARGNAME_window_NAMEEND_DIM))
(assert (= var82531 (ite (= var82530 null) #x0000000000000001 #x0000000000000000)))
(assert (= temp388_34 #x0000000000000001))
(assert (= var82531 temp388_34))
(assert (= var82728
   (ite (= ARGNAME_n_fft_NAMEEND null) #x0000000000000001 #x0000000000000000)))
(assert (= temp388_35 #x0000000000000001))
(assert (= var82728 temp388_35))
(assert (= var1914351 var65913))
(assert (= temp388_36 #x0000000000000001))
(assert (= var2115797 temp388_36))
(assert (= temp388_37 #x0000000000000002))
(assert (= var2115798 temp388_37))
(assert (= temp388_39 #x0000000000000000))
(assert (= temp388_38 temp388_39))
(assert (= temp388_40 #x0000000000000000))
(assert (= var2628020 temp388_40))
(assert (= temp388_41 #x0000000000000001))
(assert (= temp388_42 #x0000000000000002))
(assert (= var82862
   (ite (= ARGNAME_normalized_NAMEEND #x0000000000000001) temp388_41 temp388_42)))
(assert (= temp388_43 #x0000000000000001))
(assert (= ARGNAME_return_complex_NAMEEND temp388_43))
(assert (= var82911 var82862))
(assert (= var3740376 var82911))
(assert (= temp388_44 #x0000000000000000))
(assert (= var3740377 temp388_44))
(assert (= temp388_45 #x0000000000000002))
(assert (= var69143 temp388_45))
(assert (= temp388_47 #x0000000000000001))
(assert (= temp388_46 temp388_47))
(assert (= temp388_49 #x0000000000000001))
(assert (= temp388_48 temp388_49))
(assert (= temp388_51 #x0000000000000003))
(assert (= temp388_50 temp388_51))
(assert (= temp388_52 #x0000000000000001))
(assert (= var4212949 temp388_52))
(assert (= var4212950 var69143))
(assert (= temp388_54 #x0000000000000001))
(assert (= temp388_53 temp388_54))
(assert (= temp388_56 #x0000000000000001))
(assert (= temp388_55 temp388_56))
(assert (= temp388_58 #x0000000000000001))
(assert (= temp388_57 temp388_58))
(assert (= temp388_60 #x0000000000000001))
(assert (= temp388_59 temp388_60))
(assert (= temp388_62 #x0000000000000000))
(assert (= temp388_61 temp388_62))
(assert (= temp388_64 #x0000000000000001))
(assert (= temp388_63 temp388_64))
(assert (= var4868391 var69143))
(assert (= temp388_65 #x0000000000000002))
(assert (= var4983962 temp388_65))
(assert (= temp388_67 #x0000000000000001))
(assert (= temp388_66 temp388_67))
(assert (= temp388_69 #x0000000000000001))
(assert (= temp388_68 temp388_69))
(assert (= var5453295 var65913))
(assert (= temp388_71 #x0000000000000001))
(assert (= temp388_70 temp388_71))
(assert (= temp388_73 #x0000000000000001))
(assert (= temp388_72 temp388_73))
(assert (= temp388_75 #x0000000000000001))
(assert (= temp388_74 temp388_75))
(assert (= temp388_77 #x0000000000000001))
(assert (= temp388_76 temp388_77))
(assert (= temp388_79 #x0000000000000000))
(assert (= temp388_78 temp388_79))
(assert (= temp388_81 #x0000000000000001))
(assert (= temp388_80 temp388_81))
(assert (= var6375719 var69143))
(assert (= temp388_82 #x0000000000000000))
(assert (= var83534
   (ite (= ARGNAME_center_NAMEEND temp388_82)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp388_83 #x0000000000000001))
(assert (= var83534 temp388_83))
(assert (= var83540 var65913))
(assert (= var6506824 var83540))
(assert (= var6818804 var69143))
(assert (= temp388_84 #x0000000000000001))
(assert (= var6818808 temp388_84))
(assert (= var7801844 var69143))
(assert (= temp388_85 #x0000000000000001))
(assert (= var7801848 temp388_85))
(assert (= temp388_86 #x0000000000000000))
(assert (= var7801898 temp388_86))
(assert (= temp388_87 #x0000000000000000))
(assert (= var7801898 temp388_87))
(assert (= temp388_88 #x0000000000000001))
(assert (= var9128231 temp388_88))
(assert (= temp388_89 #x0000000000000000))
(assert (= var9440410 temp388_89))
(model-add temp388_1 () (_ BitVec 64) #x0000000000000002)
(model-add var81157
           ()
           (_ BitVec 64)
           (bvashr ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp388_2 () (_ BitVec 64) #x0000000000000000)
(model-add var1050945 () (_ BitVec 64) #x0000000000000000)
(model-add temp388_3 () (_ BitVec 64) #xffffffffffffffff)
(model-add var67312 () (_ BitVec 64) #xffffffffffffffff)
(model-add temp388_4 () (_ BitVec 64) #x0000000000000002)
(model-add var81838
           ()
           (_ BitVec 64)
           (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp388_5 () (_ BitVec 64) #x0000000000000001)
(model-add var81839
           ()
           (_ BitVec 64)
           (bvadd #x0000000000000001
                  (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002)))
(model-add temp388_6 () (_ BitVec 64) #x0000000000000001)
(model-add var82185
           ()
           (_ BitVec 64)
           (ite (bvsle #x0000000000000001 ARGNAME_hop_length_NAMEEND)
                #x0000000000000000
                #x0000000000000001))
(model-add var82186
           ()
           (_ BitVec 64)
           (ite (bvsle ARGNAME_hop_length_NAMEEND null)
                #x0000000000000000
                #x0000000000000001))
(model-add temp388_7 () (_ BitVec 64) #x0000000000000000)
(model-add var82187 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add null
           ()
           (_ BitVec 64)
           (ite (or k!0 (= ARGNAME_hop_length_NAMEEND #x8000000000000000))
                ARGNAME_hop_length_NAMEEND
                (bvsub ARGNAME_hop_length_NAMEEND #x0000000000000001)))





