(declare-fun temp386_1 () (_ BitVec 64))
(declare-fun var81157 () (_ BitVec 64))
(declare-fun ARGNAME_n_fft_NAMEEND () (_ BitVec 64))
(declare-fun temp386_2 () (_ BitVec 64))
(declare-fun var1050945 () (_ BitVec 64))
(declare-fun temp386_3 () (_ BitVec 64))
(declare-fun var67312 () (_ BitVec 64))
(declare-fun temp386_4 () (_ BitVec 64))
(declare-fun var81838 () (_ BitVec 64))
(declare-fun temp386_5 () (_ BitVec 64))
(declare-fun var81839 () (_ BitVec 64))
(declare-fun temp386_6 () (_ BitVec 64))
(declare-fun var82185 () (_ BitVec 64))
(declare-fun ARGNAME_hop_length_NAMEEND () (_ BitVec 64))
(declare-fun var82186 () (_ BitVec 64))
(declare-fun null () (_ BitVec 64))
(declare-fun temp386_7 () (_ BitVec 64))
(declare-fun var82187 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun var82356 () (_ BitVec 64))
(declare-fun temp386_8 () (_ BitVec 64))
(declare-fun temp386_9 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var82528 () (_ BitVec 64))
(declare-fun temp386_10 () (_ BitVec 64))
(declare-fun temp386_11 () (_ BitVec 64))
(declare-fun var65913 () (_ BitVec 64))
(declare-fun temp386_12 () (_ BitVec 64))
(declare-fun temp386_13 () (_ BitVec 64))
(declare-fun ARGNAME_window_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp386_14 () (_ BitVec 64))
(declare-fun temp386_15 () (_ BitVec 64))
(declare-fun temp386_16 () (_ BitVec 64))
(declare-fun temp386_17 () (_ BitVec 64))
(declare-fun temp386_18 () (_ BitVec 64))
(declare-fun temp386_19 () (_ BitVec 64))
(declare-fun temp386_20 () (_ BitVec 64))
(declare-fun temp386_21 () (_ BitVec 64))
(declare-fun temp386_22 () (_ BitVec 64))
(declare-fun temp386_23 () (_ BitVec 64))
(declare-fun temp386_24 () (_ BitVec 64))
(declare-fun temp386_25 () (_ BitVec 64))
(declare-fun temp386_26 () (_ BitVec 64))
(declare-fun temp386_27 () (_ BitVec 64))
(declare-fun temp386_28 () (_ BitVec 64))
(declare-fun temp386_29 () (_ BitVec 64))
(declare-fun temp386_31 () (_ BitVec 64))
(declare-fun temp386_30 () (_ BitVec 64))
(declare-fun temp386_32 () (_ BitVec 64))
(declare-fun temp386_33 () (_ BitVec 64))
(declare-fun var82530 () (_ BitVec 64))
(declare-fun var82531 () (_ BitVec 64))
(declare-fun temp386_34 () (_ BitVec 64))
(declare-fun var82728 () (_ BitVec 64))
(declare-fun temp386_35 () (_ BitVec 64))
(declare-fun var1914351 () (_ BitVec 64))
(declare-fun temp386_36 () (_ BitVec 64))
(declare-fun var2115797 () (_ BitVec 64))
(declare-fun temp386_37 () (_ BitVec 64))
(declare-fun var2115798 () (_ BitVec 64))
(declare-fun temp386_39 () (_ BitVec 64))
(declare-fun temp386_38 () (_ BitVec 64))
(declare-fun temp386_40 () (_ BitVec 64))
(declare-fun var2628020 () (_ BitVec 64))
(declare-fun temp386_41 () (_ BitVec 64))
(declare-fun temp386_42 () (_ BitVec 64))
(declare-fun ARGNAME_normalized_NAMEEND () (_ BitVec 64))
(declare-fun var82862 () (_ BitVec 64))
(declare-fun temp386_43 () (_ BitVec 64))
(declare-fun ARGNAME_return_complex_NAMEEND () (_ BitVec 64))
(declare-fun var82911 () (_ BitVec 64))
(declare-fun var3740376 () (_ BitVec 64))
(declare-fun temp386_44 () (_ BitVec 64))
(declare-fun var3740377 () (_ BitVec 64))
(declare-fun temp386_45 () (_ BitVec 64))
(declare-fun var69143 () (_ BitVec 64))
(declare-fun temp386_47 () (_ BitVec 64))
(declare-fun temp386_46 () (_ BitVec 64))
(declare-fun temp386_49 () (_ BitVec 64))
(declare-fun temp386_48 () (_ BitVec 64))
(declare-fun temp386_51 () (_ BitVec 64))
(declare-fun temp386_50 () (_ BitVec 64))
(declare-fun temp386_52 () (_ BitVec 64))
(declare-fun var4212949 () (_ BitVec 64))
(declare-fun var4212950 () (_ BitVec 64))
(declare-fun temp386_54 () (_ BitVec 64))
(declare-fun temp386_53 () (_ BitVec 64))
(declare-fun temp386_56 () (_ BitVec 64))
(declare-fun temp386_55 () (_ BitVec 64))
(declare-fun temp386_58 () (_ BitVec 64))
(declare-fun temp386_57 () (_ BitVec 64))
(declare-fun temp386_60 () (_ BitVec 64))
(declare-fun temp386_59 () (_ BitVec 64))
(declare-fun temp386_62 () (_ BitVec 64))
(declare-fun temp386_61 () (_ BitVec 64))
(declare-fun temp386_64 () (_ BitVec 64))
(declare-fun temp386_63 () (_ BitVec 64))
(declare-fun var4868391 () (_ BitVec 64))
(declare-fun temp386_65 () (_ BitVec 64))
(declare-fun var4983962 () (_ BitVec 64))
(declare-fun temp386_67 () (_ BitVec 64))
(declare-fun temp386_66 () (_ BitVec 64))
(declare-fun temp386_69 () (_ BitVec 64))
(declare-fun temp386_68 () (_ BitVec 64))
(declare-fun var5453295 () (_ BitVec 64))
(declare-fun temp386_71 () (_ BitVec 64))
(declare-fun temp386_70 () (_ BitVec 64))
(declare-fun temp386_73 () (_ BitVec 64))
(declare-fun temp386_72 () (_ BitVec 64))
(declare-fun temp386_75 () (_ BitVec 64))
(declare-fun temp386_74 () (_ BitVec 64))
(declare-fun temp386_77 () (_ BitVec 64))
(declare-fun temp386_76 () (_ BitVec 64))
(declare-fun temp386_79 () (_ BitVec 64))
(declare-fun temp386_78 () (_ BitVec 64))
(declare-fun temp386_81 () (_ BitVec 64))
(declare-fun temp386_80 () (_ BitVec 64))
(declare-fun var6375719 () (_ BitVec 64))
(declare-fun temp386_82 () (_ BitVec 64))
(declare-fun ARGNAME_center_NAMEEND () (_ BitVec 64))
(declare-fun var83534 () (_ BitVec 64))
(declare-fun temp386_83 () (_ BitVec 64))
(declare-fun var83540 () (_ BitVec 64))
(declare-fun var6506824 () (_ BitVec 64))
(declare-fun var6818804 () (_ BitVec 64))
(declare-fun temp386_84 () (_ BitVec 64))
(declare-fun var6818808 () (_ BitVec 64))
(declare-fun var7801844 () (_ BitVec 64))
(declare-fun temp386_85 () (_ BitVec 64))
(declare-fun var7801848 () (_ BitVec 64))
(declare-fun temp386_86 () (_ BitVec 64))
(declare-fun var7801898 () (_ BitVec 64))
(declare-fun temp386_87 () (_ BitVec 64))
(declare-fun temp386_88 () (_ BitVec 64))
(declare-fun var9128231 () (_ BitVec 64))
(declare-fun temp386_89 () (_ BitVec 64))
(declare-fun var9440410 () (_ BitVec 64))
(assert (= temp386_1 #x0000000000000002))
(assert (= var81157 (bvashr ARGNAME_n_fft_NAMEEND temp386_1)))
(assert (= temp386_2 #x0000000000000000))
(assert (= var1050945 temp386_2))
(assert (= temp386_3 #xffffffffffffffff))
(assert (= var67312 temp386_3))
(assert (= temp386_4 #x0000000000000002))
(assert (= var81838 (bvsdiv ARGNAME_n_fft_NAMEEND temp386_4)))
(assert (= temp386_5 #x0000000000000001))
(assert (= var81839 (bvadd var81838 temp386_5)))
(assert (= temp386_6 #x0000000000000001))
(assert (= var82185
   (ite (bvslt ARGNAME_hop_length_NAMEEND temp386_6)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82186
   (ite (bvsgt ARGNAME_hop_length_NAMEEND null)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var82187 (bvor var82185 var82186)))
(assert (= temp386_7 #x0000000000000000))
(assert (= var82187 temp386_7))
(assert (= var82356
   (ite (bvsgt null ARGNAME_n_fft_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp386_8 #x0000000000000000))
(assert (= var82356 temp386_8))
(assert (= temp386_9 #x0000000000000001))
(assert (= var82528
   (ite (= ARGNAME_window_NAMEEND_DIM temp386_9)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp386_10 #x0000000000000001))
(assert (= var82528 temp386_10))
(assert (= temp386_11 #x0000000000000000))
(assert (= var65913 temp386_11))
(assert (= temp386_12 #x0000000000000000))
(assert (= temp386_13 temp386_12))
(assert (= temp386_14 (select ARGNAME_window_NAMEEND_DIMSIZE temp386_13)))
(assert (= temp386_15 #x0000000000000001))
(assert (= temp386_16 temp386_15))
(assert (= temp386_17 (select ARGNAME_window_NAMEEND_DIMSIZE temp386_16)))
(assert (= temp386_18 #x0000000000000002))
(assert (= temp386_19 temp386_18))
(assert (= temp386_20 (select ARGNAME_window_NAMEEND_DIMSIZE temp386_19)))
(assert (= temp386_21 #x0000000000000003))
(assert (= temp386_22 temp386_21))
(assert (= temp386_23 (select ARGNAME_window_NAMEEND_DIMSIZE temp386_22)))
(assert (= temp386_24 #x0000000000000004))
(assert (= temp386_25 temp386_24))
(assert (= temp386_26 (select ARGNAME_window_NAMEEND_DIMSIZE temp386_25)))
(assert (= temp386_27 #x0000000000000005))
(assert (= temp386_28 temp386_27))
(assert (= temp386_29 (select ARGNAME_window_NAMEEND_DIMSIZE temp386_28)))
(assert (= temp386_31 #x0000000000000000))
(assert (= temp386_30
   (ite (bvslt var65913 temp386_31)
        (bvadd ARGNAME_window_NAMEEND_DIM var65913)
        var65913)))
(assert (= temp386_32 temp386_30))
(assert (= temp386_33 (select ARGNAME_window_NAMEEND_DIMSIZE temp386_32)))
(assert (= var82530 temp386_33))
(assert (bvslt temp386_30 ARGNAME_window_NAMEEND_DIM))
(assert (= var82531 (ite (= var82530 null) #x0000000000000001 #x0000000000000000)))
(assert (= temp386_34 #x0000000000000001))
(assert (= var82531 temp386_34))
(assert (= var82728
   (ite (= ARGNAME_n_fft_NAMEEND null) #x0000000000000001 #x0000000000000000)))
(assert (= temp386_35 #x0000000000000001))
(assert (= var82728 temp386_35))
(assert (= var1914351 var65913))
(assert (= temp386_36 #x0000000000000001))
(assert (= var2115797 temp386_36))
(assert (= temp386_37 #x0000000000000002))
(assert (= var2115798 temp386_37))
(assert (= temp386_39 #x0000000000000000))
(assert (= temp386_38 temp386_39))
(assert (= temp386_40 #x0000000000000000))
(assert (= var2628020 temp386_40))
(assert (= temp386_41 #x0000000000000001))
(assert (= temp386_42 #x0000000000000002))
(assert (= var82862
   (ite (= ARGNAME_normalized_NAMEEND #x0000000000000001) temp386_41 temp386_42)))
(assert (= temp386_43 #x0000000000000001))
(assert (= ARGNAME_return_complex_NAMEEND temp386_43))
(assert (= var82911 var82862))
(assert (= var3740376 var82911))
(assert (= temp386_44 #x0000000000000000))
(assert (= var3740377 temp386_44))
(assert (= temp386_45 #x0000000000000002))
(assert (= var69143 temp386_45))
(assert (= temp386_47 #x0000000000000001))
(assert (= temp386_46 temp386_47))
(assert (= temp386_49 #x0000000000000001))
(assert (= temp386_48 temp386_49))
(assert (= temp386_51 #x0000000000000003))
(assert (= temp386_50 temp386_51))
(assert (= temp386_52 #x0000000000000001))
(assert (= var4212949 temp386_52))
(assert (= var4212950 var69143))
(assert (= temp386_54 #x0000000000000001))
(assert (= temp386_53 temp386_54))
(assert (= temp386_56 #x0000000000000001))
(assert (= temp386_55 temp386_56))
(assert (= temp386_58 #x0000000000000001))
(assert (= temp386_57 temp386_58))
(assert (= temp386_60 #x0000000000000001))
(assert (= temp386_59 temp386_60))
(assert (= temp386_62 #x0000000000000000))
(assert (= temp386_61 temp386_62))
(assert (= temp386_64 #x0000000000000001))
(assert (= temp386_63 temp386_64))
(assert (= var4868391 var69143))
(assert (= temp386_65 #x0000000000000002))
(assert (= var4983962 temp386_65))
(assert (= temp386_67 #x0000000000000001))
(assert (= temp386_66 temp386_67))
(assert (= temp386_69 #x0000000000000001))
(assert (= temp386_68 temp386_69))
(assert (= var5453295 var65913))
(assert (= temp386_71 #x0000000000000001))
(assert (= temp386_70 temp386_71))
(assert (= temp386_73 #x0000000000000001))
(assert (= temp386_72 temp386_73))
(assert (= temp386_75 #x0000000000000001))
(assert (= temp386_74 temp386_75))
(assert (= temp386_77 #x0000000000000001))
(assert (= temp386_76 temp386_77))
(assert (= temp386_79 #x0000000000000000))
(assert (= temp386_78 temp386_79))
(assert (= temp386_81 #x0000000000000001))
(assert (= temp386_80 temp386_81))
(assert (= var6375719 var69143))
(assert (= temp386_82 #x0000000000000000))
(assert (= var83534
   (ite (= ARGNAME_center_NAMEEND temp386_82)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp386_83 #x0000000000000001))
(assert (= var83534 temp386_83))
(assert (= var83540 var65913))
(assert (= var6506824 var83540))
(assert (= var6818804 var69143))
(assert (= temp386_84 #x0000000000000001))
(assert (= var6818808 temp386_84))
(assert (= var7801844 var69143))
(assert (= temp386_85 #x0000000000000001))
(assert (= var7801848 temp386_85))
(assert (= temp386_86 #x0000000000000000))
(assert (= var7801898 temp386_86))
(assert (= temp386_87 #x0000000000000000))
(assert (= var7801898 temp386_87))
(assert (= temp386_88 #x0000000000000001))
(assert (= var9128231 temp386_88))
(assert (= temp386_89 #x0000000000000000))
(assert (= var9440410 temp386_89))
(model-add temp386_1 () (_ BitVec 64) #x0000000000000002)
(model-add var81157
           ()
           (_ BitVec 64)
           (bvashr ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp386_2 () (_ BitVec 64) #x0000000000000000)
(model-add var1050945 () (_ BitVec 64) #x0000000000000000)
(model-add temp386_3 () (_ BitVec 64) #xffffffffffffffff)
(model-add var67312 () (_ BitVec 64) #xffffffffffffffff)
(model-add temp386_4 () (_ BitVec 64) #x0000000000000002)
(model-add var81838
           ()
           (_ BitVec 64)
           (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002))
(model-add temp386_5 () (_ BitVec 64) #x0000000000000001)
(model-add var81839
           ()
           (_ BitVec 64)
           (bvadd #x0000000000000001
                  (bvsdiv_i ARGNAME_n_fft_NAMEEND #x0000000000000002)))
(model-add temp386_6 () (_ BitVec 64) #x0000000000000001)
(model-add var82185
           ()
           (_ BitVec 64)
           (ite (bvsle #x0000000000000001 ARGNAME_hop_length_NAMEEND)
                #x0000000000000000
                #x0000000000000001))
(model-add var82186
           ()
           (_ BitVec 64)
           (ite (bvsle ARGNAME_hop_length_NAMEEND null)
                #x0000000000000000
                #x0000000000000001))
(model-add temp386_7 () (_ BitVec 64) #x0000000000000000)
(model-add var82187 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add null
           ()
           (_ BitVec 64)
           (ite (or k!0 (= ARGNAME_hop_length_NAMEEND #x8000000000000000))
                ARGNAME_hop_length_NAMEEND
                (bvsub ARGNAME_hop_length_NAMEEND #x0000000000000001)))




