(declare-fun temp58_1 () (_ BitVec 64))
(declare-fun var989741 () (_ BitVec 64))
(declare-fun temp58_2 () (_ BitVec 64))
(declare-fun var989757 () (_ BitVec 64))
(declare-fun temp58_3 () (_ BitVec 64))
(declare-fun var989761 () (_ BitVec 64))
(declare-fun var989766 () (_ BitVec 64))
(declare-fun var989767 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var989768 () (_ BitVec 64))
(declare-fun var989771 () (_ BitVec 64))
(declare-fun var989772 () (_ BitVec 64))
(declare-fun var989773 () (_ BitVec 64))
(declare-fun temp58_4 () (_ BitVec 64))
(declare-fun var989774 () (_ BitVec 64))
(declare-fun temp58_5 () (_ BitVec 64))
(declare-fun var989775 () (_ BitVec 64))
(declare-fun temp58_6 () (_ BitVec 64))
(declare-fun var989776 () (_ BitVec 64))
(declare-fun temp58_7 () (_ BitVec 64))
(declare-fun var989810 () (_ BitVec 64))
(declare-fun temp58_8 () (_ BitVec 64))
(declare-fun temp58_10 () (_ BitVec 64))
(declare-fun temp58_9 () (_ BitVec 64))
(declare-fun temp58_12 () (_ BitVec 64))
(declare-fun temp58_11 () (_ BitVec 64))
(declare-fun temp58_13 () (_ BitVec 64))
(declare-fun var1387902 () (_ BitVec 64))
(declare-fun temp58_14 () (_ BitVec 64))
(declare-fun var1387923 () (_ BitVec 64))
(declare-fun var1521369 () (_ BitVec 64))
(declare-fun var1521373 () (_ BitVec 64))
(declare-fun var1521631 () (_ BitVec 64))
(declare-fun var1521633 () (_ BitVec 64))
(declare-fun temp58_15 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1521660 () (_ BitVec 64))
(declare-fun temp58_16 () (_ BitVec 64))
(declare-fun var1521661 () (_ BitVec 64))
(declare-fun temp58_17 () (_ BitVec 64))
(declare-fun temp58_18 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var1521706 () (_ BitVec 64))
(declare-fun temp58_19 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun var2240288 () (_ BitVec 64))
(declare-fun temp58_20 () (_ BitVec 64))
(declare-fun temp58_21 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp58_22 () (_ BitVec 64))
(declare-fun temp58_23 () (_ BitVec 64))
(declare-fun temp58_24 () (_ BitVec 64))
(declare-fun temp58_25 () (_ BitVec 64))
(declare-fun temp58_26 () (_ BitVec 64))
(declare-fun temp58_27 () (_ BitVec 64))
(declare-fun temp58_28 () (_ BitVec 64))
(declare-fun temp58_29 () (_ BitVec 64))
(declare-fun temp58_30 () (_ BitVec 64))
(declare-fun temp58_31 () (_ BitVec 64))
(declare-fun temp58_32 () (_ BitVec 64))
(declare-fun temp58_33 () (_ BitVec 64))
(declare-fun temp58_34 () (_ BitVec 64))
(declare-fun temp58_35 () (_ BitVec 64))
(declare-fun temp58_36 () (_ BitVec 64))
(declare-fun temp58_37 () (_ BitVec 64))
(declare-fun temp58_38 () (_ BitVec 64))
(declare-fun temp58_39 () (_ BitVec 64))
(declare-fun temp58_40 () (_ BitVec 64))
(declare-fun temp58_41 () (_ BitVec 64))
(declare-fun temp58_42 () (_ BitVec 64))
(declare-fun temp58_43 () (_ BitVec 64))
(declare-fun temp58_44 () (_ BitVec 64))
(declare-fun temp58_45 () (_ BitVec 64))
(declare-fun temp58_46 () (_ BitVec 64))
(declare-fun temp58_47 () (_ BitVec 64))
(declare-fun temp58_48 () (_ BitVec 64))
(declare-fun temp58_49 () (_ BitVec 64))
(declare-fun temp58_50 () (_ BitVec 64))
(declare-fun temp58_51 () (_ BitVec 64))
(declare-fun temp58_52 () (_ BitVec 64))
(declare-fun temp58_53 () (_ BitVec 64))
(declare-fun temp58_54 () (_ BitVec 64))
(declare-fun temp58_55 () (_ BitVec 64))
(declare-fun temp58_56 () (_ BitVec 64))
(declare-fun temp58_57 () (_ BitVec 64))
(declare-fun temp58_58 () (_ BitVec 64))
(declare-fun temp58_59 () (_ BitVec 64))
(declare-fun temp58_60 () (_ BitVec 64))
(declare-fun temp58_61 () (_ BitVec 64))
(declare-fun var2240290 () (_ BitVec 64))
(declare-fun temp58_62 () (_ BitVec 64))
(declare-fun temp58_63 () (_ BitVec 64))
(declare-fun temp58_64 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp58_65 () (_ BitVec 64))
(declare-fun temp58_66 () (_ BitVec 64))
(declare-fun temp58_67 () (_ BitVec 64))
(declare-fun temp58_68 () (_ BitVec 64))
(declare-fun temp58_69 () (_ BitVec 64))
(declare-fun temp58_70 () (_ BitVec 64))
(declare-fun temp58_71 () (_ BitVec 64))
(declare-fun temp58_72 () (_ BitVec 64))
(declare-fun temp58_73 () (_ BitVec 64))
(declare-fun temp58_74 () (_ BitVec 64))
(declare-fun temp58_75 () (_ BitVec 64))
(declare-fun temp58_76 () (_ BitVec 64))
(declare-fun temp58_77 () (_ BitVec 64))
(declare-fun temp58_78 () (_ BitVec 64))
(declare-fun temp58_79 () (_ BitVec 64))
(declare-fun temp58_80 () (_ BitVec 64))
(declare-fun temp58_81 () (_ BitVec 64))
(declare-fun temp58_82 () (_ BitVec 64))
(declare-fun temp58_83 () (_ BitVec 64))
(declare-fun temp58_84 () (_ BitVec 64))
(declare-fun temp58_85 () (_ BitVec 64))
(declare-fun temp58_86 () (_ BitVec 64))
(declare-fun temp58_87 () (_ BitVec 64))
(declare-fun temp58_88 () (_ BitVec 64))
(declare-fun temp58_89 () (_ BitVec 64))
(declare-fun temp58_90 () (_ BitVec 64))
(declare-fun temp58_91 () (_ BitVec 64))
(declare-fun temp58_92 () (_ BitVec 64))
(declare-fun temp58_93 () (_ BitVec 64))
(declare-fun temp58_94 () (_ BitVec 64))
(declare-fun temp58_95 () (_ BitVec 64))
(declare-fun temp58_96 () (_ BitVec 64))
(declare-fun temp58_97 () (_ BitVec 64))
(declare-fun temp58_98 () (_ BitVec 64))
(declare-fun temp58_99 () (_ BitVec 64))
(declare-fun temp58_100 () (_ BitVec 64))
(declare-fun temp58_101 () (_ BitVec 64))
(declare-fun temp58_102 () (_ BitVec 64))
(declare-fun temp58_103 () (_ BitVec 64))
(declare-fun temp58_104 () (_ BitVec 64))
(declare-fun var2240311 () (_ BitVec 64))
(declare-fun temp58_105 () (_ BitVec 64))
(declare-fun temp58_106 () (_ BitVec 64))
(declare-fun var2228402 () (_ BitVec 64))
(declare-fun temp58_107 () (_ BitVec 64))
(declare-fun temp58_108 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp58_109 () (_ BitVec 64))
(declare-fun temp58_110 () (_ BitVec 64))
(declare-fun temp58_111 () (_ BitVec 64))
(declare-fun temp58_112 () (_ BitVec 64))
(declare-fun temp58_113 () (_ BitVec 64))
(declare-fun temp58_114 () (_ BitVec 64))
(declare-fun temp58_115 () (_ BitVec 64))
(declare-fun temp58_116 () (_ BitVec 64))
(declare-fun temp58_117 () (_ BitVec 64))
(declare-fun temp58_118 () (_ BitVec 64))
(declare-fun temp58_119 () (_ BitVec 64))
(declare-fun temp58_120 () (_ BitVec 64))
(declare-fun temp58_121 () (_ BitVec 64))
(declare-fun temp58_122 () (_ BitVec 64))
(declare-fun temp58_123 () (_ BitVec 64))
(declare-fun temp58_124 () (_ BitVec 64))
(declare-fun temp58_126 () (_ BitVec 64))
(declare-fun temp58_127 () (_ BitVec 64))
(declare-fun temp58_125 () (_ BitVec 64))
(declare-fun var2240356 () (_ BitVec 64))
(declare-fun temp58_128 () (_ BitVec 64))
(declare-fun temp58_129 () (_ BitVec 64))
(declare-fun temp58_131 () (_ BitVec 64))
(declare-fun temp58_132 () (_ BitVec 64))
(declare-fun temp58_130 () (_ BitVec 64))
(declare-fun var2240378 () (_ BitVec 64))
(declare-fun temp58_133 () (_ BitVec 64))
(declare-fun var2240379 () (_ BitVec 64))
(declare-fun temp58_134 () (_ BitVec 64))
(declare-fun var2240398 () (_ BitVec 64))
(declare-fun temp58_135 () (_ BitVec 64))
(declare-fun var2240399 () (_ BitVec 64))
(declare-fun temp58_136 () (_ BitVec 64))
(declare-fun temp58_137 () (_ BitVec 64))
(declare-fun var2229290 () (_ BitVec 64))
(declare-fun temp58_139 () (_ BitVec 64))
(declare-fun temp58_140 () (_ BitVec 64))
(declare-fun temp58_138 () (_ BitVec 64))
(declare-fun var2240411 () (_ BitVec 64))
(declare-fun temp58_141 () (_ BitVec 64))
(declare-fun temp58_143 () (_ BitVec 64))
(declare-fun temp58_144 () (_ BitVec 64))
(declare-fun temp58_142 () (_ BitVec 64))
(declare-fun temp58_145 () (_ BitVec 64))
(declare-fun var2503529 () (_ BitVec 64))
(declare-fun temp58_146 () (_ BitVec 64))
(declare-fun var2240569 () (_ BitVec 64))
(declare-fun temp58_147 () (_ BitVec 64))
(declare-fun var1521778 () (_ BitVec 64))
(declare-fun temp58_148 () (_ BitVec 64))
(declare-fun temp58_149 () (_ BitVec 64))
(declare-fun var1521908 () (_ BitVec 64))
(declare-fun var4010473 () (_ BitVec 64))
(declare-fun temp58_150 () (_ BitVec 64))
(declare-fun var4210495 () (_ BitVec 64))
(declare-fun var4210497 () (_ BitVec 64))
(declare-fun var4210454 () (_ BitVec 64))
(declare-fun var1521921 () (_ BitVec 64))
(declare-fun temp58_151 () (_ BitVec 64))
(declare-fun var4339331 () (_ BitVec 64))
(declare-fun var4339333 () (_ BitVec 64))
(declare-fun var4404876 () (_ BitVec 64))
(declare-fun var4404877 () (_ BitVec 64))
(declare-fun var4993424 () (_ BitVec 64))
(declare-fun var1522214 () (_ BitVec 64))
(declare-fun temp58_152 () (_ BitVec 64))
(declare-fun var1522215 () (_ BitVec 64))
(declare-fun temp58_153 () (_ BitVec 64))
(assert (= temp58_1 #x0000000000000002))
(assert (= var989741 temp58_1))
(assert (= temp58_2 #x0000000000000001))
(assert (= var989757 (bvadd var989741 temp58_2)))
(assert (= temp58_3 #x0000000000000002))
(assert (= var989761 (bvadd var989741 temp58_3)))
(assert (= var989766 var989761))
(assert (= var989767
   (ite (= ARGNAME_input_NAMEEND_DIM var989766)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var989768 var989767))
(assert (= var989771 var989757))
(assert (= var989772
   (ite (distinct ARGNAME_input_NAMEEND_DIM var989771)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var989773 var989768))
(assert (= temp58_4 #x0000000000000001))
(assert (= var989774 (bvand var989773 temp58_4)))
(assert (= temp58_5 #x0000000000000000))
(assert (= var989775 (ite (= var989774 temp58_5) #x0000000000000001 #x0000000000000000)))
(assert (= var989776 (bvand var989772 var989775)))
(assert (= temp58_6 #x0000000000000000))
(assert (= var989776 temp58_6))
(assert (= temp58_7 #x0000000000000000))
(assert (= var989810 (ite (= var989773 temp58_7) #x0000000000000001 #x0000000000000000)))
(assert (= temp58_8 #x0000000000000001))
(assert (= var989810 temp58_8))
(assert (= temp58_10 #x0000000000000000))
(assert (= temp58_9 temp58_10))
(assert (= temp58_12 #x0000000000000002))
(assert (= temp58_11 temp58_12))
(assert (= temp58_13 #x0000000000000000))
(assert (= var1387902 temp58_13))
(assert (= temp58_14 #x0000000000000001))
(assert (= var1387923 temp58_14))
(assert (= var1521369 var1387902))
(assert (= var1521373 var1387923))
(assert (= var1521631 var1521369))
(assert (= var1521633 var1521373))
(assert (= temp58_15 #xfffffffffffffffe))
(assert (= var1521660 (bvadd ARGNAME_weight_NAMEEND_DIM temp58_15)))
(assert (= temp58_16 #x0000000000000003))
(assert (= var1521661
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp58_16)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_17 #x0000000000000000))
(assert (= var1521661 temp58_17))
(assert (= temp58_18 #x0000000000000001))
(assert (= var1521706
   (ite (bvslt ARGNAME_groups_NAMEEND temp58_18)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_19 #x0000000000000000))
(assert (= var1521706 temp58_19))
(assert (= ARGNAME_stride_NAMEEND_LEN var1521660))
(assert (= ARGNAME_padding_NAMEEND_LEN var1521660))
(assert (= ARGNAME_dilation_NAMEEND_LEN var1521660))
(assert (= var2240288 var1521631))
(assert (= temp58_20 #x0000000000000000))
(assert (= temp58_21 temp58_20))
(assert (= temp58_22 (select ARGNAME_padding_NAMEEND_VAL temp58_21)))
(assert (= temp58_23 #x0000000000000001))
(assert (= temp58_24 temp58_23))
(assert (= temp58_25 (select ARGNAME_padding_NAMEEND_VAL temp58_24)))
(assert (= temp58_26 #x0000000000000002))
(assert (= temp58_27 temp58_26))
(assert (= temp58_28 (select ARGNAME_padding_NAMEEND_VAL temp58_27)))
(assert (= temp58_29 #x0000000000000003))
(assert (= temp58_30 temp58_29))
(assert (= temp58_31 (select ARGNAME_padding_NAMEEND_VAL temp58_30)))
(assert (= temp58_32 #x0000000000000004))
(assert (= temp58_33 temp58_32))
(assert (= temp58_34 (select ARGNAME_padding_NAMEEND_VAL temp58_33)))
(assert (= temp58_35 #x0000000000000005))
(assert (= temp58_36 temp58_35))
(assert (= temp58_37 (select ARGNAME_padding_NAMEEND_VAL temp58_36)))
(assert (= temp58_38 #x0000000000000000))
(assert (= temp58_39 #x0000000000000000))
(assert (= temp58_40 temp58_39))
(assert (= temp58_41 (select ARGNAME_padding_NAMEEND_VAL temp58_40)))
(assert (= temp58_42 #x0000000000000000))
(assert (= temp58_43 #x0000000000000001))
(assert (= temp58_44 temp58_43))
(assert (= temp58_45 (select ARGNAME_padding_NAMEEND_VAL temp58_44)))
(assert (= temp58_46 #x0000000000000000))
(assert (= temp58_47 #x0000000000000002))
(assert (= temp58_48 temp58_47))
(assert (= temp58_49 (select ARGNAME_padding_NAMEEND_VAL temp58_48)))
(assert (= temp58_50 #x0000000000000000))
(assert (= temp58_51 #x0000000000000003))
(assert (= temp58_52 temp58_51))
(assert (= temp58_53 (select ARGNAME_padding_NAMEEND_VAL temp58_52)))
(assert (= temp58_54 #x0000000000000000))
(assert (= temp58_55 #x0000000000000004))
(assert (= temp58_56 temp58_55))
(assert (= temp58_57 (select ARGNAME_padding_NAMEEND_VAL temp58_56)))
(assert (= temp58_58 #x0000000000000000))
(assert (= temp58_59 #x0000000000000005))
(assert (= temp58_60 temp58_59))
(assert (= temp58_61 (select ARGNAME_padding_NAMEEND_VAL temp58_60)))
(assert (= var2240290
   (ite (and true
             (bvslt temp58_41 temp58_38)
             (bvslt temp58_45 temp58_42)
             (bvslt temp58_49 temp58_46)
             (bvslt temp58_53 temp58_50)
             (bvslt temp58_57 temp58_54)
             (bvslt temp58_61 temp58_58))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_62 #x0000000000000000))
(assert (= var2240290 temp58_62))
(assert (= temp58_63 #x0000000000000000))
(assert (= temp58_64 temp58_63))
(assert (= temp58_65 (select ARGNAME_stride_NAMEEND_VAL temp58_64)))
(assert (= temp58_66 #x0000000000000001))
(assert (= temp58_67 temp58_66))
(assert (= temp58_68 (select ARGNAME_stride_NAMEEND_VAL temp58_67)))
(assert (= temp58_69 #x0000000000000002))
(assert (= temp58_70 temp58_69))
(assert (= temp58_71 (select ARGNAME_stride_NAMEEND_VAL temp58_70)))
(assert (= temp58_72 #x0000000000000003))
(assert (= temp58_73 temp58_72))
(assert (= temp58_74 (select ARGNAME_stride_NAMEEND_VAL temp58_73)))
(assert (= temp58_75 #x0000000000000004))
(assert (= temp58_76 temp58_75))
(assert (= temp58_77 (select ARGNAME_stride_NAMEEND_VAL temp58_76)))
(assert (= temp58_78 #x0000000000000005))
(assert (= temp58_79 temp58_78))
(assert (= temp58_80 (select ARGNAME_stride_NAMEEND_VAL temp58_79)))
(assert (= temp58_81 #x0000000000000000))
(assert (= temp58_82 #x0000000000000000))
(assert (= temp58_83 temp58_82))
(assert (= temp58_84 (select ARGNAME_stride_NAMEEND_VAL temp58_83)))
(assert (= temp58_85 #x0000000000000000))
(assert (= temp58_86 #x0000000000000001))
(assert (= temp58_87 temp58_86))
(assert (= temp58_88 (select ARGNAME_stride_NAMEEND_VAL temp58_87)))
(assert (= temp58_89 #x0000000000000000))
(assert (= temp58_90 #x0000000000000002))
(assert (= temp58_91 temp58_90))
(assert (= temp58_92 (select ARGNAME_stride_NAMEEND_VAL temp58_91)))
(assert (= temp58_93 #x0000000000000000))
(assert (= temp58_94 #x0000000000000003))
(assert (= temp58_95 temp58_94))
(assert (= temp58_96 (select ARGNAME_stride_NAMEEND_VAL temp58_95)))
(assert (= temp58_97 #x0000000000000000))
(assert (= temp58_98 #x0000000000000004))
(assert (= temp58_99 temp58_98))
(assert (= temp58_100 (select ARGNAME_stride_NAMEEND_VAL temp58_99)))
(assert (= temp58_101 #x0000000000000000))
(assert (= temp58_102 #x0000000000000005))
(assert (= temp58_103 temp58_102))
(assert (= temp58_104 (select ARGNAME_stride_NAMEEND_VAL temp58_103)))
(assert (= var2240311
   (ite (and true
             (bvsle temp58_84 temp58_81)
             (bvsle temp58_88 temp58_85)
             (bvsle temp58_92 temp58_89)
             (bvsle temp58_96 temp58_93)
             (bvsle temp58_100 temp58_97)
             (bvsle temp58_104 temp58_101))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_105 #x0000000000000000))
(assert (= var2240311 temp58_105))
(assert (= temp58_106 #x0000000000000000))
(assert (= var2228402 temp58_106))
(assert (= temp58_107 #x0000000000000000))
(assert (= temp58_108 temp58_107))
(assert (= temp58_109 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_108)))
(assert (= temp58_110 #x0000000000000001))
(assert (= temp58_111 temp58_110))
(assert (= temp58_112 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_111)))
(assert (= temp58_113 #x0000000000000002))
(assert (= temp58_114 temp58_113))
(assert (= temp58_115 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_114)))
(assert (= temp58_116 #x0000000000000003))
(assert (= temp58_117 temp58_116))
(assert (= temp58_118 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_117)))
(assert (= temp58_119 #x0000000000000004))
(assert (= temp58_120 temp58_119))
(assert (= temp58_121 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_120)))
(assert (= temp58_122 #x0000000000000005))
(assert (= temp58_123 temp58_122))
(assert (= temp58_124 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_123)))
(assert (= temp58_126 var2228402))
(assert (= temp58_127 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_126)))
(assert (= temp58_125 temp58_127))
(assert (= var2240356
   (ite (bvslt temp58_125 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_128 #x0000000000000000))
(assert (= var2240356 temp58_128))
(assert (= temp58_129 #x0000000000000000))
(assert (= var2228402 temp58_129))
(assert (= temp58_131 var2228402))
(assert (= temp58_132 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_131)))
(assert (= temp58_130 temp58_132))
(assert (= var2240378 (bvsmod temp58_130 ARGNAME_groups_NAMEEND)))
(assert (= temp58_133 #x0000000000000000))
(assert (= var2240379
   (ite (= var2240378 temp58_133) #x0000000000000001 #x0000000000000000)))
(assert (= temp58_134 #x0000000000000001))
(assert (= var2240379 temp58_134))
(assert (= var2240398 var2240288))
(assert (= temp58_135 #x0000000000000000))
(assert (= var2240399
   (ite (= var2240398 temp58_135) #x0000000000000001 #x0000000000000000)))
(assert (= temp58_136 #x0000000000000001))
(assert (= var2240399 temp58_136))
(assert (= temp58_137 #x0000000000000001))
(assert (= var2229290 temp58_137))
(assert (= temp58_139 var2229290))
(assert (= temp58_140 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_139)))
(assert (= temp58_138 temp58_140))
(assert (= var2240411 (bvmul ARGNAME_groups_NAMEEND temp58_138)))
(assert (= temp58_141 #x0000000000000000))
(assert (= var2228402 temp58_141))
(assert (= temp58_143 var2228402))
(assert (= temp58_144 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_143)))
(assert (= temp58_142 temp58_144))
(assert (= temp58_145 #x0000000000000002))
(assert (= var2503529 temp58_145))
(assert (= temp58_146 #x0000000000000001))
(assert (= var2240569 temp58_146))
(assert (= temp58_147 #x0000000000000003))
(assert (= var1521778
   (ite (= ARGNAME_weight_NAMEEND_DIM temp58_147)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_148 #x0000000000000001))
(assert (= var1521778 temp58_148))
(assert (= temp58_149 #x0000000000000001))
(assert (= var1521908 temp58_149))
(assert (= var4010473 var1521908))
(assert (= temp58_150 #x0000000000000000))
(assert (= var4210495 temp58_150))
(assert (= var4210497 var4210495))
(assert (= var4210454 var4210497))
(assert (= var1521921 var4210454))
(assert (= temp58_151 #x0000000000000002))
(assert (= var4339331 temp58_151))
(assert (= var4339333 (bvsub ARGNAME_weight_NAMEEND_DIM var4339331)))
(assert (= var4404876 var4339331))
(assert (= var4404877 var4339333))
(assert (= var4993424 var1521921))
(assert (= var1522214 var1521633))
(assert (= temp58_152 #x0000000000000000))
(assert (= var1522215
   (ite (distinct var1522214 temp58_152) #x0000000000000001 #x0000000000000000)))
(assert (= temp58_153 #x0000000000000001))
(assert (= var1521778 temp58_153))
(model-add temp58_1 () (_ BitVec 64) #x0000000000000002)
(model-add var989741 () (_ BitVec 64) #x0000000000000002)
(model-add temp58_2 () (_ BitVec 64) #x0000000000000001)
(model-add var989757 () (_ BitVec 64) #x0000000000000003)
(model-add temp58_3 () (_ BitVec 64) #x0000000000000002)
(model-add var989761 () (_ BitVec 64) #x0000000000000004)
(model-add var989766 () (_ BitVec 64) #x0000000000000004)
(model-add var989767
           ()
           (_ BitVec 64)
           (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000004)
                #x0000000000000001
                #x0000000000000000))
(model-add var989768
           ()
           (_ BitVec 64)
           (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000004)
                #x0000000000000001
                #x0000000000000000))
(model-add var989771 () (_ BitVec 64) #x0000000000000003)
(model-add var989772
           ()
           (_ BitVec 64)
           (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000003)
                #x0000000000000000
                #x0000000000000001))
(model-add var989773
           ()
           (_ BitVec 64)
           (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000004)
                #x0000000000000001
                #x0000000000000000))
(model-add temp58_4 () (_ BitVec 64) #x0000000000000001)
(model-add var989774
           ()
           (_ BitVec 64)
           (concat #b000000000000000000000000000000000000000000000000000000000000000
                   (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000004)
                        #b1
                        #b0)))
(model-add temp58_5 () (_ BitVec 64) #x0000000000000000)
(model-add var989775
           ()
           (_ BitVec 64)
           (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000004)
                #x0000000000000000
                #x0000000000000001))
(model-add temp58_6 () (_ BitVec 64) #x0000000000000000)
(model-add var989776 () (_ BitVec 64) #x0000000000000000)






