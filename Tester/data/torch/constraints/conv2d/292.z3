(declare-fun temp388_1 () (_ BitVec 64))
(declare-fun var989741 () (_ BitVec 64))
(declare-fun temp388_2 () (_ BitVec 64))
(declare-fun var989757 () (_ BitVec 64))
(declare-fun temp388_3 () (_ BitVec 64))
(declare-fun var989761 () (_ BitVec 64))
(declare-fun var989766 () (_ BitVec 64))
(declare-fun var989767 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var989768 () (_ BitVec 64))
(declare-fun var989771 () (_ BitVec 64))
(declare-fun var989772 () (_ BitVec 64))
(declare-fun var989773 () (_ BitVec 64))
(declare-fun temp388_4 () (_ BitVec 64))
(declare-fun var989774 () (_ BitVec 64))
(declare-fun temp388_5 () (_ BitVec 64))
(declare-fun var989775 () (_ BitVec 64))
(declare-fun temp388_6 () (_ BitVec 64))
(declare-fun var989776 () (_ BitVec 64))
(declare-fun temp388_7 () (_ BitVec 64))
(declare-fun var989810 () (_ BitVec 64))
(declare-fun temp388_8 () (_ BitVec 64))
(declare-fun temp388_10 () (_ BitVec 64))
(declare-fun temp388_9 () (_ BitVec 64))
(declare-fun temp388_12 () (_ BitVec 64))
(declare-fun temp388_11 () (_ BitVec 64))
(declare-fun temp388_13 () (_ BitVec 64))
(declare-fun var1387902 () (_ BitVec 64))
(declare-fun temp388_14 () (_ BitVec 64))
(declare-fun var1387923 () (_ BitVec 64))
(declare-fun var1521369 () (_ BitVec 64))
(declare-fun var1521373 () (_ BitVec 64))
(declare-fun var1521631 () (_ BitVec 64))
(declare-fun var1521633 () (_ BitVec 64))
(declare-fun temp388_15 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1521660 () (_ BitVec 64))
(declare-fun temp388_16 () (_ BitVec 64))
(declare-fun var1521661 () (_ BitVec 64))
(declare-fun temp388_17 () (_ BitVec 64))
(declare-fun temp388_18 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var1521706 () (_ BitVec 64))
(declare-fun temp388_19 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun var2240288 () (_ BitVec 64))
(declare-fun temp388_20 () (_ BitVec 64))
(declare-fun temp388_21 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp388_22 () (_ BitVec 64))
(declare-fun temp388_23 () (_ BitVec 64))
(declare-fun temp388_24 () (_ BitVec 64))
(declare-fun temp388_25 () (_ BitVec 64))
(declare-fun temp388_26 () (_ BitVec 64))
(declare-fun temp388_27 () (_ BitVec 64))
(declare-fun temp388_28 () (_ BitVec 64))
(declare-fun temp388_29 () (_ BitVec 64))
(declare-fun temp388_30 () (_ BitVec 64))
(declare-fun temp388_31 () (_ BitVec 64))
(declare-fun temp388_32 () (_ BitVec 64))
(declare-fun temp388_33 () (_ BitVec 64))
(declare-fun temp388_34 () (_ BitVec 64))
(declare-fun temp388_35 () (_ BitVec 64))
(declare-fun temp388_36 () (_ BitVec 64))
(declare-fun temp388_37 () (_ BitVec 64))
(declare-fun temp388_38 () (_ BitVec 64))
(declare-fun temp388_39 () (_ BitVec 64))
(declare-fun temp388_40 () (_ BitVec 64))
(declare-fun temp388_41 () (_ BitVec 64))
(declare-fun temp388_42 () (_ BitVec 64))
(declare-fun temp388_43 () (_ BitVec 64))
(declare-fun temp388_44 () (_ BitVec 64))
(declare-fun temp388_45 () (_ BitVec 64))
(declare-fun temp388_46 () (_ BitVec 64))
(declare-fun temp388_47 () (_ BitVec 64))
(declare-fun temp388_48 () (_ BitVec 64))
(declare-fun temp388_49 () (_ BitVec 64))
(declare-fun temp388_50 () (_ BitVec 64))
(declare-fun temp388_51 () (_ BitVec 64))
(declare-fun temp388_52 () (_ BitVec 64))
(declare-fun temp388_53 () (_ BitVec 64))
(declare-fun temp388_54 () (_ BitVec 64))
(declare-fun temp388_55 () (_ BitVec 64))
(declare-fun temp388_56 () (_ BitVec 64))
(declare-fun temp388_57 () (_ BitVec 64))
(declare-fun temp388_58 () (_ BitVec 64))
(declare-fun temp388_59 () (_ BitVec 64))
(declare-fun temp388_60 () (_ BitVec 64))
(declare-fun temp388_61 () (_ BitVec 64))
(declare-fun var2240290 () (_ BitVec 64))
(declare-fun temp388_62 () (_ BitVec 64))
(declare-fun temp388_63 () (_ BitVec 64))
(declare-fun temp388_64 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp388_65 () (_ BitVec 64))
(declare-fun temp388_66 () (_ BitVec 64))
(declare-fun temp388_67 () (_ BitVec 64))
(declare-fun temp388_68 () (_ BitVec 64))
(declare-fun temp388_69 () (_ BitVec 64))
(declare-fun temp388_70 () (_ BitVec 64))
(declare-fun temp388_71 () (_ BitVec 64))
(declare-fun temp388_72 () (_ BitVec 64))
(declare-fun temp388_73 () (_ BitVec 64))
(declare-fun temp388_74 () (_ BitVec 64))
(declare-fun temp388_75 () (_ BitVec 64))
(declare-fun temp388_76 () (_ BitVec 64))
(declare-fun temp388_77 () (_ BitVec 64))
(declare-fun temp388_78 () (_ BitVec 64))
(declare-fun temp388_79 () (_ BitVec 64))
(declare-fun temp388_80 () (_ BitVec 64))
(declare-fun temp388_81 () (_ BitVec 64))
(declare-fun temp388_82 () (_ BitVec 64))
(declare-fun temp388_83 () (_ BitVec 64))
(declare-fun temp388_84 () (_ BitVec 64))
(declare-fun temp388_85 () (_ BitVec 64))
(declare-fun temp388_86 () (_ BitVec 64))
(declare-fun temp388_87 () (_ BitVec 64))
(declare-fun temp388_88 () (_ BitVec 64))
(declare-fun temp388_89 () (_ BitVec 64))
(declare-fun temp388_90 () (_ BitVec 64))
(declare-fun temp388_91 () (_ BitVec 64))
(declare-fun temp388_92 () (_ BitVec 64))
(declare-fun temp388_93 () (_ BitVec 64))
(declare-fun temp388_94 () (_ BitVec 64))
(declare-fun temp388_95 () (_ BitVec 64))
(declare-fun temp388_96 () (_ BitVec 64))
(declare-fun temp388_97 () (_ BitVec 64))
(declare-fun temp388_98 () (_ BitVec 64))
(declare-fun temp388_99 () (_ BitVec 64))
(declare-fun temp388_100 () (_ BitVec 64))
(declare-fun temp388_101 () (_ BitVec 64))
(declare-fun temp388_102 () (_ BitVec 64))
(declare-fun temp388_103 () (_ BitVec 64))
(declare-fun temp388_104 () (_ BitVec 64))
(declare-fun var2240311 () (_ BitVec 64))
(declare-fun temp388_105 () (_ BitVec 64))
(declare-fun temp388_106 () (_ BitVec 64))
(declare-fun var2228402 () (_ BitVec 64))
(declare-fun temp388_107 () (_ BitVec 64))
(declare-fun temp388_108 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp388_109 () (_ BitVec 64))
(declare-fun temp388_110 () (_ BitVec 64))
(declare-fun temp388_111 () (_ BitVec 64))
(declare-fun temp388_112 () (_ BitVec 64))
(declare-fun temp388_113 () (_ BitVec 64))
(declare-fun temp388_114 () (_ BitVec 64))
(declare-fun temp388_115 () (_ BitVec 64))
(declare-fun temp388_116 () (_ BitVec 64))
(declare-fun temp388_117 () (_ BitVec 64))
(declare-fun temp388_118 () (_ BitVec 64))
(declare-fun temp388_119 () (_ BitVec 64))
(declare-fun temp388_120 () (_ BitVec 64))
(declare-fun temp388_121 () (_ BitVec 64))
(declare-fun temp388_122 () (_ BitVec 64))
(declare-fun temp388_123 () (_ BitVec 64))
(declare-fun temp388_124 () (_ BitVec 64))
(declare-fun temp388_126 () (_ BitVec 64))
(declare-fun temp388_127 () (_ BitVec 64))
(declare-fun temp388_125 () (_ BitVec 64))
(declare-fun var2240356 () (_ BitVec 64))
(declare-fun temp388_128 () (_ BitVec 64))
(declare-fun temp388_129 () (_ BitVec 64))
(declare-fun temp388_131 () (_ BitVec 64))
(declare-fun temp388_132 () (_ BitVec 64))
(declare-fun temp388_130 () (_ BitVec 64))
(declare-fun var2240378 () (_ BitVec 64))
(declare-fun temp388_133 () (_ BitVec 64))
(declare-fun var2240379 () (_ BitVec 64))
(declare-fun temp388_134 () (_ BitVec 64))
(declare-fun var2240398 () (_ BitVec 64))
(declare-fun temp388_135 () (_ BitVec 64))
(declare-fun var2240399 () (_ BitVec 64))
(declare-fun temp388_136 () (_ BitVec 64))
(declare-fun temp388_137 () (_ BitVec 64))
(declare-fun var2229290 () (_ BitVec 64))
(declare-fun temp388_139 () (_ BitVec 64))
(declare-fun temp388_140 () (_ BitVec 64))
(declare-fun temp388_138 () (_ BitVec 64))
(declare-fun var2240411 () (_ BitVec 64))
(declare-fun temp388_141 () (_ BitVec 64))
(declare-fun temp388_143 () (_ BitVec 64))
(declare-fun temp388_144 () (_ BitVec 64))
(declare-fun temp388_142 () (_ BitVec 64))
(declare-fun temp388_145 () (_ BitVec 64))
(declare-fun var2503529 () (_ BitVec 64))
(declare-fun temp388_146 () (_ BitVec 64))
(declare-fun var2240569 () (_ BitVec 64))
(declare-fun temp388_147 () (_ BitVec 64))
(declare-fun var1521778 () (_ BitVec 64))
(declare-fun temp388_148 () (_ BitVec 64))
(declare-fun temp388_149 () (_ BitVec 64))
(declare-fun var1521908 () (_ BitVec 64))
(declare-fun var4010473 () (_ BitVec 64))
(declare-fun temp388_150 () (_ BitVec 64))
(declare-fun var4210495 () (_ BitVec 64))
(declare-fun var4210497 () (_ BitVec 64))
(declare-fun var4210454 () (_ BitVec 64))
(declare-fun var1521921 () (_ BitVec 64))
(declare-fun temp388_151 () (_ BitVec 64))
(declare-fun var4339331 () (_ BitVec 64))
(declare-fun var4339333 () (_ BitVec 64))
(declare-fun var4404876 () (_ BitVec 64))
(declare-fun var4404877 () (_ BitVec 64))
(declare-fun var5124496 () (_ BitVec 64))
(declare-fun var5386640 () (_ BitVec 64))
(declare-fun temp388_152 () (_ BitVec 64))
(declare-fun var5714320 () (_ BitVec 64))
(declare-fun temp388_153 () (_ BitVec 64))
(assert (= temp388_1 #x0000000000000002))
(assert (= var989741 temp388_1))
(assert (= temp388_2 #x0000000000000001))
(assert (= var989757 (bvadd var989741 temp388_2)))
(assert (= temp388_3 #x0000000000000002))
(assert (= var989761 (bvadd var989741 temp388_3)))
(assert (= var989766 var989761))
(assert (= var989767
   (ite (= ARGNAME_input_NAMEEND_DIM var989766)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var989768 var989767))
(assert (= var989771 var989757))
(assert (= var989772
   (ite (distinct ARGNAME_input_NAMEEND_DIM var989771)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var989773 var989768))
(assert (= temp388_4 #x0000000000000001))
(assert (= var989774 (bvand var989773 temp388_4)))
(assert (= temp388_5 #x0000000000000000))
(assert (= var989775
   (ite (= var989774 temp388_5) #x0000000000000001 #x0000000000000000)))
(assert (= var989776 (bvand var989772 var989775)))
(assert (= temp388_6 #x0000000000000000))
(assert (= var989776 temp388_6))
(assert (= temp388_7 #x0000000000000000))
(assert (= var989810
   (ite (= var989773 temp388_7) #x0000000000000001 #x0000000000000000)))
(assert (= temp388_8 #x0000000000000001))
(assert (= var989810 temp388_8))
(assert (= temp388_10 #x0000000000000000))
(assert (= temp388_9 temp388_10))
(assert (= temp388_12 #x0000000000000002))
(assert (= temp388_11 temp388_12))
(assert (= temp388_13 #x0000000000000000))
(assert (= var1387902 temp388_13))
(assert (= temp388_14 #x0000000000000001))
(assert (= var1387923 temp388_14))
(assert (= var1521369 var1387902))
(assert (= var1521373 var1387923))
(assert (= var1521631 var1521369))
(assert (= var1521633 var1521373))
(assert (= temp388_15 #xfffffffffffffffe))
(assert (= var1521660 (bvadd ARGNAME_weight_NAMEEND_DIM temp388_15)))
(assert (= temp388_16 #x0000000000000003))
(assert (= var1521661
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp388_16)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp388_17 #x0000000000000000))
(assert (= var1521661 temp388_17))
(assert (= temp388_18 #x0000000000000001))
(assert (= var1521706
   (ite (bvslt ARGNAME_groups_NAMEEND temp388_18)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp388_19 #x0000000000000000))
(assert (= var1521706 temp388_19))
(assert (= ARGNAME_stride_NAMEEND_LEN var1521660))
(assert (= ARGNAME_padding_NAMEEND_LEN var1521660))
(assert (= ARGNAME_dilation_NAMEEND_LEN var1521660))
(assert (= var2240288 var1521631))
(assert (= temp388_20 #x0000000000000000))
(assert (= temp388_21 temp388_20))
(assert (= temp388_22 (select ARGNAME_padding_NAMEEND_VAL temp388_21)))
(assert (= temp388_23 #x0000000000000001))
(assert (= temp388_24 temp388_23))
(assert (= temp388_25 (select ARGNAME_padding_NAMEEND_VAL temp388_24)))
(assert (= temp388_26 #x0000000000000002))
(assert (= temp388_27 temp388_26))
(assert (= temp388_28 (select ARGNAME_padding_NAMEEND_VAL temp388_27)))
(assert (= temp388_29 #x0000000000000003))
(assert (= temp388_30 temp388_29))
(assert (= temp388_31 (select ARGNAME_padding_NAMEEND_VAL temp388_30)))
(assert (= temp388_32 #x0000000000000004))
(assert (= temp388_33 temp388_32))
(assert (= temp388_34 (select ARGNAME_padding_NAMEEND_VAL temp388_33)))
(assert (= temp388_35 #x0000000000000005))
(assert (= temp388_36 temp388_35))
(assert (= temp388_37 (select ARGNAME_padding_NAMEEND_VAL temp388_36)))
(assert (= temp388_38 #x0000000000000000))
(assert (= temp388_39 #x0000000000000000))
(assert (= temp388_40 temp388_39))
(assert (= temp388_41 (select ARGNAME_padding_NAMEEND_VAL temp388_40)))
(assert (= temp388_42 #x0000000000000000))
(assert (= temp388_43 #x0000000000000001))
(assert (= temp388_44 temp388_43))
(assert (= temp388_45 (select ARGNAME_padding_NAMEEND_VAL temp388_44)))
(assert (= temp388_46 #x0000000000000000))
(assert (= temp388_47 #x0000000000000002))
(assert (= temp388_48 temp388_47))
(assert (= temp388_49 (select ARGNAME_padding_NAMEEND_VAL temp388_48)))
(assert (= temp388_50 #x0000000000000000))
(assert (= temp388_51 #x0000000000000003))
(assert (= temp388_52 temp388_51))
(assert (= temp388_53 (select ARGNAME_padding_NAMEEND_VAL temp388_52)))
(assert (= temp388_54 #x0000000000000000))
(assert (= temp388_55 #x0000000000000004))
(assert (= temp388_56 temp388_55))
(assert (= temp388_57 (select ARGNAME_padding_NAMEEND_VAL temp388_56)))
(assert (= temp388_58 #x0000000000000000))
(assert (= temp388_59 #x0000000000000005))
(assert (= temp388_60 temp388_59))
(assert (= temp388_61 (select ARGNAME_padding_NAMEEND_VAL temp388_60)))
(assert (= var2240290
   (ite (and true
             (bvslt temp388_41 temp388_38)
             (bvslt temp388_45 temp388_42)
             (bvslt temp388_49 temp388_46)
             (bvslt temp388_53 temp388_50)
             (bvslt temp388_57 temp388_54)
             (bvslt temp388_61 temp388_58))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp388_62 #x0000000000000000))
(assert (= var2240290 temp388_62))
(assert (= temp388_63 #x0000000000000000))
(assert (= temp388_64 temp388_63))
(assert (= temp388_65 (select ARGNAME_stride_NAMEEND_VAL temp388_64)))
(assert (= temp388_66 #x0000000000000001))
(assert (= temp388_67 temp388_66))
(assert (= temp388_68 (select ARGNAME_stride_NAMEEND_VAL temp388_67)))
(assert (= temp388_69 #x0000000000000002))
(assert (= temp388_70 temp388_69))
(assert (= temp388_71 (select ARGNAME_stride_NAMEEND_VAL temp388_70)))
(assert (= temp388_72 #x0000000000000003))
(assert (= temp388_73 temp388_72))
(assert (= temp388_74 (select ARGNAME_stride_NAMEEND_VAL temp388_73)))
(assert (= temp388_75 #x0000000000000004))
(assert (= temp388_76 temp388_75))
(assert (= temp388_77 (select ARGNAME_stride_NAMEEND_VAL temp388_76)))
(assert (= temp388_78 #x0000000000000005))
(assert (= temp388_79 temp388_78))
(assert (= temp388_80 (select ARGNAME_stride_NAMEEND_VAL temp388_79)))
(assert (= temp388_81 #x0000000000000000))
(assert (= temp388_82 #x0000000000000000))
(assert (= temp388_83 temp388_82))
(assert (= temp388_84 (select ARGNAME_stride_NAMEEND_VAL temp388_83)))
(assert (= temp388_85 #x0000000000000000))
(assert (= temp388_86 #x0000000000000001))
(assert (= temp388_87 temp388_86))
(assert (= temp388_88 (select ARGNAME_stride_NAMEEND_VAL temp388_87)))
(assert (= temp388_89 #x0000000000000000))
(assert (= temp388_90 #x0000000000000002))
(assert (= temp388_91 temp388_90))
(assert (= temp388_92 (select ARGNAME_stride_NAMEEND_VAL temp388_91)))
(assert (= temp388_93 #x0000000000000000))
(assert (= temp388_94 #x0000000000000003))
(assert (= temp388_95 temp388_94))
(assert (= temp388_96 (select ARGNAME_stride_NAMEEND_VAL temp388_95)))
(assert (= temp388_97 #x0000000000000000))
(assert (= temp388_98 #x0000000000000004))
(assert (= temp388_99 temp388_98))
(assert (= temp388_100 (select ARGNAME_stride_NAMEEND_VAL temp388_99)))
(assert (= temp388_101 #x0000000000000000))
(assert (= temp388_102 #x0000000000000005))
(assert (= temp388_103 temp388_102))
(assert (= temp388_104 (select ARGNAME_stride_NAMEEND_VAL temp388_103)))
(assert (= var2240311
   (ite (and true
             (bvsle temp388_84 temp388_81)
             (bvsle temp388_88 temp388_85)
             (bvsle temp388_92 temp388_89)
             (bvsle temp388_96 temp388_93)
             (bvsle temp388_100 temp388_97)
             (bvsle temp388_104 temp388_101))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp388_105 #x0000000000000000))
(assert (= var2240311 temp388_105))
(assert (= temp388_106 #x0000000000000000))
(assert (= var2228402 temp388_106))
(assert (= temp388_107 #x0000000000000000))
(assert (= temp388_108 temp388_107))
(assert (= temp388_109 (select ARGNAME_weight_NAMEEND_DIMSIZE temp388_108)))
(assert (= temp388_110 #x0000000000000001))
(assert (= temp388_111 temp388_110))
(assert (= temp388_112 (select ARGNAME_weight_NAMEEND_DIMSIZE temp388_111)))
(assert (= temp388_113 #x0000000000000002))
(assert (= temp388_114 temp388_113))
(assert (= temp388_115 (select ARGNAME_weight_NAMEEND_DIMSIZE temp388_114)))
(assert (= temp388_116 #x0000000000000003))
(assert (= temp388_117 temp388_116))
(assert (= temp388_118 (select ARGNAME_weight_NAMEEND_DIMSIZE temp388_117)))
(assert (= temp388_119 #x0000000000000004))
(assert (= temp388_120 temp388_119))
(assert (= temp388_121 (select ARGNAME_weight_NAMEEND_DIMSIZE temp388_120)))
(assert (= temp388_122 #x0000000000000005))
(assert (= temp388_123 temp388_122))
(assert (= temp388_124 (select ARGNAME_weight_NAMEEND_DIMSIZE temp388_123)))
(assert (= temp388_126 var2228402))
(assert (= temp388_127 (select ARGNAME_weight_NAMEEND_DIMSIZE temp388_126)))
(assert (= temp388_125 temp388_127))
(assert (= var2240356
   (ite (bvslt temp388_125 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp388_128 #x0000000000000000))
(assert (= var2240356 temp388_128))
(assert (= temp388_129 #x0000000000000000))
(assert (= var2228402 temp388_129))
(assert (= temp388_131 var2228402))
(assert (= temp388_132 (select ARGNAME_weight_NAMEEND_DIMSIZE temp388_131)))
(assert (= temp388_130 temp388_132))
(assert (= var2240378 (bvsmod temp388_130 ARGNAME_groups_NAMEEND)))
(assert (= temp388_133 #x0000000000000000))
(assert (= var2240379
   (ite (= var2240378 temp388_133) #x0000000000000001 #x0000000000000000)))
(assert (= temp388_134 #x0000000000000001))
(assert (= var2240379 temp388_134))
(assert (= var2240398 var2240288))
(assert (= temp388_135 #x0000000000000000))
(assert (= var2240399
   (ite (= var2240398 temp388_135) #x0000000000000001 #x0000000000000000)))
(assert (= temp388_136 #x0000000000000001))
(assert (= var2240399 temp388_136))
(assert (= temp388_137 #x0000000000000001))
(assert (= var2229290 temp388_137))
(assert (= temp388_139 var2229290))
(assert (= temp388_140 (select ARGNAME_weight_NAMEEND_DIMSIZE temp388_139)))
(assert (= temp388_138 temp388_140))
(assert (= var2240411 (bvmul ARGNAME_groups_NAMEEND temp388_138)))
(assert (= temp388_141 #x0000000000000000))
(assert (= var2228402 temp388_141))
(assert (= temp388_143 var2228402))
(assert (= temp388_144 (select ARGNAME_weight_NAMEEND_DIMSIZE temp388_143)))
(assert (= temp388_142 temp388_144))
(assert (= temp388_145 #x0000000000000002))
(assert (= var2503529 temp388_145))
(assert (= temp388_146 #x0000000000000001))
(assert (= var2240569 temp388_146))
(assert (= temp388_147 #x0000000000000003))
(assert (= var1521778
   (ite (= ARGNAME_weight_NAMEEND_DIM temp388_147)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp388_148 #x0000000000000001))
(assert (= var1521778 temp388_148))
(assert (= temp388_149 #x0000000000000001))
(assert (= var1521908 temp388_149))
(assert (= var4010473 var1521908))
(assert (= temp388_150 #x0000000000000000))
(assert (= var4210495 temp388_150))
(assert (= var4210497 var4210495))
(assert (= var4210454 var4210497))
(assert (= var1521921 var4210454))
(assert (= temp388_151 #x0000000000000002))
(assert (= var4339331 temp388_151))
(assert (= var4339333 (bvsub ARGNAME_weight_NAMEEND_DIM var4339331)))
(assert (= var4404876 var4339331))
(assert (= var4404877 var4339333))
(assert (= var5124496 var1521921))
(assert (= var5386640 var1521921))
(assert (= temp388_152 #x0000000000000000))
(assert (= var5714320 temp388_152))
(assert (= temp388_153 #x0000000000000001))
(assert (= var1521778 temp388_153))
(model-add temp388_1 () (_ BitVec 64) #x0000000000000002)
(model-add var989741 () (_ BitVec 64) #x0000000000000002)
(model-add temp388_2 () (_ BitVec 64) #x0000000000000001)
(model-add var989757 () (_ BitVec 64) #x0000000000000003)
(model-add temp388_3 () (_ BitVec 64) #x0000000000000002)
(model-add var989761 () (_ BitVec 64) #x0000000000000004)
(model-add var989766 () (_ BitVec 64) #x0000000000000004)
(model-add var989767
           ()
           (_ BitVec 64)
           (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000004)
                #x0000000000000001
                #x0000000000000000))
(model-add var989768
           ()
           (_ BitVec 64)
           (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000004)
                #x0000000000000001
                #x0000000000000000))
(model-add var989771 () (_ BitVec 64) #x0000000000000003)
(model-add var989772
           ()
           (_ BitVec 64)
           (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000003)
                #x0000000000000000
                #x0000000000000001))
(model-add var989773
           ()
           (_ BitVec 64)
           (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000004)
                #x0000000000000001
                #x0000000000000000))
(model-add temp388_4 () (_ BitVec 64) #x0000000000000001)
(model-add var989774
           ()
           (_ BitVec 64)
           (concat #b000000000000000000000000000000000000000000000000000000000000000
                   (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000004)
                        #b1
                        #b0)))
(model-add temp388_5 () (_ BitVec 64) #x0000000000000000)
(model-add var989775
           ()
           (_ BitVec 64)
           (ite (= ARGNAME_input_NAMEEND_DIM #x0000000000000004)
                #x0000000000000000
                #x0000000000000001))
(model-add temp388_6 () (_ BitVec 64) #x0000000000000000)
(model-add var989776 () (_ BitVec 64) #x0000000000000000)






