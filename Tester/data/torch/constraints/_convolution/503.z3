(declare-fun temp668_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp668_2 () (_ BitVec 64))
(declare-fun temp668_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp668_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp668_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp668_6 () (_ BitVec 64))
(declare-fun temp668_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp668_8 () (_ BitVec 64))
(declare-fun temp668_9 () (_ BitVec 64))
(declare-fun temp668_10 () (_ BitVec 64))
(declare-fun temp668_11 () (_ BitVec 64))
(declare-fun temp668_12 () (_ BitVec 64))
(declare-fun temp668_13 () (_ BitVec 64))
(declare-fun temp668_14 () (_ BitVec 64))
(declare-fun temp668_15 () (_ BitVec 64))
(declare-fun temp668_16 () (_ BitVec 64))
(declare-fun temp668_17 () (_ BitVec 64))
(declare-fun temp668_18 () (_ BitVec 64))
(declare-fun temp668_19 () (_ BitVec 64))
(declare-fun temp668_20 () (_ BitVec 64))
(declare-fun temp668_21 () (_ BitVec 64))
(declare-fun temp668_22 () (_ BitVec 64))
(declare-fun temp668_23 () (_ BitVec 64))
(declare-fun temp668_24 () (_ BitVec 64))
(declare-fun temp668_25 () (_ BitVec 64))
(declare-fun temp668_26 () (_ BitVec 64))
(declare-fun temp668_27 () (_ BitVec 64))
(declare-fun temp668_28 () (_ BitVec 64))
(declare-fun temp668_29 () (_ BitVec 64))
(declare-fun temp668_30 () (_ BitVec 64))
(declare-fun temp668_31 () (_ BitVec 64))
(declare-fun temp668_32 () (_ BitVec 64))
(declare-fun temp668_33 () (_ BitVec 64))
(declare-fun temp668_34 () (_ BitVec 64))
(declare-fun temp668_35 () (_ BitVec 64))
(declare-fun temp668_36 () (_ BitVec 64))
(declare-fun temp668_37 () (_ BitVec 64))
(declare-fun temp668_38 () (_ BitVec 64))
(declare-fun temp668_39 () (_ BitVec 64))
(declare-fun temp668_40 () (_ BitVec 64))
(declare-fun temp668_41 () (_ BitVec 64))
(declare-fun temp668_42 () (_ BitVec 64))
(declare-fun temp668_43 () (_ BitVec 64))
(declare-fun temp668_44 () (_ BitVec 64))
(declare-fun temp668_45 () (_ BitVec 64))
(declare-fun temp668_46 () (_ BitVec 64))
(declare-fun temp668_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp668_48 () (_ BitVec 64))
(declare-fun temp668_49 () (_ BitVec 64))
(declare-fun temp668_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp668_51 () (_ BitVec 64))
(declare-fun temp668_52 () (_ BitVec 64))
(declare-fun temp668_53 () (_ BitVec 64))
(declare-fun temp668_54 () (_ BitVec 64))
(declare-fun temp668_55 () (_ BitVec 64))
(declare-fun temp668_56 () (_ BitVec 64))
(declare-fun temp668_57 () (_ BitVec 64))
(declare-fun temp668_58 () (_ BitVec 64))
(declare-fun temp668_59 () (_ BitVec 64))
(declare-fun temp668_60 () (_ BitVec 64))
(declare-fun temp668_61 () (_ BitVec 64))
(declare-fun temp668_62 () (_ BitVec 64))
(declare-fun temp668_63 () (_ BitVec 64))
(declare-fun temp668_64 () (_ BitVec 64))
(declare-fun temp668_65 () (_ BitVec 64))
(declare-fun temp668_66 () (_ BitVec 64))
(declare-fun temp668_67 () (_ BitVec 64))
(declare-fun temp668_68 () (_ BitVec 64))
(declare-fun temp668_69 () (_ BitVec 64))
(declare-fun temp668_70 () (_ BitVec 64))
(declare-fun temp668_71 () (_ BitVec 64))
(declare-fun temp668_72 () (_ BitVec 64))
(declare-fun temp668_73 () (_ BitVec 64))
(declare-fun temp668_74 () (_ BitVec 64))
(declare-fun temp668_75 () (_ BitVec 64))
(declare-fun temp668_76 () (_ BitVec 64))
(declare-fun temp668_77 () (_ BitVec 64))
(declare-fun temp668_78 () (_ BitVec 64))
(declare-fun temp668_79 () (_ BitVec 64))
(declare-fun temp668_80 () (_ BitVec 64))
(declare-fun temp668_81 () (_ BitVec 64))
(declare-fun temp668_82 () (_ BitVec 64))
(declare-fun temp668_83 () (_ BitVec 64))
(declare-fun temp668_84 () (_ BitVec 64))
(declare-fun temp668_85 () (_ BitVec 64))
(declare-fun temp668_86 () (_ BitVec 64))
(declare-fun temp668_87 () (_ BitVec 64))
(declare-fun temp668_88 () (_ BitVec 64))
(declare-fun temp668_89 () (_ BitVec 64))
(declare-fun temp668_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp668_91 () (_ BitVec 64))
(declare-fun temp668_92 () (_ BitVec 64))
(declare-fun temp668_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp668_94 () (_ BitVec 64))
(declare-fun temp668_95 () (_ BitVec 64))
(declare-fun temp668_96 () (_ BitVec 64))
(declare-fun temp668_97 () (_ BitVec 64))
(declare-fun temp668_98 () (_ BitVec 64))
(declare-fun temp668_99 () (_ BitVec 64))
(declare-fun temp668_100 () (_ BitVec 64))
(declare-fun temp668_101 () (_ BitVec 64))
(declare-fun temp668_102 () (_ BitVec 64))
(declare-fun temp668_103 () (_ BitVec 64))
(declare-fun temp668_104 () (_ BitVec 64))
(declare-fun temp668_105 () (_ BitVec 64))
(declare-fun temp668_106 () (_ BitVec 64))
(declare-fun temp668_107 () (_ BitVec 64))
(declare-fun temp668_108 () (_ BitVec 64))
(declare-fun temp668_109 () (_ BitVec 64))
(declare-fun temp668_110 () (_ BitVec 64))
(declare-fun temp668_111 () (_ BitVec 64))
(declare-fun temp668_112 () (_ BitVec 64))
(declare-fun temp668_113 () (_ BitVec 64))
(declare-fun temp668_114 () (_ BitVec 64))
(declare-fun temp668_115 () (_ BitVec 64))
(declare-fun temp668_116 () (_ BitVec 64))
(declare-fun temp668_117 () (_ BitVec 64))
(declare-fun temp668_118 () (_ BitVec 64))
(declare-fun temp668_119 () (_ BitVec 64))
(declare-fun temp668_120 () (_ BitVec 64))
(declare-fun temp668_121 () (_ BitVec 64))
(declare-fun temp668_122 () (_ BitVec 64))
(declare-fun temp668_123 () (_ BitVec 64))
(declare-fun temp668_124 () (_ BitVec 64))
(declare-fun temp668_125 () (_ BitVec 64))
(declare-fun temp668_126 () (_ BitVec 64))
(declare-fun temp668_127 () (_ BitVec 64))
(declare-fun temp668_128 () (_ BitVec 64))
(declare-fun temp668_129 () (_ BitVec 64))
(declare-fun temp668_130 () (_ BitVec 64))
(declare-fun temp668_131 () (_ BitVec 64))
(declare-fun temp668_132 () (_ BitVec 64))
(declare-fun temp668_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp668_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp668_135 () (_ BitVec 64))
(declare-fun temp668_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp668_137 () (_ BitVec 64))
(declare-fun temp668_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp668_139 () (_ BitVec 64))
(declare-fun temp668_140 () (_ BitVec 64))
(declare-fun temp668_141 () (_ BitVec 64))
(declare-fun temp668_142 () (_ BitVec 64))
(declare-fun temp668_143 () (_ BitVec 64))
(declare-fun temp668_144 () (_ BitVec 64))
(declare-fun temp668_145 () (_ BitVec 64))
(declare-fun temp668_146 () (_ BitVec 64))
(declare-fun temp668_147 () (_ BitVec 64))
(declare-fun temp668_148 () (_ BitVec 64))
(declare-fun temp668_149 () (_ BitVec 64))
(declare-fun temp668_150 () (_ BitVec 64))
(declare-fun temp668_151 () (_ BitVec 64))
(declare-fun temp668_152 () (_ BitVec 64))
(declare-fun temp668_153 () (_ BitVec 64))
(declare-fun temp668_154 () (_ BitVec 64))
(declare-fun temp668_156 () (_ BitVec 64))
(declare-fun temp668_157 () (_ BitVec 64))
(declare-fun temp668_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp668_158 () (_ BitVec 64))
(declare-fun temp668_159 () (_ BitVec 64))
(declare-fun temp668_161 () (_ BitVec 64))
(declare-fun temp668_162 () (_ BitVec 64))
(declare-fun temp668_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp668_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp668_164 () (_ BitVec 64))
(declare-fun temp668_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp668_166 () (_ BitVec 64))
(declare-fun temp668_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp668_168 () (_ BitVec 64))
(declare-fun temp668_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp668_170 () (_ BitVec 64))
(declare-fun temp668_171 () (_ BitVec 64))
(declare-fun temp668_172 () (_ BitVec 64))
(declare-fun temp668_173 () (_ BitVec 64))
(declare-fun temp668_174 () (_ BitVec 64))
(declare-fun temp668_175 () (_ BitVec 64))
(declare-fun temp668_176 () (_ BitVec 64))
(declare-fun temp668_177 () (_ BitVec 64))
(declare-fun temp668_178 () (_ BitVec 64))
(declare-fun temp668_179 () (_ BitVec 64))
(declare-fun temp668_180 () (_ BitVec 64))
(declare-fun temp668_181 () (_ BitVec 64))
(declare-fun temp668_182 () (_ BitVec 64))
(declare-fun temp668_183 () (_ BitVec 64))
(declare-fun temp668_184 () (_ BitVec 64))
(declare-fun temp668_185 () (_ BitVec 64))
(declare-fun temp668_186 () (_ BitVec 64))
(declare-fun temp668_187 () (_ BitVec 64))
(declare-fun temp668_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp668_189 () (_ BitVec 64))
(declare-fun temp668_191 () (_ BitVec 64))
(declare-fun temp668_192 () (_ BitVec 64))
(declare-fun temp668_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp668_193 () (_ BitVec 64))
(declare-fun temp668_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp668_195 () (_ BitVec 64))
(declare-fun temp668_196 () (_ BitVec 64))
(declare-fun temp668_197 () (_ BitVec 64))
(declare-fun temp668_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp668_199 () (_ BitVec 64))
(declare-fun temp668_200 () (_ BitVec 64))
(declare-fun temp668_201 () (_ BitVec 64))
(declare-fun temp668_202 () (_ BitVec 64))
(declare-fun temp668_203 () (_ BitVec 64))
(declare-fun temp668_204 () (_ BitVec 64))
(declare-fun temp668_205 () (_ BitVec 64))
(declare-fun temp668_206 () (_ BitVec 64))
(declare-fun temp668_207 () (_ BitVec 64))
(declare-fun temp668_208 () (_ BitVec 64))
(declare-fun temp668_209 () (_ BitVec 64))
(declare-fun temp668_210 () (_ BitVec 64))
(declare-fun temp668_211 () (_ BitVec 64))
(declare-fun temp668_212 () (_ BitVec 64))
(declare-fun temp668_213 () (_ BitVec 64))
(declare-fun temp668_214 () (_ BitVec 64))
(declare-fun temp668_215 () (_ BitVec 64))
(declare-fun temp668_216 () (_ BitVec 64))
(declare-fun temp668_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp668_218 () (_ BitVec 64))
(declare-fun temp668_220 () (_ BitVec 64))
(declare-fun temp668_221 () (_ BitVec 64))
(declare-fun temp668_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp668_222 () (_ BitVec 64))
(declare-fun temp668_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp668_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp668_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp668_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp668_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp668_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp668_229 () (_ BitVec 64))
(declare-fun temp668_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp668_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp668_232 () (_ BitVec 64))
(declare-fun temp668_233 () (_ BitVec 64))
(declare-fun temp668_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp668_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp668_236 () (_ BitVec 64))
(declare-fun temp668_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp668_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp668_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun var5714320 () (_ BitVec 64))
(declare-fun temp668_240 () (_ BitVec 64))
(declare-fun ARGNAME_benchmark_NAMEEND () (_ BitVec 64))
(declare-fun var80421 () (_ BitVec 64))
(declare-fun temp668_241 () (_ BitVec 64))
(declare-fun ARGNAME_deterministic_NAMEEND () (_ BitVec 64))
(declare-fun var80423 () (_ BitVec 64))
(declare-fun temp668_242 () (_ BitVec 64))
(declare-fun ARGNAME_allow_tf32_NAMEEND () (_ BitVec 64))
(declare-fun var80425 () (_ BitVec 64))
(declare-fun temp668_243 () (_ BitVec 64))
(assert (= temp668_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp668_1)))
(assert (= temp668_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp668_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_3 #x0000000000000000))
(assert (= var79869 temp668_3))
(assert (= temp668_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp668_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_5 #x0000000000000000))
(assert (= var79914 temp668_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp668_6 #x0000000000000000))
(assert (= temp668_7 temp668_6))
(assert (= temp668_8 (select ARGNAME_padding_NAMEEND_VAL temp668_7)))
(assert (= temp668_9 #x0000000000000001))
(assert (= temp668_10 temp668_9))
(assert (= temp668_11 (select ARGNAME_padding_NAMEEND_VAL temp668_10)))
(assert (= temp668_12 #x0000000000000002))
(assert (= temp668_13 temp668_12))
(assert (= temp668_14 (select ARGNAME_padding_NAMEEND_VAL temp668_13)))
(assert (= temp668_15 #x0000000000000003))
(assert (= temp668_16 temp668_15))
(assert (= temp668_17 (select ARGNAME_padding_NAMEEND_VAL temp668_16)))
(assert (= temp668_18 #x0000000000000004))
(assert (= temp668_19 temp668_18))
(assert (= temp668_20 (select ARGNAME_padding_NAMEEND_VAL temp668_19)))
(assert (= temp668_21 #x0000000000000005))
(assert (= temp668_22 temp668_21))
(assert (= temp668_23 (select ARGNAME_padding_NAMEEND_VAL temp668_22)))
(assert (= temp668_24 #x0000000000000000))
(assert (= temp668_25 #x0000000000000000))
(assert (= temp668_26 temp668_25))
(assert (= temp668_27 (select ARGNAME_padding_NAMEEND_VAL temp668_26)))
(assert (= temp668_28 #x0000000000000000))
(assert (= temp668_29 #x0000000000000001))
(assert (= temp668_30 temp668_29))
(assert (= temp668_31 (select ARGNAME_padding_NAMEEND_VAL temp668_30)))
(assert (= temp668_32 #x0000000000000000))
(assert (= temp668_33 #x0000000000000002))
(assert (= temp668_34 temp668_33))
(assert (= temp668_35 (select ARGNAME_padding_NAMEEND_VAL temp668_34)))
(assert (= temp668_36 #x0000000000000000))
(assert (= temp668_37 #x0000000000000003))
(assert (= temp668_38 temp668_37))
(assert (= temp668_39 (select ARGNAME_padding_NAMEEND_VAL temp668_38)))
(assert (= temp668_40 #x0000000000000000))
(assert (= temp668_41 #x0000000000000004))
(assert (= temp668_42 temp668_41))
(assert (= temp668_43 (select ARGNAME_padding_NAMEEND_VAL temp668_42)))
(assert (= temp668_44 #x0000000000000000))
(assert (= temp668_45 #x0000000000000005))
(assert (= temp668_46 temp668_45))
(assert (= temp668_47 (select ARGNAME_padding_NAMEEND_VAL temp668_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp668_27 temp668_24)
             (bvslt temp668_31 temp668_28)
             (bvslt temp668_35 temp668_32)
             (bvslt temp668_39 temp668_36)
             (bvslt temp668_43 temp668_40)
             (bvslt temp668_47 temp668_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_48 #x0000000000000000))
(assert (= var1322786 temp668_48))
(assert (= temp668_49 #x0000000000000000))
(assert (= temp668_50 temp668_49))
(assert (= temp668_51 (select ARGNAME_output_padding_NAMEEND_VAL temp668_50)))
(assert (= temp668_52 #x0000000000000001))
(assert (= temp668_53 temp668_52))
(assert (= temp668_54 (select ARGNAME_output_padding_NAMEEND_VAL temp668_53)))
(assert (= temp668_55 #x0000000000000002))
(assert (= temp668_56 temp668_55))
(assert (= temp668_57 (select ARGNAME_output_padding_NAMEEND_VAL temp668_56)))
(assert (= temp668_58 #x0000000000000003))
(assert (= temp668_59 temp668_58))
(assert (= temp668_60 (select ARGNAME_output_padding_NAMEEND_VAL temp668_59)))
(assert (= temp668_61 #x0000000000000004))
(assert (= temp668_62 temp668_61))
(assert (= temp668_63 (select ARGNAME_output_padding_NAMEEND_VAL temp668_62)))
(assert (= temp668_64 #x0000000000000005))
(assert (= temp668_65 temp668_64))
(assert (= temp668_66 (select ARGNAME_output_padding_NAMEEND_VAL temp668_65)))
(assert (= temp668_67 #x0000000000000000))
(assert (= temp668_68 #x0000000000000000))
(assert (= temp668_69 temp668_68))
(assert (= temp668_70 (select ARGNAME_output_padding_NAMEEND_VAL temp668_69)))
(assert (= temp668_71 #x0000000000000000))
(assert (= temp668_72 #x0000000000000001))
(assert (= temp668_73 temp668_72))
(assert (= temp668_74 (select ARGNAME_output_padding_NAMEEND_VAL temp668_73)))
(assert (= temp668_75 #x0000000000000000))
(assert (= temp668_76 #x0000000000000002))
(assert (= temp668_77 temp668_76))
(assert (= temp668_78 (select ARGNAME_output_padding_NAMEEND_VAL temp668_77)))
(assert (= temp668_79 #x0000000000000000))
(assert (= temp668_80 #x0000000000000003))
(assert (= temp668_81 temp668_80))
(assert (= temp668_82 (select ARGNAME_output_padding_NAMEEND_VAL temp668_81)))
(assert (= temp668_83 #x0000000000000000))
(assert (= temp668_84 #x0000000000000004))
(assert (= temp668_85 temp668_84))
(assert (= temp668_86 (select ARGNAME_output_padding_NAMEEND_VAL temp668_85)))
(assert (= temp668_87 #x0000000000000000))
(assert (= temp668_88 #x0000000000000005))
(assert (= temp668_89 temp668_88))
(assert (= temp668_90 (select ARGNAME_output_padding_NAMEEND_VAL temp668_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp668_70 temp668_67)
             (bvslt temp668_74 temp668_71)
             (bvslt temp668_78 temp668_75)
             (bvslt temp668_82 temp668_79)
             (bvslt temp668_86 temp668_83)
             (bvslt temp668_90 temp668_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_91 #x0000000000000000))
(assert (= var1322797 temp668_91))
(assert (= temp668_92 #x0000000000000000))
(assert (= temp668_93 temp668_92))
(assert (= temp668_94 (select ARGNAME_stride_NAMEEND_VAL temp668_93)))
(assert (= temp668_95 #x0000000000000001))
(assert (= temp668_96 temp668_95))
(assert (= temp668_97 (select ARGNAME_stride_NAMEEND_VAL temp668_96)))
(assert (= temp668_98 #x0000000000000002))
(assert (= temp668_99 temp668_98))
(assert (= temp668_100 (select ARGNAME_stride_NAMEEND_VAL temp668_99)))
(assert (= temp668_101 #x0000000000000003))
(assert (= temp668_102 temp668_101))
(assert (= temp668_103 (select ARGNAME_stride_NAMEEND_VAL temp668_102)))
(assert (= temp668_104 #x0000000000000004))
(assert (= temp668_105 temp668_104))
(assert (= temp668_106 (select ARGNAME_stride_NAMEEND_VAL temp668_105)))
(assert (= temp668_107 #x0000000000000005))
(assert (= temp668_108 temp668_107))
(assert (= temp668_109 (select ARGNAME_stride_NAMEEND_VAL temp668_108)))
(assert (= temp668_110 #x0000000000000000))
(assert (= temp668_111 #x0000000000000000))
(assert (= temp668_112 temp668_111))
(assert (= temp668_113 (select ARGNAME_stride_NAMEEND_VAL temp668_112)))
(assert (= temp668_114 #x0000000000000000))
(assert (= temp668_115 #x0000000000000001))
(assert (= temp668_116 temp668_115))
(assert (= temp668_117 (select ARGNAME_stride_NAMEEND_VAL temp668_116)))
(assert (= temp668_118 #x0000000000000000))
(assert (= temp668_119 #x0000000000000002))
(assert (= temp668_120 temp668_119))
(assert (= temp668_121 (select ARGNAME_stride_NAMEEND_VAL temp668_120)))
(assert (= temp668_122 #x0000000000000000))
(assert (= temp668_123 #x0000000000000003))
(assert (= temp668_124 temp668_123))
(assert (= temp668_125 (select ARGNAME_stride_NAMEEND_VAL temp668_124)))
(assert (= temp668_126 #x0000000000000000))
(assert (= temp668_127 #x0000000000000004))
(assert (= temp668_128 temp668_127))
(assert (= temp668_129 (select ARGNAME_stride_NAMEEND_VAL temp668_128)))
(assert (= temp668_130 #x0000000000000000))
(assert (= temp668_131 #x0000000000000005))
(assert (= temp668_132 temp668_131))
(assert (= temp668_133 (select ARGNAME_stride_NAMEEND_VAL temp668_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp668_113 temp668_110)
             (bvsle temp668_117 temp668_114)
             (bvsle temp668_121 temp668_118)
             (bvsle temp668_125 temp668_122)
             (bvsle temp668_129 temp668_126)
             (bvsle temp668_133 temp668_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_134 #x0000000000000000))
(assert (= var1322807 temp668_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_135 #x0000000000000001))
(assert (= var1322819 temp668_135))
(assert (= temp668_136 #x0000000000000000))
(assert (= var1310898 temp668_136))
(assert (= temp668_137 #x0000000000000000))
(assert (= temp668_138 temp668_137))
(assert (= temp668_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp668_138)))
(assert (= temp668_140 #x0000000000000001))
(assert (= temp668_141 temp668_140))
(assert (= temp668_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp668_141)))
(assert (= temp668_143 #x0000000000000002))
(assert (= temp668_144 temp668_143))
(assert (= temp668_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp668_144)))
(assert (= temp668_146 #x0000000000000003))
(assert (= temp668_147 temp668_146))
(assert (= temp668_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp668_147)))
(assert (= temp668_149 #x0000000000000004))
(assert (= temp668_150 temp668_149))
(assert (= temp668_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp668_150)))
(assert (= temp668_152 #x0000000000000005))
(assert (= temp668_153 temp668_152))
(assert (= temp668_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp668_153)))
(assert (= temp668_156 var1310898))
(assert (= temp668_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp668_156)))
(assert (= temp668_155 temp668_157))
(assert (= var1322852
   (ite (bvslt temp668_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_158 #x0000000000000000))
(assert (= var1322852 temp668_158))
(assert (= temp668_159 #x0000000000000000))
(assert (= var1310898 temp668_159))
(assert (= temp668_161 var1310898))
(assert (= temp668_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp668_161)))
(assert (= temp668_160 temp668_162))
(assert (= var1322874 (bvsmod temp668_160 ARGNAME_groups_NAMEEND)))
(assert (= temp668_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp668_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp668_164 #x0000000000000001))
(assert (= var1322875 temp668_164))
(assert (= temp668_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp668_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_166 #x0000000000000001))
(assert (= var1322895 temp668_166))
(assert (= temp668_167 #x0000000000000001))
(assert (= var1311786 temp668_167))
(assert (= temp668_168 #x0000000000000000))
(assert (= temp668_169 temp668_168))
(assert (= temp668_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp668_169)))
(assert (= temp668_171 #x0000000000000001))
(assert (= temp668_172 temp668_171))
(assert (= temp668_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp668_172)))
(assert (= temp668_174 #x0000000000000002))
(assert (= temp668_175 temp668_174))
(assert (= temp668_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp668_175)))
(assert (= temp668_177 #x0000000000000003))
(assert (= temp668_178 temp668_177))
(assert (= temp668_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp668_178)))
(assert (= temp668_180 #x0000000000000004))
(assert (= temp668_181 temp668_180))
(assert (= temp668_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp668_181)))
(assert (= temp668_183 #x0000000000000005))
(assert (= temp668_184 temp668_183))
(assert (= temp668_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp668_184)))
(assert (= temp668_186 #x0000000000000000))
(assert (= temp668_187
   (ite (bvslt var1311786 temp668_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp668_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp668_187)))
(assert (= var1322903 temp668_188))
(assert (bvslt (ite (bvslt var1311786 temp668_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp668_189 #x0000000000000001))
(assert (= var1311786 temp668_189))
(assert (= temp668_191 var1311786))
(assert (= temp668_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp668_191)))
(assert (= temp668_190 temp668_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp668_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp668_193 #x0000000000000001))
(assert (= var1322908 temp668_193))
(assert (= temp668_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp668_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_195 #x0000000000000001))
(assert (= var1322975 temp668_195))
(assert (= temp668_196 #x0000000000000000))
(assert (= var1310898 temp668_196))
(assert (= temp668_197 #x0000000000000000))
(assert (= temp668_198 temp668_197))
(assert (= temp668_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp668_198)))
(assert (= temp668_200 #x0000000000000001))
(assert (= temp668_201 temp668_200))
(assert (= temp668_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp668_201)))
(assert (= temp668_203 #x0000000000000002))
(assert (= temp668_204 temp668_203))
(assert (= temp668_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp668_204)))
(assert (= temp668_206 #x0000000000000003))
(assert (= temp668_207 temp668_206))
(assert (= temp668_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp668_207)))
(assert (= temp668_209 #x0000000000000004))
(assert (= temp668_210 temp668_209))
(assert (= temp668_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp668_210)))
(assert (= temp668_212 #x0000000000000005))
(assert (= temp668_213 temp668_212))
(assert (= temp668_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp668_213)))
(assert (= temp668_215 #x0000000000000000))
(assert (= temp668_216
   (ite (bvslt var1310898 temp668_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp668_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp668_216)))
(assert (= var1322977 temp668_217))
(assert (bvslt (ite (bvslt var1310898 temp668_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp668_218 #x0000000000000000))
(assert (= var1310898 temp668_218))
(assert (= temp668_220 var1310898))
(assert (= temp668_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp668_220)))
(assert (= temp668_219 temp668_221))
(assert (= var1322980
   (ite (= var1322977 temp668_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp668_222 #x0000000000000001))
(assert (= var1322980 temp668_222))
(assert (= temp668_223 #x0000000000000002))
(assert (= var1848169 temp668_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp668_225 #x0000000000000001))
(assert (= var1323065 temp668_225))
(assert (= temp668_226 #x0000000000000001))
(assert (= var3486735 temp668_226))
(assert (= temp668_227 #x0000000000000001))
(assert (= var3814415 temp668_227))
(assert (= temp668_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp668_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_229 #x0000000000000001))
(assert (= var79986 temp668_229))
(assert (= temp668_230 #x0000000000000001))
(assert (= var80116 temp668_230))
(assert (= var4796905 var80116))
(assert (= temp668_231 #x0000000000000000))
(assert (= var4784306 temp668_231))
(assert (= temp668_232 #x0000000000000000))
(assert (= temp668_233
   (ite (bvslt var4784306 temp668_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp668_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp668_233)))
(assert (= var4796924 temp668_234))
(assert (bvslt (ite (bvslt var4784306 temp668_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp668_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp668_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp668_236 #x0000000000000001))
(assert (= var4796925 temp668_236))
(assert (= temp668_237 #x0000000000000000))
(assert (= var4996927 temp668_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp668_238 #x0000000000000002))
(assert (= var5125763 temp668_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_239 #x0000000000000000))
(assert (= var5191324 temp668_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= var5714320 var80129))
(assert (= temp668_240 #x0000000000000000))
(assert (= var80421
   (ite (distinct ARGNAME_benchmark_NAMEEND temp668_240)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_241 #x0000000000000000))
(assert (= var80423
   (ite (distinct ARGNAME_deterministic_NAMEEND temp668_241)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_242 #x0000000000000000))
(assert (= var80425
   (ite (distinct ARGNAME_allow_tf32_NAMEEND temp668_242)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp668_243 #x0000000000000001))
(assert (= var79986 temp668_243))
(model-add temp668_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp668_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp668_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






