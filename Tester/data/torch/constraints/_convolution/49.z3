(declare-fun temp64_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp64_2 () (_ BitVec 64))
(declare-fun temp64_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp64_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp64_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp64_6 () (_ BitVec 64))
(declare-fun temp64_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp64_8 () (_ BitVec 64))
(declare-fun temp64_9 () (_ BitVec 64))
(declare-fun temp64_10 () (_ BitVec 64))
(declare-fun temp64_11 () (_ BitVec 64))
(declare-fun temp64_12 () (_ BitVec 64))
(declare-fun temp64_13 () (_ BitVec 64))
(declare-fun temp64_14 () (_ BitVec 64))
(declare-fun temp64_15 () (_ BitVec 64))
(declare-fun temp64_16 () (_ BitVec 64))
(declare-fun temp64_17 () (_ BitVec 64))
(declare-fun temp64_18 () (_ BitVec 64))
(declare-fun temp64_19 () (_ BitVec 64))
(declare-fun temp64_20 () (_ BitVec 64))
(declare-fun temp64_21 () (_ BitVec 64))
(declare-fun temp64_22 () (_ BitVec 64))
(declare-fun temp64_23 () (_ BitVec 64))
(declare-fun temp64_24 () (_ BitVec 64))
(declare-fun temp64_25 () (_ BitVec 64))
(declare-fun temp64_26 () (_ BitVec 64))
(declare-fun temp64_27 () (_ BitVec 64))
(declare-fun temp64_28 () (_ BitVec 64))
(declare-fun temp64_29 () (_ BitVec 64))
(declare-fun temp64_30 () (_ BitVec 64))
(declare-fun temp64_31 () (_ BitVec 64))
(declare-fun temp64_32 () (_ BitVec 64))
(declare-fun temp64_33 () (_ BitVec 64))
(declare-fun temp64_34 () (_ BitVec 64))
(declare-fun temp64_35 () (_ BitVec 64))
(declare-fun temp64_36 () (_ BitVec 64))
(declare-fun temp64_37 () (_ BitVec 64))
(declare-fun temp64_38 () (_ BitVec 64))
(declare-fun temp64_39 () (_ BitVec 64))
(declare-fun temp64_40 () (_ BitVec 64))
(declare-fun temp64_41 () (_ BitVec 64))
(declare-fun temp64_42 () (_ BitVec 64))
(declare-fun temp64_43 () (_ BitVec 64))
(declare-fun temp64_44 () (_ BitVec 64))
(declare-fun temp64_45 () (_ BitVec 64))
(declare-fun temp64_46 () (_ BitVec 64))
(declare-fun temp64_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp64_48 () (_ BitVec 64))
(declare-fun temp64_49 () (_ BitVec 64))
(declare-fun temp64_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp64_51 () (_ BitVec 64))
(declare-fun temp64_52 () (_ BitVec 64))
(declare-fun temp64_53 () (_ BitVec 64))
(declare-fun temp64_54 () (_ BitVec 64))
(declare-fun temp64_55 () (_ BitVec 64))
(declare-fun temp64_56 () (_ BitVec 64))
(declare-fun temp64_57 () (_ BitVec 64))
(declare-fun temp64_58 () (_ BitVec 64))
(declare-fun temp64_59 () (_ BitVec 64))
(declare-fun temp64_60 () (_ BitVec 64))
(declare-fun temp64_61 () (_ BitVec 64))
(declare-fun temp64_62 () (_ BitVec 64))
(declare-fun temp64_63 () (_ BitVec 64))
(declare-fun temp64_64 () (_ BitVec 64))
(declare-fun temp64_65 () (_ BitVec 64))
(declare-fun temp64_66 () (_ BitVec 64))
(declare-fun temp64_67 () (_ BitVec 64))
(declare-fun temp64_68 () (_ BitVec 64))
(declare-fun temp64_69 () (_ BitVec 64))
(declare-fun temp64_70 () (_ BitVec 64))
(declare-fun temp64_71 () (_ BitVec 64))
(declare-fun temp64_72 () (_ BitVec 64))
(declare-fun temp64_73 () (_ BitVec 64))
(declare-fun temp64_74 () (_ BitVec 64))
(declare-fun temp64_75 () (_ BitVec 64))
(declare-fun temp64_76 () (_ BitVec 64))
(declare-fun temp64_77 () (_ BitVec 64))
(declare-fun temp64_78 () (_ BitVec 64))
(declare-fun temp64_79 () (_ BitVec 64))
(declare-fun temp64_80 () (_ BitVec 64))
(declare-fun temp64_81 () (_ BitVec 64))
(declare-fun temp64_82 () (_ BitVec 64))
(declare-fun temp64_83 () (_ BitVec 64))
(declare-fun temp64_84 () (_ BitVec 64))
(declare-fun temp64_85 () (_ BitVec 64))
(declare-fun temp64_86 () (_ BitVec 64))
(declare-fun temp64_87 () (_ BitVec 64))
(declare-fun temp64_88 () (_ BitVec 64))
(declare-fun temp64_89 () (_ BitVec 64))
(declare-fun temp64_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp64_91 () (_ BitVec 64))
(declare-fun temp64_92 () (_ BitVec 64))
(declare-fun temp64_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp64_94 () (_ BitVec 64))
(declare-fun temp64_95 () (_ BitVec 64))
(declare-fun temp64_96 () (_ BitVec 64))
(declare-fun temp64_97 () (_ BitVec 64))
(declare-fun temp64_98 () (_ BitVec 64))
(declare-fun temp64_99 () (_ BitVec 64))
(declare-fun temp64_100 () (_ BitVec 64))
(declare-fun temp64_101 () (_ BitVec 64))
(declare-fun temp64_102 () (_ BitVec 64))
(declare-fun temp64_103 () (_ BitVec 64))
(declare-fun temp64_104 () (_ BitVec 64))
(declare-fun temp64_105 () (_ BitVec 64))
(declare-fun temp64_106 () (_ BitVec 64))
(declare-fun temp64_107 () (_ BitVec 64))
(declare-fun temp64_108 () (_ BitVec 64))
(declare-fun temp64_109 () (_ BitVec 64))
(declare-fun temp64_110 () (_ BitVec 64))
(declare-fun temp64_111 () (_ BitVec 64))
(declare-fun temp64_112 () (_ BitVec 64))
(declare-fun temp64_113 () (_ BitVec 64))
(declare-fun temp64_114 () (_ BitVec 64))
(declare-fun temp64_115 () (_ BitVec 64))
(declare-fun temp64_116 () (_ BitVec 64))
(declare-fun temp64_117 () (_ BitVec 64))
(declare-fun temp64_118 () (_ BitVec 64))
(declare-fun temp64_119 () (_ BitVec 64))
(declare-fun temp64_120 () (_ BitVec 64))
(declare-fun temp64_121 () (_ BitVec 64))
(declare-fun temp64_122 () (_ BitVec 64))
(declare-fun temp64_123 () (_ BitVec 64))
(declare-fun temp64_124 () (_ BitVec 64))
(declare-fun temp64_125 () (_ BitVec 64))
(declare-fun temp64_126 () (_ BitVec 64))
(declare-fun temp64_127 () (_ BitVec 64))
(declare-fun temp64_128 () (_ BitVec 64))
(declare-fun temp64_129 () (_ BitVec 64))
(declare-fun temp64_130 () (_ BitVec 64))
(declare-fun temp64_131 () (_ BitVec 64))
(declare-fun temp64_132 () (_ BitVec 64))
(declare-fun temp64_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp64_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp64_135 () (_ BitVec 64))
(declare-fun temp64_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp64_137 () (_ BitVec 64))
(declare-fun temp64_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp64_139 () (_ BitVec 64))
(declare-fun temp64_140 () (_ BitVec 64))
(declare-fun temp64_141 () (_ BitVec 64))
(declare-fun temp64_142 () (_ BitVec 64))
(declare-fun temp64_143 () (_ BitVec 64))
(declare-fun temp64_144 () (_ BitVec 64))
(declare-fun temp64_145 () (_ BitVec 64))
(declare-fun temp64_146 () (_ BitVec 64))
(declare-fun temp64_147 () (_ BitVec 64))
(declare-fun temp64_148 () (_ BitVec 64))
(declare-fun temp64_149 () (_ BitVec 64))
(declare-fun temp64_150 () (_ BitVec 64))
(declare-fun temp64_151 () (_ BitVec 64))
(declare-fun temp64_152 () (_ BitVec 64))
(declare-fun temp64_153 () (_ BitVec 64))
(declare-fun temp64_154 () (_ BitVec 64))
(declare-fun temp64_156 () (_ BitVec 64))
(declare-fun temp64_157 () (_ BitVec 64))
(declare-fun temp64_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp64_158 () (_ BitVec 64))
(declare-fun temp64_159 () (_ BitVec 64))
(declare-fun temp64_161 () (_ BitVec 64))
(declare-fun temp64_162 () (_ BitVec 64))
(declare-fun temp64_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp64_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp64_164 () (_ BitVec 64))
(declare-fun temp64_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp64_166 () (_ BitVec 64))
(declare-fun temp64_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp64_168 () (_ BitVec 64))
(declare-fun temp64_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp64_170 () (_ BitVec 64))
(declare-fun temp64_171 () (_ BitVec 64))
(declare-fun temp64_172 () (_ BitVec 64))
(declare-fun temp64_173 () (_ BitVec 64))
(declare-fun temp64_174 () (_ BitVec 64))
(declare-fun temp64_175 () (_ BitVec 64))
(declare-fun temp64_176 () (_ BitVec 64))
(declare-fun temp64_177 () (_ BitVec 64))
(declare-fun temp64_178 () (_ BitVec 64))
(declare-fun temp64_179 () (_ BitVec 64))
(declare-fun temp64_180 () (_ BitVec 64))
(declare-fun temp64_181 () (_ BitVec 64))
(declare-fun temp64_182 () (_ BitVec 64))
(declare-fun temp64_183 () (_ BitVec 64))
(declare-fun temp64_184 () (_ BitVec 64))
(declare-fun temp64_185 () (_ BitVec 64))
(declare-fun temp64_186 () (_ BitVec 64))
(declare-fun temp64_187 () (_ BitVec 64))
(declare-fun temp64_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp64_189 () (_ BitVec 64))
(declare-fun temp64_191 () (_ BitVec 64))
(declare-fun temp64_192 () (_ BitVec 64))
(declare-fun temp64_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp64_193 () (_ BitVec 64))
(declare-fun temp64_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp64_195 () (_ BitVec 64))
(declare-fun temp64_196 () (_ BitVec 64))
(declare-fun temp64_197 () (_ BitVec 64))
(declare-fun temp64_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp64_199 () (_ BitVec 64))
(declare-fun temp64_200 () (_ BitVec 64))
(declare-fun temp64_201 () (_ BitVec 64))
(declare-fun temp64_202 () (_ BitVec 64))
(declare-fun temp64_203 () (_ BitVec 64))
(declare-fun temp64_204 () (_ BitVec 64))
(declare-fun temp64_205 () (_ BitVec 64))
(declare-fun temp64_206 () (_ BitVec 64))
(declare-fun temp64_207 () (_ BitVec 64))
(declare-fun temp64_208 () (_ BitVec 64))
(declare-fun temp64_209 () (_ BitVec 64))
(declare-fun temp64_210 () (_ BitVec 64))
(declare-fun temp64_211 () (_ BitVec 64))
(declare-fun temp64_212 () (_ BitVec 64))
(declare-fun temp64_213 () (_ BitVec 64))
(declare-fun temp64_214 () (_ BitVec 64))
(declare-fun temp64_215 () (_ BitVec 64))
(declare-fun temp64_216 () (_ BitVec 64))
(declare-fun temp64_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp64_218 () (_ BitVec 64))
(declare-fun temp64_220 () (_ BitVec 64))
(declare-fun temp64_221 () (_ BitVec 64))
(declare-fun temp64_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp64_222 () (_ BitVec 64))
(declare-fun temp64_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp64_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp64_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp64_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp64_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp64_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp64_229 () (_ BitVec 64))
(declare-fun temp64_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp64_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp64_232 () (_ BitVec 64))
(declare-fun temp64_233 () (_ BitVec 64))
(declare-fun temp64_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp64_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp64_236 () (_ BitVec 64))
(declare-fun temp64_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp64_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp64_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun var5910928 () (_ BitVec 64))
(declare-fun temp64_240 () (_ BitVec 64))
(declare-fun ARGNAME_benchmark_NAMEEND () (_ BitVec 64))
(declare-fun var80421 () (_ BitVec 64))
(declare-fun temp64_241 () (_ BitVec 64))
(declare-fun ARGNAME_deterministic_NAMEEND () (_ BitVec 64))
(declare-fun var80423 () (_ BitVec 64))
(declare-fun temp64_242 () (_ BitVec 64))
(declare-fun ARGNAME_allow_tf32_NAMEEND () (_ BitVec 64))
(declare-fun var80425 () (_ BitVec 64))
(declare-fun temp64_243 () (_ BitVec 64))
(assert (= temp64_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp64_1)))
(assert (= temp64_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp64_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_3 #x0000000000000000))
(assert (= var79869 temp64_3))
(assert (= temp64_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp64_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_5 #x0000000000000000))
(assert (= var79914 temp64_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp64_6 #x0000000000000000))
(assert (= temp64_7 temp64_6))
(assert (= temp64_8 (select ARGNAME_padding_NAMEEND_VAL temp64_7)))
(assert (= temp64_9 #x0000000000000001))
(assert (= temp64_10 temp64_9))
(assert (= temp64_11 (select ARGNAME_padding_NAMEEND_VAL temp64_10)))
(assert (= temp64_12 #x0000000000000002))
(assert (= temp64_13 temp64_12))
(assert (= temp64_14 (select ARGNAME_padding_NAMEEND_VAL temp64_13)))
(assert (= temp64_15 #x0000000000000003))
(assert (= temp64_16 temp64_15))
(assert (= temp64_17 (select ARGNAME_padding_NAMEEND_VAL temp64_16)))
(assert (= temp64_18 #x0000000000000004))
(assert (= temp64_19 temp64_18))
(assert (= temp64_20 (select ARGNAME_padding_NAMEEND_VAL temp64_19)))
(assert (= temp64_21 #x0000000000000005))
(assert (= temp64_22 temp64_21))
(assert (= temp64_23 (select ARGNAME_padding_NAMEEND_VAL temp64_22)))
(assert (= temp64_24 #x0000000000000000))
(assert (= temp64_25 #x0000000000000000))
(assert (= temp64_26 temp64_25))
(assert (= temp64_27 (select ARGNAME_padding_NAMEEND_VAL temp64_26)))
(assert (= temp64_28 #x0000000000000000))
(assert (= temp64_29 #x0000000000000001))
(assert (= temp64_30 temp64_29))
(assert (= temp64_31 (select ARGNAME_padding_NAMEEND_VAL temp64_30)))
(assert (= temp64_32 #x0000000000000000))
(assert (= temp64_33 #x0000000000000002))
(assert (= temp64_34 temp64_33))
(assert (= temp64_35 (select ARGNAME_padding_NAMEEND_VAL temp64_34)))
(assert (= temp64_36 #x0000000000000000))
(assert (= temp64_37 #x0000000000000003))
(assert (= temp64_38 temp64_37))
(assert (= temp64_39 (select ARGNAME_padding_NAMEEND_VAL temp64_38)))
(assert (= temp64_40 #x0000000000000000))
(assert (= temp64_41 #x0000000000000004))
(assert (= temp64_42 temp64_41))
(assert (= temp64_43 (select ARGNAME_padding_NAMEEND_VAL temp64_42)))
(assert (= temp64_44 #x0000000000000000))
(assert (= temp64_45 #x0000000000000005))
(assert (= temp64_46 temp64_45))
(assert (= temp64_47 (select ARGNAME_padding_NAMEEND_VAL temp64_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp64_27 temp64_24)
             (bvslt temp64_31 temp64_28)
             (bvslt temp64_35 temp64_32)
             (bvslt temp64_39 temp64_36)
             (bvslt temp64_43 temp64_40)
             (bvslt temp64_47 temp64_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_48 #x0000000000000000))
(assert (= var1322786 temp64_48))
(assert (= temp64_49 #x0000000000000000))
(assert (= temp64_50 temp64_49))
(assert (= temp64_51 (select ARGNAME_output_padding_NAMEEND_VAL temp64_50)))
(assert (= temp64_52 #x0000000000000001))
(assert (= temp64_53 temp64_52))
(assert (= temp64_54 (select ARGNAME_output_padding_NAMEEND_VAL temp64_53)))
(assert (= temp64_55 #x0000000000000002))
(assert (= temp64_56 temp64_55))
(assert (= temp64_57 (select ARGNAME_output_padding_NAMEEND_VAL temp64_56)))
(assert (= temp64_58 #x0000000000000003))
(assert (= temp64_59 temp64_58))
(assert (= temp64_60 (select ARGNAME_output_padding_NAMEEND_VAL temp64_59)))
(assert (= temp64_61 #x0000000000000004))
(assert (= temp64_62 temp64_61))
(assert (= temp64_63 (select ARGNAME_output_padding_NAMEEND_VAL temp64_62)))
(assert (= temp64_64 #x0000000000000005))
(assert (= temp64_65 temp64_64))
(assert (= temp64_66 (select ARGNAME_output_padding_NAMEEND_VAL temp64_65)))
(assert (= temp64_67 #x0000000000000000))
(assert (= temp64_68 #x0000000000000000))
(assert (= temp64_69 temp64_68))
(assert (= temp64_70 (select ARGNAME_output_padding_NAMEEND_VAL temp64_69)))
(assert (= temp64_71 #x0000000000000000))
(assert (= temp64_72 #x0000000000000001))
(assert (= temp64_73 temp64_72))
(assert (= temp64_74 (select ARGNAME_output_padding_NAMEEND_VAL temp64_73)))
(assert (= temp64_75 #x0000000000000000))
(assert (= temp64_76 #x0000000000000002))
(assert (= temp64_77 temp64_76))
(assert (= temp64_78 (select ARGNAME_output_padding_NAMEEND_VAL temp64_77)))
(assert (= temp64_79 #x0000000000000000))
(assert (= temp64_80 #x0000000000000003))
(assert (= temp64_81 temp64_80))
(assert (= temp64_82 (select ARGNAME_output_padding_NAMEEND_VAL temp64_81)))
(assert (= temp64_83 #x0000000000000000))
(assert (= temp64_84 #x0000000000000004))
(assert (= temp64_85 temp64_84))
(assert (= temp64_86 (select ARGNAME_output_padding_NAMEEND_VAL temp64_85)))
(assert (= temp64_87 #x0000000000000000))
(assert (= temp64_88 #x0000000000000005))
(assert (= temp64_89 temp64_88))
(assert (= temp64_90 (select ARGNAME_output_padding_NAMEEND_VAL temp64_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp64_70 temp64_67)
             (bvslt temp64_74 temp64_71)
             (bvslt temp64_78 temp64_75)
             (bvslt temp64_82 temp64_79)
             (bvslt temp64_86 temp64_83)
             (bvslt temp64_90 temp64_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_91 #x0000000000000000))
(assert (= var1322797 temp64_91))
(assert (= temp64_92 #x0000000000000000))
(assert (= temp64_93 temp64_92))
(assert (= temp64_94 (select ARGNAME_stride_NAMEEND_VAL temp64_93)))
(assert (= temp64_95 #x0000000000000001))
(assert (= temp64_96 temp64_95))
(assert (= temp64_97 (select ARGNAME_stride_NAMEEND_VAL temp64_96)))
(assert (= temp64_98 #x0000000000000002))
(assert (= temp64_99 temp64_98))
(assert (= temp64_100 (select ARGNAME_stride_NAMEEND_VAL temp64_99)))
(assert (= temp64_101 #x0000000000000003))
(assert (= temp64_102 temp64_101))
(assert (= temp64_103 (select ARGNAME_stride_NAMEEND_VAL temp64_102)))
(assert (= temp64_104 #x0000000000000004))
(assert (= temp64_105 temp64_104))
(assert (= temp64_106 (select ARGNAME_stride_NAMEEND_VAL temp64_105)))
(assert (= temp64_107 #x0000000000000005))
(assert (= temp64_108 temp64_107))
(assert (= temp64_109 (select ARGNAME_stride_NAMEEND_VAL temp64_108)))
(assert (= temp64_110 #x0000000000000000))
(assert (= temp64_111 #x0000000000000000))
(assert (= temp64_112 temp64_111))
(assert (= temp64_113 (select ARGNAME_stride_NAMEEND_VAL temp64_112)))
(assert (= temp64_114 #x0000000000000000))
(assert (= temp64_115 #x0000000000000001))
(assert (= temp64_116 temp64_115))
(assert (= temp64_117 (select ARGNAME_stride_NAMEEND_VAL temp64_116)))
(assert (= temp64_118 #x0000000000000000))
(assert (= temp64_119 #x0000000000000002))
(assert (= temp64_120 temp64_119))
(assert (= temp64_121 (select ARGNAME_stride_NAMEEND_VAL temp64_120)))
(assert (= temp64_122 #x0000000000000000))
(assert (= temp64_123 #x0000000000000003))
(assert (= temp64_124 temp64_123))
(assert (= temp64_125 (select ARGNAME_stride_NAMEEND_VAL temp64_124)))
(assert (= temp64_126 #x0000000000000000))
(assert (= temp64_127 #x0000000000000004))
(assert (= temp64_128 temp64_127))
(assert (= temp64_129 (select ARGNAME_stride_NAMEEND_VAL temp64_128)))
(assert (= temp64_130 #x0000000000000000))
(assert (= temp64_131 #x0000000000000005))
(assert (= temp64_132 temp64_131))
(assert (= temp64_133 (select ARGNAME_stride_NAMEEND_VAL temp64_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp64_113 temp64_110)
             (bvsle temp64_117 temp64_114)
             (bvsle temp64_121 temp64_118)
             (bvsle temp64_125 temp64_122)
             (bvsle temp64_129 temp64_126)
             (bvsle temp64_133 temp64_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_134 #x0000000000000000))
(assert (= var1322807 temp64_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_135 #x0000000000000001))
(assert (= var1322819 temp64_135))
(assert (= temp64_136 #x0000000000000000))
(assert (= var1310898 temp64_136))
(assert (= temp64_137 #x0000000000000000))
(assert (= temp64_138 temp64_137))
(assert (= temp64_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp64_138)))
(assert (= temp64_140 #x0000000000000001))
(assert (= temp64_141 temp64_140))
(assert (= temp64_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp64_141)))
(assert (= temp64_143 #x0000000000000002))
(assert (= temp64_144 temp64_143))
(assert (= temp64_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp64_144)))
(assert (= temp64_146 #x0000000000000003))
(assert (= temp64_147 temp64_146))
(assert (= temp64_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp64_147)))
(assert (= temp64_149 #x0000000000000004))
(assert (= temp64_150 temp64_149))
(assert (= temp64_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp64_150)))
(assert (= temp64_152 #x0000000000000005))
(assert (= temp64_153 temp64_152))
(assert (= temp64_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp64_153)))
(assert (= temp64_156 var1310898))
(assert (= temp64_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp64_156)))
(assert (= temp64_155 temp64_157))
(assert (= var1322852
   (ite (bvslt temp64_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_158 #x0000000000000000))
(assert (= var1322852 temp64_158))
(assert (= temp64_159 #x0000000000000000))
(assert (= var1310898 temp64_159))
(assert (= temp64_161 var1310898))
(assert (= temp64_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp64_161)))
(assert (= temp64_160 temp64_162))
(assert (= var1322874 (bvsmod temp64_160 ARGNAME_groups_NAMEEND)))
(assert (= temp64_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp64_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp64_164 #x0000000000000001))
(assert (= var1322875 temp64_164))
(assert (= temp64_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp64_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_166 #x0000000000000001))
(assert (= var1322895 temp64_166))
(assert (= temp64_167 #x0000000000000001))
(assert (= var1311786 temp64_167))
(assert (= temp64_168 #x0000000000000000))
(assert (= temp64_169 temp64_168))
(assert (= temp64_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp64_169)))
(assert (= temp64_171 #x0000000000000001))
(assert (= temp64_172 temp64_171))
(assert (= temp64_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp64_172)))
(assert (= temp64_174 #x0000000000000002))
(assert (= temp64_175 temp64_174))
(assert (= temp64_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp64_175)))
(assert (= temp64_177 #x0000000000000003))
(assert (= temp64_178 temp64_177))
(assert (= temp64_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp64_178)))
(assert (= temp64_180 #x0000000000000004))
(assert (= temp64_181 temp64_180))
(assert (= temp64_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp64_181)))
(assert (= temp64_183 #x0000000000000005))
(assert (= temp64_184 temp64_183))
(assert (= temp64_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp64_184)))
(assert (= temp64_186 #x0000000000000000))
(assert (= temp64_187
   (ite (bvslt var1311786 temp64_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp64_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp64_187)))
(assert (= var1322903 temp64_188))
(assert (bvslt (ite (bvslt var1311786 temp64_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp64_189 #x0000000000000001))
(assert (= var1311786 temp64_189))
(assert (= temp64_191 var1311786))
(assert (= temp64_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp64_191)))
(assert (= temp64_190 temp64_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp64_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp64_193 #x0000000000000001))
(assert (= var1322908 temp64_193))
(assert (= temp64_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp64_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_195 #x0000000000000001))
(assert (= var1322975 temp64_195))
(assert (= temp64_196 #x0000000000000000))
(assert (= var1310898 temp64_196))
(assert (= temp64_197 #x0000000000000000))
(assert (= temp64_198 temp64_197))
(assert (= temp64_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp64_198)))
(assert (= temp64_200 #x0000000000000001))
(assert (= temp64_201 temp64_200))
(assert (= temp64_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp64_201)))
(assert (= temp64_203 #x0000000000000002))
(assert (= temp64_204 temp64_203))
(assert (= temp64_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp64_204)))
(assert (= temp64_206 #x0000000000000003))
(assert (= temp64_207 temp64_206))
(assert (= temp64_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp64_207)))
(assert (= temp64_209 #x0000000000000004))
(assert (= temp64_210 temp64_209))
(assert (= temp64_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp64_210)))
(assert (= temp64_212 #x0000000000000005))
(assert (= temp64_213 temp64_212))
(assert (= temp64_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp64_213)))
(assert (= temp64_215 #x0000000000000000))
(assert (= temp64_216
   (ite (bvslt var1310898 temp64_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp64_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp64_216)))
(assert (= var1322977 temp64_217))
(assert (bvslt (ite (bvslt var1310898 temp64_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp64_218 #x0000000000000000))
(assert (= var1310898 temp64_218))
(assert (= temp64_220 var1310898))
(assert (= temp64_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp64_220)))
(assert (= temp64_219 temp64_221))
(assert (= var1322980
   (ite (= var1322977 temp64_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp64_222 #x0000000000000001))
(assert (= var1322980 temp64_222))
(assert (= temp64_223 #x0000000000000002))
(assert (= var1848169 temp64_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp64_225 #x0000000000000001))
(assert (= var1323065 temp64_225))
(assert (= temp64_226 #x0000000000000001))
(assert (= var3486735 temp64_226))
(assert (= temp64_227 #x0000000000000001))
(assert (= var3814415 temp64_227))
(assert (= temp64_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp64_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_229 #x0000000000000001))
(assert (= var79986 temp64_229))
(assert (= temp64_230 #x0000000000000001))
(assert (= var80116 temp64_230))
(assert (= var4796905 var80116))
(assert (= temp64_231 #x0000000000000000))
(assert (= var4784306 temp64_231))
(assert (= temp64_232 #x0000000000000000))
(assert (= temp64_233
   (ite (bvslt var4784306 temp64_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp64_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp64_233)))
(assert (= var4796924 temp64_234))
(assert (bvslt (ite (bvslt var4784306 temp64_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp64_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp64_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp64_236 #x0000000000000001))
(assert (= var4796925 temp64_236))
(assert (= temp64_237 #x0000000000000000))
(assert (= var4996927 temp64_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp64_238 #x0000000000000002))
(assert (= var5125763 temp64_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_239 #x0000000000000000))
(assert (= var5191324 temp64_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= var5910928 var80129))
(assert (= temp64_240 #x0000000000000000))
(assert (= var80421
   (ite (distinct ARGNAME_benchmark_NAMEEND temp64_240)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_241 #x0000000000000000))
(assert (= var80423
   (ite (distinct ARGNAME_deterministic_NAMEEND temp64_241)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_242 #x0000000000000000))
(assert (= var80425
   (ite (distinct ARGNAME_allow_tf32_NAMEEND temp64_242)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp64_243 #x0000000000000001))
(assert (= var79986 temp64_243))
(model-add temp64_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp64_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp64_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






