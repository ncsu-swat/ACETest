(declare-fun temp800_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp800_2 () (_ BitVec 64))
(declare-fun temp800_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp800_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp800_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp800_6 () (_ BitVec 64))
(declare-fun temp800_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_8 () (_ BitVec 64))
(declare-fun temp800_9 () (_ BitVec 64))
(declare-fun temp800_10 () (_ BitVec 64))
(declare-fun temp800_11 () (_ BitVec 64))
(declare-fun temp800_12 () (_ BitVec 64))
(declare-fun temp800_13 () (_ BitVec 64))
(declare-fun temp800_14 () (_ BitVec 64))
(declare-fun temp800_15 () (_ BitVec 64))
(declare-fun temp800_16 () (_ BitVec 64))
(declare-fun temp800_17 () (_ BitVec 64))
(declare-fun temp800_18 () (_ BitVec 64))
(declare-fun temp800_19 () (_ BitVec 64))
(declare-fun temp800_20 () (_ BitVec 64))
(declare-fun temp800_21 () (_ BitVec 64))
(declare-fun temp800_22 () (_ BitVec 64))
(declare-fun temp800_23 () (_ BitVec 64))
(declare-fun temp800_24 () (_ BitVec 64))
(declare-fun temp800_25 () (_ BitVec 64))
(declare-fun temp800_26 () (_ BitVec 64))
(declare-fun temp800_27 () (_ BitVec 64))
(declare-fun temp800_28 () (_ BitVec 64))
(declare-fun temp800_29 () (_ BitVec 64))
(declare-fun temp800_30 () (_ BitVec 64))
(declare-fun temp800_31 () (_ BitVec 64))
(declare-fun temp800_32 () (_ BitVec 64))
(declare-fun temp800_33 () (_ BitVec 64))
(declare-fun temp800_34 () (_ BitVec 64))
(declare-fun temp800_35 () (_ BitVec 64))
(declare-fun temp800_36 () (_ BitVec 64))
(declare-fun temp800_37 () (_ BitVec 64))
(declare-fun temp800_38 () (_ BitVec 64))
(declare-fun temp800_39 () (_ BitVec 64))
(declare-fun temp800_40 () (_ BitVec 64))
(declare-fun temp800_41 () (_ BitVec 64))
(declare-fun temp800_42 () (_ BitVec 64))
(declare-fun temp800_43 () (_ BitVec 64))
(declare-fun temp800_44 () (_ BitVec 64))
(declare-fun temp800_45 () (_ BitVec 64))
(declare-fun temp800_46 () (_ BitVec 64))
(declare-fun temp800_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp800_48 () (_ BitVec 64))
(declare-fun temp800_49 () (_ BitVec 64))
(declare-fun temp800_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_51 () (_ BitVec 64))
(declare-fun temp800_52 () (_ BitVec 64))
(declare-fun temp800_53 () (_ BitVec 64))
(declare-fun temp800_54 () (_ BitVec 64))
(declare-fun temp800_55 () (_ BitVec 64))
(declare-fun temp800_56 () (_ BitVec 64))
(declare-fun temp800_57 () (_ BitVec 64))
(declare-fun temp800_58 () (_ BitVec 64))
(declare-fun temp800_59 () (_ BitVec 64))
(declare-fun temp800_60 () (_ BitVec 64))
(declare-fun temp800_61 () (_ BitVec 64))
(declare-fun temp800_62 () (_ BitVec 64))
(declare-fun temp800_63 () (_ BitVec 64))
(declare-fun temp800_64 () (_ BitVec 64))
(declare-fun temp800_65 () (_ BitVec 64))
(declare-fun temp800_66 () (_ BitVec 64))
(declare-fun temp800_67 () (_ BitVec 64))
(declare-fun temp800_68 () (_ BitVec 64))
(declare-fun temp800_69 () (_ BitVec 64))
(declare-fun temp800_70 () (_ BitVec 64))
(declare-fun temp800_71 () (_ BitVec 64))
(declare-fun temp800_72 () (_ BitVec 64))
(declare-fun temp800_73 () (_ BitVec 64))
(declare-fun temp800_74 () (_ BitVec 64))
(declare-fun temp800_75 () (_ BitVec 64))
(declare-fun temp800_76 () (_ BitVec 64))
(declare-fun temp800_77 () (_ BitVec 64))
(declare-fun temp800_78 () (_ BitVec 64))
(declare-fun temp800_79 () (_ BitVec 64))
(declare-fun temp800_80 () (_ BitVec 64))
(declare-fun temp800_81 () (_ BitVec 64))
(declare-fun temp800_82 () (_ BitVec 64))
(declare-fun temp800_83 () (_ BitVec 64))
(declare-fun temp800_84 () (_ BitVec 64))
(declare-fun temp800_85 () (_ BitVec 64))
(declare-fun temp800_86 () (_ BitVec 64))
(declare-fun temp800_87 () (_ BitVec 64))
(declare-fun temp800_88 () (_ BitVec 64))
(declare-fun temp800_89 () (_ BitVec 64))
(declare-fun temp800_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp800_91 () (_ BitVec 64))
(declare-fun temp800_92 () (_ BitVec 64))
(declare-fun temp800_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_94 () (_ BitVec 64))
(declare-fun temp800_95 () (_ BitVec 64))
(declare-fun temp800_96 () (_ BitVec 64))
(declare-fun temp800_97 () (_ BitVec 64))
(declare-fun temp800_98 () (_ BitVec 64))
(declare-fun temp800_99 () (_ BitVec 64))
(declare-fun temp800_100 () (_ BitVec 64))
(declare-fun temp800_101 () (_ BitVec 64))
(declare-fun temp800_102 () (_ BitVec 64))
(declare-fun temp800_103 () (_ BitVec 64))
(declare-fun temp800_104 () (_ BitVec 64))
(declare-fun temp800_105 () (_ BitVec 64))
(declare-fun temp800_106 () (_ BitVec 64))
(declare-fun temp800_107 () (_ BitVec 64))
(declare-fun temp800_108 () (_ BitVec 64))
(declare-fun temp800_109 () (_ BitVec 64))
(declare-fun temp800_110 () (_ BitVec 64))
(declare-fun temp800_111 () (_ BitVec 64))
(declare-fun temp800_112 () (_ BitVec 64))
(declare-fun temp800_113 () (_ BitVec 64))
(declare-fun temp800_114 () (_ BitVec 64))
(declare-fun temp800_115 () (_ BitVec 64))
(declare-fun temp800_116 () (_ BitVec 64))
(declare-fun temp800_117 () (_ BitVec 64))
(declare-fun temp800_118 () (_ BitVec 64))
(declare-fun temp800_119 () (_ BitVec 64))
(declare-fun temp800_120 () (_ BitVec 64))
(declare-fun temp800_121 () (_ BitVec 64))
(declare-fun temp800_122 () (_ BitVec 64))
(declare-fun temp800_123 () (_ BitVec 64))
(declare-fun temp800_124 () (_ BitVec 64))
(declare-fun temp800_125 () (_ BitVec 64))
(declare-fun temp800_126 () (_ BitVec 64))
(declare-fun temp800_127 () (_ BitVec 64))
(declare-fun temp800_128 () (_ BitVec 64))
(declare-fun temp800_129 () (_ BitVec 64))
(declare-fun temp800_130 () (_ BitVec 64))
(declare-fun temp800_131 () (_ BitVec 64))
(declare-fun temp800_132 () (_ BitVec 64))
(declare-fun temp800_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp800_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp800_135 () (_ BitVec 64))
(declare-fun temp800_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp800_137 () (_ BitVec 64))
(declare-fun temp800_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_139 () (_ BitVec 64))
(declare-fun temp800_140 () (_ BitVec 64))
(declare-fun temp800_141 () (_ BitVec 64))
(declare-fun temp800_142 () (_ BitVec 64))
(declare-fun temp800_143 () (_ BitVec 64))
(declare-fun temp800_144 () (_ BitVec 64))
(declare-fun temp800_145 () (_ BitVec 64))
(declare-fun temp800_146 () (_ BitVec 64))
(declare-fun temp800_147 () (_ BitVec 64))
(declare-fun temp800_148 () (_ BitVec 64))
(declare-fun temp800_149 () (_ BitVec 64))
(declare-fun temp800_150 () (_ BitVec 64))
(declare-fun temp800_151 () (_ BitVec 64))
(declare-fun temp800_152 () (_ BitVec 64))
(declare-fun temp800_153 () (_ BitVec 64))
(declare-fun temp800_154 () (_ BitVec 64))
(declare-fun temp800_156 () (_ BitVec 64))
(declare-fun temp800_157 () (_ BitVec 64))
(declare-fun temp800_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp800_158 () (_ BitVec 64))
(declare-fun temp800_159 () (_ BitVec 64))
(declare-fun temp800_161 () (_ BitVec 64))
(declare-fun temp800_162 () (_ BitVec 64))
(declare-fun temp800_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp800_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp800_164 () (_ BitVec 64))
(declare-fun temp800_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp800_166 () (_ BitVec 64))
(declare-fun temp800_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp800_168 () (_ BitVec 64))
(declare-fun temp800_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_170 () (_ BitVec 64))
(declare-fun temp800_171 () (_ BitVec 64))
(declare-fun temp800_172 () (_ BitVec 64))
(declare-fun temp800_173 () (_ BitVec 64))
(declare-fun temp800_174 () (_ BitVec 64))
(declare-fun temp800_175 () (_ BitVec 64))
(declare-fun temp800_176 () (_ BitVec 64))
(declare-fun temp800_177 () (_ BitVec 64))
(declare-fun temp800_178 () (_ BitVec 64))
(declare-fun temp800_179 () (_ BitVec 64))
(declare-fun temp800_180 () (_ BitVec 64))
(declare-fun temp800_181 () (_ BitVec 64))
(declare-fun temp800_182 () (_ BitVec 64))
(declare-fun temp800_183 () (_ BitVec 64))
(declare-fun temp800_184 () (_ BitVec 64))
(declare-fun temp800_185 () (_ BitVec 64))
(declare-fun temp800_186 () (_ BitVec 64))
(declare-fun temp800_187 () (_ BitVec 64))
(declare-fun temp800_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp800_189 () (_ BitVec 64))
(declare-fun temp800_191 () (_ BitVec 64))
(declare-fun temp800_192 () (_ BitVec 64))
(declare-fun temp800_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp800_193 () (_ BitVec 64))
(declare-fun temp800_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp800_195 () (_ BitVec 64))
(declare-fun temp800_196 () (_ BitVec 64))
(declare-fun temp800_197 () (_ BitVec 64))
(declare-fun temp800_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_199 () (_ BitVec 64))
(declare-fun temp800_200 () (_ BitVec 64))
(declare-fun temp800_201 () (_ BitVec 64))
(declare-fun temp800_202 () (_ BitVec 64))
(declare-fun temp800_203 () (_ BitVec 64))
(declare-fun temp800_204 () (_ BitVec 64))
(declare-fun temp800_205 () (_ BitVec 64))
(declare-fun temp800_206 () (_ BitVec 64))
(declare-fun temp800_207 () (_ BitVec 64))
(declare-fun temp800_208 () (_ BitVec 64))
(declare-fun temp800_209 () (_ BitVec 64))
(declare-fun temp800_210 () (_ BitVec 64))
(declare-fun temp800_211 () (_ BitVec 64))
(declare-fun temp800_212 () (_ BitVec 64))
(declare-fun temp800_213 () (_ BitVec 64))
(declare-fun temp800_214 () (_ BitVec 64))
(declare-fun temp800_215 () (_ BitVec 64))
(declare-fun temp800_216 () (_ BitVec 64))
(declare-fun temp800_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp800_218 () (_ BitVec 64))
(declare-fun temp800_220 () (_ BitVec 64))
(declare-fun temp800_221 () (_ BitVec 64))
(declare-fun temp800_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp800_222 () (_ BitVec 64))
(declare-fun temp800_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp800_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp800_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp800_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp800_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp800_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp800_229 () (_ BitVec 64))
(declare-fun temp800_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp800_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp800_232 () (_ BitVec 64))
(declare-fun temp800_233 () (_ BitVec 64))
(declare-fun temp800_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp800_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp800_236 () (_ BitVec 64))
(declare-fun temp800_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp800_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp800_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun temp800_241 () (_ BitVec 64))
(declare-fun temp800_240 () (_ BitVec 64))
(declare-fun temp800_242 () (_ BitVec 64))
(declare-fun var66602 () (_ BitVec 64))
(declare-fun temp800_243 () (_ BitVec 64))
(declare-fun temp800_244 () (_ BitVec 64))
(declare-fun temp800_245 () (_ BitVec 64))
(declare-fun var80523 () (_ BitVec 64))
(declare-fun temp800_246 () (_ BitVec 64))
(declare-fun var80524 () (_ BitVec 64))
(declare-fun temp800_247 () (_ BitVec 64))
(declare-fun temp800_248 () (_ BitVec 64))
(assert (= temp800_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp800_1)))
(assert (= temp800_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp800_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_3 #x0000000000000000))
(assert (= var79869 temp800_3))
(assert (= temp800_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp800_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_5 #x0000000000000000))
(assert (= var79914 temp800_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp800_6 #x0000000000000000))
(assert (= temp800_7 temp800_6))
(assert (= temp800_8 (select ARGNAME_padding_NAMEEND_VAL temp800_7)))
(assert (= temp800_9 #x0000000000000001))
(assert (= temp800_10 temp800_9))
(assert (= temp800_11 (select ARGNAME_padding_NAMEEND_VAL temp800_10)))
(assert (= temp800_12 #x0000000000000002))
(assert (= temp800_13 temp800_12))
(assert (= temp800_14 (select ARGNAME_padding_NAMEEND_VAL temp800_13)))
(assert (= temp800_15 #x0000000000000003))
(assert (= temp800_16 temp800_15))
(assert (= temp800_17 (select ARGNAME_padding_NAMEEND_VAL temp800_16)))
(assert (= temp800_18 #x0000000000000004))
(assert (= temp800_19 temp800_18))
(assert (= temp800_20 (select ARGNAME_padding_NAMEEND_VAL temp800_19)))
(assert (= temp800_21 #x0000000000000005))
(assert (= temp800_22 temp800_21))
(assert (= temp800_23 (select ARGNAME_padding_NAMEEND_VAL temp800_22)))
(assert (= temp800_24 #x0000000000000000))
(assert (= temp800_25 #x0000000000000000))
(assert (= temp800_26 temp800_25))
(assert (= temp800_27 (select ARGNAME_padding_NAMEEND_VAL temp800_26)))
(assert (= temp800_28 #x0000000000000000))
(assert (= temp800_29 #x0000000000000001))
(assert (= temp800_30 temp800_29))
(assert (= temp800_31 (select ARGNAME_padding_NAMEEND_VAL temp800_30)))
(assert (= temp800_32 #x0000000000000000))
(assert (= temp800_33 #x0000000000000002))
(assert (= temp800_34 temp800_33))
(assert (= temp800_35 (select ARGNAME_padding_NAMEEND_VAL temp800_34)))
(assert (= temp800_36 #x0000000000000000))
(assert (= temp800_37 #x0000000000000003))
(assert (= temp800_38 temp800_37))
(assert (= temp800_39 (select ARGNAME_padding_NAMEEND_VAL temp800_38)))
(assert (= temp800_40 #x0000000000000000))
(assert (= temp800_41 #x0000000000000004))
(assert (= temp800_42 temp800_41))
(assert (= temp800_43 (select ARGNAME_padding_NAMEEND_VAL temp800_42)))
(assert (= temp800_44 #x0000000000000000))
(assert (= temp800_45 #x0000000000000005))
(assert (= temp800_46 temp800_45))
(assert (= temp800_47 (select ARGNAME_padding_NAMEEND_VAL temp800_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp800_27 temp800_24)
             (bvslt temp800_31 temp800_28)
             (bvslt temp800_35 temp800_32)
             (bvslt temp800_39 temp800_36)
             (bvslt temp800_43 temp800_40)
             (bvslt temp800_47 temp800_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_48 #x0000000000000000))
(assert (= var1322786 temp800_48))
(assert (= temp800_49 #x0000000000000000))
(assert (= temp800_50 temp800_49))
(assert (= temp800_51 (select ARGNAME_output_padding_NAMEEND_VAL temp800_50)))
(assert (= temp800_52 #x0000000000000001))
(assert (= temp800_53 temp800_52))
(assert (= temp800_54 (select ARGNAME_output_padding_NAMEEND_VAL temp800_53)))
(assert (= temp800_55 #x0000000000000002))
(assert (= temp800_56 temp800_55))
(assert (= temp800_57 (select ARGNAME_output_padding_NAMEEND_VAL temp800_56)))
(assert (= temp800_58 #x0000000000000003))
(assert (= temp800_59 temp800_58))
(assert (= temp800_60 (select ARGNAME_output_padding_NAMEEND_VAL temp800_59)))
(assert (= temp800_61 #x0000000000000004))
(assert (= temp800_62 temp800_61))
(assert (= temp800_63 (select ARGNAME_output_padding_NAMEEND_VAL temp800_62)))
(assert (= temp800_64 #x0000000000000005))
(assert (= temp800_65 temp800_64))
(assert (= temp800_66 (select ARGNAME_output_padding_NAMEEND_VAL temp800_65)))
(assert (= temp800_67 #x0000000000000000))
(assert (= temp800_68 #x0000000000000000))
(assert (= temp800_69 temp800_68))
(assert (= temp800_70 (select ARGNAME_output_padding_NAMEEND_VAL temp800_69)))
(assert (= temp800_71 #x0000000000000000))
(assert (= temp800_72 #x0000000000000001))
(assert (= temp800_73 temp800_72))
(assert (= temp800_74 (select ARGNAME_output_padding_NAMEEND_VAL temp800_73)))
(assert (= temp800_75 #x0000000000000000))
(assert (= temp800_76 #x0000000000000002))
(assert (= temp800_77 temp800_76))
(assert (= temp800_78 (select ARGNAME_output_padding_NAMEEND_VAL temp800_77)))
(assert (= temp800_79 #x0000000000000000))
(assert (= temp800_80 #x0000000000000003))
(assert (= temp800_81 temp800_80))
(assert (= temp800_82 (select ARGNAME_output_padding_NAMEEND_VAL temp800_81)))
(assert (= temp800_83 #x0000000000000000))
(assert (= temp800_84 #x0000000000000004))
(assert (= temp800_85 temp800_84))
(assert (= temp800_86 (select ARGNAME_output_padding_NAMEEND_VAL temp800_85)))
(assert (= temp800_87 #x0000000000000000))
(assert (= temp800_88 #x0000000000000005))
(assert (= temp800_89 temp800_88))
(assert (= temp800_90 (select ARGNAME_output_padding_NAMEEND_VAL temp800_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp800_70 temp800_67)
             (bvslt temp800_74 temp800_71)
             (bvslt temp800_78 temp800_75)
             (bvslt temp800_82 temp800_79)
             (bvslt temp800_86 temp800_83)
             (bvslt temp800_90 temp800_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_91 #x0000000000000000))
(assert (= var1322797 temp800_91))
(assert (= temp800_92 #x0000000000000000))
(assert (= temp800_93 temp800_92))
(assert (= temp800_94 (select ARGNAME_stride_NAMEEND_VAL temp800_93)))
(assert (= temp800_95 #x0000000000000001))
(assert (= temp800_96 temp800_95))
(assert (= temp800_97 (select ARGNAME_stride_NAMEEND_VAL temp800_96)))
(assert (= temp800_98 #x0000000000000002))
(assert (= temp800_99 temp800_98))
(assert (= temp800_100 (select ARGNAME_stride_NAMEEND_VAL temp800_99)))
(assert (= temp800_101 #x0000000000000003))
(assert (= temp800_102 temp800_101))
(assert (= temp800_103 (select ARGNAME_stride_NAMEEND_VAL temp800_102)))
(assert (= temp800_104 #x0000000000000004))
(assert (= temp800_105 temp800_104))
(assert (= temp800_106 (select ARGNAME_stride_NAMEEND_VAL temp800_105)))
(assert (= temp800_107 #x0000000000000005))
(assert (= temp800_108 temp800_107))
(assert (= temp800_109 (select ARGNAME_stride_NAMEEND_VAL temp800_108)))
(assert (= temp800_110 #x0000000000000000))
(assert (= temp800_111 #x0000000000000000))
(assert (= temp800_112 temp800_111))
(assert (= temp800_113 (select ARGNAME_stride_NAMEEND_VAL temp800_112)))
(assert (= temp800_114 #x0000000000000000))
(assert (= temp800_115 #x0000000000000001))
(assert (= temp800_116 temp800_115))
(assert (= temp800_117 (select ARGNAME_stride_NAMEEND_VAL temp800_116)))
(assert (= temp800_118 #x0000000000000000))
(assert (= temp800_119 #x0000000000000002))
(assert (= temp800_120 temp800_119))
(assert (= temp800_121 (select ARGNAME_stride_NAMEEND_VAL temp800_120)))
(assert (= temp800_122 #x0000000000000000))
(assert (= temp800_123 #x0000000000000003))
(assert (= temp800_124 temp800_123))
(assert (= temp800_125 (select ARGNAME_stride_NAMEEND_VAL temp800_124)))
(assert (= temp800_126 #x0000000000000000))
(assert (= temp800_127 #x0000000000000004))
(assert (= temp800_128 temp800_127))
(assert (= temp800_129 (select ARGNAME_stride_NAMEEND_VAL temp800_128)))
(assert (= temp800_130 #x0000000000000000))
(assert (= temp800_131 #x0000000000000005))
(assert (= temp800_132 temp800_131))
(assert (= temp800_133 (select ARGNAME_stride_NAMEEND_VAL temp800_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp800_113 temp800_110)
             (bvsle temp800_117 temp800_114)
             (bvsle temp800_121 temp800_118)
             (bvsle temp800_125 temp800_122)
             (bvsle temp800_129 temp800_126)
             (bvsle temp800_133 temp800_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_134 #x0000000000000000))
(assert (= var1322807 temp800_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_135 #x0000000000000001))
(assert (= var1322819 temp800_135))
(assert (= temp800_136 #x0000000000000000))
(assert (= var1310898 temp800_136))
(assert (= temp800_137 #x0000000000000000))
(assert (= temp800_138 temp800_137))
(assert (= temp800_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_138)))
(assert (= temp800_140 #x0000000000000001))
(assert (= temp800_141 temp800_140))
(assert (= temp800_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_141)))
(assert (= temp800_143 #x0000000000000002))
(assert (= temp800_144 temp800_143))
(assert (= temp800_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_144)))
(assert (= temp800_146 #x0000000000000003))
(assert (= temp800_147 temp800_146))
(assert (= temp800_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_147)))
(assert (= temp800_149 #x0000000000000004))
(assert (= temp800_150 temp800_149))
(assert (= temp800_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_150)))
(assert (= temp800_152 #x0000000000000005))
(assert (= temp800_153 temp800_152))
(assert (= temp800_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_153)))
(assert (= temp800_156 var1310898))
(assert (= temp800_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_156)))
(assert (= temp800_155 temp800_157))
(assert (= var1322852
   (ite (bvslt temp800_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_158 #x0000000000000000))
(assert (= var1322852 temp800_158))
(assert (= temp800_159 #x0000000000000000))
(assert (= var1310898 temp800_159))
(assert (= temp800_161 var1310898))
(assert (= temp800_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_161)))
(assert (= temp800_160 temp800_162))
(assert (= var1322874 (bvsmod temp800_160 ARGNAME_groups_NAMEEND)))
(assert (= temp800_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp800_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp800_164 #x0000000000000001))
(assert (= var1322875 temp800_164))
(assert (= temp800_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp800_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_166 #x0000000000000001))
(assert (= var1322895 temp800_166))
(assert (= temp800_167 #x0000000000000001))
(assert (= var1311786 temp800_167))
(assert (= temp800_168 #x0000000000000000))
(assert (= temp800_169 temp800_168))
(assert (= temp800_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_169)))
(assert (= temp800_171 #x0000000000000001))
(assert (= temp800_172 temp800_171))
(assert (= temp800_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_172)))
(assert (= temp800_174 #x0000000000000002))
(assert (= temp800_175 temp800_174))
(assert (= temp800_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_175)))
(assert (= temp800_177 #x0000000000000003))
(assert (= temp800_178 temp800_177))
(assert (= temp800_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_178)))
(assert (= temp800_180 #x0000000000000004))
(assert (= temp800_181 temp800_180))
(assert (= temp800_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_181)))
(assert (= temp800_183 #x0000000000000005))
(assert (= temp800_184 temp800_183))
(assert (= temp800_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_184)))
(assert (= temp800_186 #x0000000000000000))
(assert (= temp800_187
   (ite (bvslt var1311786 temp800_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp800_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_187)))
(assert (= var1322903 temp800_188))
(assert (bvslt (ite (bvslt var1311786 temp800_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp800_189 #x0000000000000001))
(assert (= var1311786 temp800_189))
(assert (= temp800_191 var1311786))
(assert (= temp800_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_191)))
(assert (= temp800_190 temp800_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp800_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp800_193 #x0000000000000001))
(assert (= var1322908 temp800_193))
(assert (= temp800_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp800_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_195 #x0000000000000001))
(assert (= var1322975 temp800_195))
(assert (= temp800_196 #x0000000000000000))
(assert (= var1310898 temp800_196))
(assert (= temp800_197 #x0000000000000000))
(assert (= temp800_198 temp800_197))
(assert (= temp800_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp800_198)))
(assert (= temp800_200 #x0000000000000001))
(assert (= temp800_201 temp800_200))
(assert (= temp800_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp800_201)))
(assert (= temp800_203 #x0000000000000002))
(assert (= temp800_204 temp800_203))
(assert (= temp800_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp800_204)))
(assert (= temp800_206 #x0000000000000003))
(assert (= temp800_207 temp800_206))
(assert (= temp800_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp800_207)))
(assert (= temp800_209 #x0000000000000004))
(assert (= temp800_210 temp800_209))
(assert (= temp800_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp800_210)))
(assert (= temp800_212 #x0000000000000005))
(assert (= temp800_213 temp800_212))
(assert (= temp800_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp800_213)))
(assert (= temp800_215 #x0000000000000000))
(assert (= temp800_216
   (ite (bvslt var1310898 temp800_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp800_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp800_216)))
(assert (= var1322977 temp800_217))
(assert (bvslt (ite (bvslt var1310898 temp800_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp800_218 #x0000000000000000))
(assert (= var1310898 temp800_218))
(assert (= temp800_220 var1310898))
(assert (= temp800_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_220)))
(assert (= temp800_219 temp800_221))
(assert (= var1322980
   (ite (= var1322977 temp800_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp800_222 #x0000000000000001))
(assert (= var1322980 temp800_222))
(assert (= temp800_223 #x0000000000000002))
(assert (= var1848169 temp800_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp800_225 #x0000000000000001))
(assert (= var1323065 temp800_225))
(assert (= temp800_226 #x0000000000000001))
(assert (= var3486735 temp800_226))
(assert (= temp800_227 #x0000000000000001))
(assert (= var3814415 temp800_227))
(assert (= temp800_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp800_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_229 #x0000000000000001))
(assert (= var79986 temp800_229))
(assert (= temp800_230 #x0000000000000001))
(assert (= var80116 temp800_230))
(assert (= var4796905 var80116))
(assert (= temp800_231 #x0000000000000000))
(assert (= var4784306 temp800_231))
(assert (= temp800_232 #x0000000000000000))
(assert (= temp800_233
   (ite (bvslt var4784306 temp800_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp800_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_233)))
(assert (= var4796924 temp800_234))
(assert (bvslt (ite (bvslt var4784306 temp800_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp800_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp800_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp800_236 #x0000000000000001))
(assert (= var4796925 temp800_236))
(assert (= temp800_237 #x0000000000000000))
(assert (= var4996927 temp800_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp800_238 #x0000000000000002))
(assert (= var5125763 temp800_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_239 #x0000000000000000))
(assert (= var5191324 temp800_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= temp800_241 #xffffffffffffffff))
(assert (= temp800_240 temp800_241))
(assert (= temp800_242 #x0000000000000001))
(assert (= var66602 temp800_242))
(assert (= temp800_243 #x0000000000000000))
(assert (= temp800_244
   (ite (bvslt var66602 temp800_243)
        (bvadd ARGNAME_input_NAMEEND_DIM var66602)
        var66602)))
(assert (= temp800_245 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_244)))
(assert (= var80523 temp800_245))
(assert (bvslt (ite (bvslt var66602 temp800_243)
            (bvadd ARGNAME_input_NAMEEND_DIM var66602)
            var66602)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp800_246 #x0000000000000000))
(assert (= var80524
   (ite (= var80523 temp800_246) #x0000000000000001 #x0000000000000000)))
(assert (= temp800_247 #x0000000000000000))
(assert (= var80524 temp800_247))
(assert (= temp800_248 #x0000000000000001))
(assert (= var79986 temp800_248))
(model-add temp800_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp800_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp800_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






