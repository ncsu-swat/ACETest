(declare-fun temp141_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp141_2 () (_ BitVec 64))
(declare-fun temp141_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp141_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp141_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp141_6 () (_ BitVec 64))
(declare-fun temp141_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp141_8 () (_ BitVec 64))
(declare-fun temp141_9 () (_ BitVec 64))
(declare-fun temp141_10 () (_ BitVec 64))
(declare-fun temp141_11 () (_ BitVec 64))
(declare-fun temp141_12 () (_ BitVec 64))
(declare-fun temp141_13 () (_ BitVec 64))
(declare-fun temp141_14 () (_ BitVec 64))
(declare-fun temp141_15 () (_ BitVec 64))
(declare-fun temp141_16 () (_ BitVec 64))
(declare-fun temp141_17 () (_ BitVec 64))
(declare-fun temp141_18 () (_ BitVec 64))
(declare-fun temp141_19 () (_ BitVec 64))
(declare-fun temp141_20 () (_ BitVec 64))
(declare-fun temp141_21 () (_ BitVec 64))
(declare-fun temp141_22 () (_ BitVec 64))
(declare-fun temp141_23 () (_ BitVec 64))
(declare-fun temp141_24 () (_ BitVec 64))
(declare-fun temp141_25 () (_ BitVec 64))
(declare-fun temp141_26 () (_ BitVec 64))
(declare-fun temp141_27 () (_ BitVec 64))
(declare-fun temp141_28 () (_ BitVec 64))
(declare-fun temp141_29 () (_ BitVec 64))
(declare-fun temp141_30 () (_ BitVec 64))
(declare-fun temp141_31 () (_ BitVec 64))
(declare-fun temp141_32 () (_ BitVec 64))
(declare-fun temp141_33 () (_ BitVec 64))
(declare-fun temp141_34 () (_ BitVec 64))
(declare-fun temp141_35 () (_ BitVec 64))
(declare-fun temp141_36 () (_ BitVec 64))
(declare-fun temp141_37 () (_ BitVec 64))
(declare-fun temp141_38 () (_ BitVec 64))
(declare-fun temp141_39 () (_ BitVec 64))
(declare-fun temp141_40 () (_ BitVec 64))
(declare-fun temp141_41 () (_ BitVec 64))
(declare-fun temp141_42 () (_ BitVec 64))
(declare-fun temp141_43 () (_ BitVec 64))
(declare-fun temp141_44 () (_ BitVec 64))
(declare-fun temp141_45 () (_ BitVec 64))
(declare-fun temp141_46 () (_ BitVec 64))
(declare-fun temp141_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp141_48 () (_ BitVec 64))
(declare-fun temp141_49 () (_ BitVec 64))
(declare-fun temp141_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp141_51 () (_ BitVec 64))
(declare-fun temp141_52 () (_ BitVec 64))
(declare-fun temp141_53 () (_ BitVec 64))
(declare-fun temp141_54 () (_ BitVec 64))
(declare-fun temp141_55 () (_ BitVec 64))
(declare-fun temp141_56 () (_ BitVec 64))
(declare-fun temp141_57 () (_ BitVec 64))
(declare-fun temp141_58 () (_ BitVec 64))
(declare-fun temp141_59 () (_ BitVec 64))
(declare-fun temp141_60 () (_ BitVec 64))
(declare-fun temp141_61 () (_ BitVec 64))
(declare-fun temp141_62 () (_ BitVec 64))
(declare-fun temp141_63 () (_ BitVec 64))
(declare-fun temp141_64 () (_ BitVec 64))
(declare-fun temp141_65 () (_ BitVec 64))
(declare-fun temp141_66 () (_ BitVec 64))
(declare-fun temp141_67 () (_ BitVec 64))
(declare-fun temp141_68 () (_ BitVec 64))
(declare-fun temp141_69 () (_ BitVec 64))
(declare-fun temp141_70 () (_ BitVec 64))
(declare-fun temp141_71 () (_ BitVec 64))
(declare-fun temp141_72 () (_ BitVec 64))
(declare-fun temp141_73 () (_ BitVec 64))
(declare-fun temp141_74 () (_ BitVec 64))
(declare-fun temp141_75 () (_ BitVec 64))
(declare-fun temp141_76 () (_ BitVec 64))
(declare-fun temp141_77 () (_ BitVec 64))
(declare-fun temp141_78 () (_ BitVec 64))
(declare-fun temp141_79 () (_ BitVec 64))
(declare-fun temp141_80 () (_ BitVec 64))
(declare-fun temp141_81 () (_ BitVec 64))
(declare-fun temp141_82 () (_ BitVec 64))
(declare-fun temp141_83 () (_ BitVec 64))
(declare-fun temp141_84 () (_ BitVec 64))
(declare-fun temp141_85 () (_ BitVec 64))
(declare-fun temp141_86 () (_ BitVec 64))
(declare-fun temp141_87 () (_ BitVec 64))
(declare-fun temp141_88 () (_ BitVec 64))
(declare-fun temp141_89 () (_ BitVec 64))
(declare-fun temp141_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp141_91 () (_ BitVec 64))
(declare-fun temp141_92 () (_ BitVec 64))
(declare-fun temp141_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp141_94 () (_ BitVec 64))
(declare-fun temp141_95 () (_ BitVec 64))
(declare-fun temp141_96 () (_ BitVec 64))
(declare-fun temp141_97 () (_ BitVec 64))
(declare-fun temp141_98 () (_ BitVec 64))
(declare-fun temp141_99 () (_ BitVec 64))
(declare-fun temp141_100 () (_ BitVec 64))
(declare-fun temp141_101 () (_ BitVec 64))
(declare-fun temp141_102 () (_ BitVec 64))
(declare-fun temp141_103 () (_ BitVec 64))
(declare-fun temp141_104 () (_ BitVec 64))
(declare-fun temp141_105 () (_ BitVec 64))
(declare-fun temp141_106 () (_ BitVec 64))
(declare-fun temp141_107 () (_ BitVec 64))
(declare-fun temp141_108 () (_ BitVec 64))
(declare-fun temp141_109 () (_ BitVec 64))
(declare-fun temp141_110 () (_ BitVec 64))
(declare-fun temp141_111 () (_ BitVec 64))
(declare-fun temp141_112 () (_ BitVec 64))
(declare-fun temp141_113 () (_ BitVec 64))
(declare-fun temp141_114 () (_ BitVec 64))
(declare-fun temp141_115 () (_ BitVec 64))
(declare-fun temp141_116 () (_ BitVec 64))
(declare-fun temp141_117 () (_ BitVec 64))
(declare-fun temp141_118 () (_ BitVec 64))
(declare-fun temp141_119 () (_ BitVec 64))
(declare-fun temp141_120 () (_ BitVec 64))
(declare-fun temp141_121 () (_ BitVec 64))
(declare-fun temp141_122 () (_ BitVec 64))
(declare-fun temp141_123 () (_ BitVec 64))
(declare-fun temp141_124 () (_ BitVec 64))
(declare-fun temp141_125 () (_ BitVec 64))
(declare-fun temp141_126 () (_ BitVec 64))
(declare-fun temp141_127 () (_ BitVec 64))
(declare-fun temp141_128 () (_ BitVec 64))
(declare-fun temp141_129 () (_ BitVec 64))
(declare-fun temp141_130 () (_ BitVec 64))
(declare-fun temp141_131 () (_ BitVec 64))
(declare-fun temp141_132 () (_ BitVec 64))
(declare-fun temp141_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp141_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp141_135 () (_ BitVec 64))
(declare-fun temp141_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp141_137 () (_ BitVec 64))
(declare-fun temp141_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp141_139 () (_ BitVec 64))
(declare-fun temp141_140 () (_ BitVec 64))
(declare-fun temp141_141 () (_ BitVec 64))
(declare-fun temp141_142 () (_ BitVec 64))
(declare-fun temp141_143 () (_ BitVec 64))
(declare-fun temp141_144 () (_ BitVec 64))
(declare-fun temp141_145 () (_ BitVec 64))
(declare-fun temp141_146 () (_ BitVec 64))
(declare-fun temp141_147 () (_ BitVec 64))
(declare-fun temp141_148 () (_ BitVec 64))
(declare-fun temp141_149 () (_ BitVec 64))
(declare-fun temp141_150 () (_ BitVec 64))
(declare-fun temp141_151 () (_ BitVec 64))
(declare-fun temp141_152 () (_ BitVec 64))
(declare-fun temp141_153 () (_ BitVec 64))
(declare-fun temp141_154 () (_ BitVec 64))
(declare-fun temp141_156 () (_ BitVec 64))
(declare-fun temp141_157 () (_ BitVec 64))
(declare-fun temp141_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp141_158 () (_ BitVec 64))
(declare-fun temp141_159 () (_ BitVec 64))
(declare-fun temp141_161 () (_ BitVec 64))
(declare-fun temp141_162 () (_ BitVec 64))
(declare-fun temp141_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp141_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp141_164 () (_ BitVec 64))
(declare-fun temp141_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp141_166 () (_ BitVec 64))
(declare-fun temp141_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp141_168 () (_ BitVec 64))
(declare-fun temp141_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp141_170 () (_ BitVec 64))
(declare-fun temp141_171 () (_ BitVec 64))
(declare-fun temp141_172 () (_ BitVec 64))
(declare-fun temp141_173 () (_ BitVec 64))
(declare-fun temp141_174 () (_ BitVec 64))
(declare-fun temp141_175 () (_ BitVec 64))
(declare-fun temp141_176 () (_ BitVec 64))
(declare-fun temp141_177 () (_ BitVec 64))
(declare-fun temp141_178 () (_ BitVec 64))
(declare-fun temp141_179 () (_ BitVec 64))
(declare-fun temp141_180 () (_ BitVec 64))
(declare-fun temp141_181 () (_ BitVec 64))
(declare-fun temp141_182 () (_ BitVec 64))
(declare-fun temp141_183 () (_ BitVec 64))
(declare-fun temp141_184 () (_ BitVec 64))
(declare-fun temp141_185 () (_ BitVec 64))
(declare-fun temp141_186 () (_ BitVec 64))
(declare-fun temp141_187 () (_ BitVec 64))
(declare-fun temp141_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp141_189 () (_ BitVec 64))
(declare-fun temp141_191 () (_ BitVec 64))
(declare-fun temp141_192 () (_ BitVec 64))
(declare-fun temp141_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp141_193 () (_ BitVec 64))
(declare-fun temp141_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp141_195 () (_ BitVec 64))
(declare-fun temp141_196 () (_ BitVec 64))
(declare-fun temp141_197 () (_ BitVec 64))
(declare-fun temp141_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp141_199 () (_ BitVec 64))
(declare-fun temp141_200 () (_ BitVec 64))
(declare-fun temp141_201 () (_ BitVec 64))
(declare-fun temp141_202 () (_ BitVec 64))
(declare-fun temp141_203 () (_ BitVec 64))
(declare-fun temp141_204 () (_ BitVec 64))
(declare-fun temp141_205 () (_ BitVec 64))
(declare-fun temp141_206 () (_ BitVec 64))
(declare-fun temp141_207 () (_ BitVec 64))
(declare-fun temp141_208 () (_ BitVec 64))
(declare-fun temp141_209 () (_ BitVec 64))
(declare-fun temp141_210 () (_ BitVec 64))
(declare-fun temp141_211 () (_ BitVec 64))
(declare-fun temp141_212 () (_ BitVec 64))
(declare-fun temp141_213 () (_ BitVec 64))
(declare-fun temp141_214 () (_ BitVec 64))
(declare-fun temp141_215 () (_ BitVec 64))
(declare-fun temp141_216 () (_ BitVec 64))
(declare-fun temp141_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp141_218 () (_ BitVec 64))
(declare-fun temp141_220 () (_ BitVec 64))
(declare-fun temp141_221 () (_ BitVec 64))
(declare-fun temp141_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp141_222 () (_ BitVec 64))
(declare-fun temp141_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp141_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp141_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp141_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp141_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp141_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp141_229 () (_ BitVec 64))
(declare-fun temp141_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp141_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp141_232 () (_ BitVec 64))
(declare-fun temp141_233 () (_ BitVec 64))
(declare-fun temp141_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp141_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp141_236 () (_ BitVec 64))
(declare-fun temp141_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp141_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp141_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun temp141_241 () (_ BitVec 64))
(declare-fun temp141_240 () (_ BitVec 64))
(declare-fun temp141_242 () (_ BitVec 64))
(declare-fun var66602 () (_ BitVec 64))
(declare-fun temp141_243 () (_ BitVec 64))
(declare-fun temp141_244 () (_ BitVec 64))
(declare-fun temp141_245 () (_ BitVec 64))
(declare-fun var80523 () (_ BitVec 64))
(declare-fun temp141_246 () (_ BitVec 64))
(declare-fun var80524 () (_ BitVec 64))
(declare-fun temp141_247 () (_ BitVec 64))
(declare-fun temp141_249 () (_ BitVec 64))
(declare-fun temp141_248 () (_ BitVec 64))
(declare-fun temp141_250 () (_ BitVec 64))
(assert (= temp141_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp141_1)))
(assert (= temp141_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp141_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_3 #x0000000000000000))
(assert (= var79869 temp141_3))
(assert (= temp141_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp141_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_5 #x0000000000000000))
(assert (= var79914 temp141_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp141_6 #x0000000000000000))
(assert (= temp141_7 temp141_6))
(assert (= temp141_8 (select ARGNAME_padding_NAMEEND_VAL temp141_7)))
(assert (= temp141_9 #x0000000000000001))
(assert (= temp141_10 temp141_9))
(assert (= temp141_11 (select ARGNAME_padding_NAMEEND_VAL temp141_10)))
(assert (= temp141_12 #x0000000000000002))
(assert (= temp141_13 temp141_12))
(assert (= temp141_14 (select ARGNAME_padding_NAMEEND_VAL temp141_13)))
(assert (= temp141_15 #x0000000000000003))
(assert (= temp141_16 temp141_15))
(assert (= temp141_17 (select ARGNAME_padding_NAMEEND_VAL temp141_16)))
(assert (= temp141_18 #x0000000000000004))
(assert (= temp141_19 temp141_18))
(assert (= temp141_20 (select ARGNAME_padding_NAMEEND_VAL temp141_19)))
(assert (= temp141_21 #x0000000000000005))
(assert (= temp141_22 temp141_21))
(assert (= temp141_23 (select ARGNAME_padding_NAMEEND_VAL temp141_22)))
(assert (= temp141_24 #x0000000000000000))
(assert (= temp141_25 #x0000000000000000))
(assert (= temp141_26 temp141_25))
(assert (= temp141_27 (select ARGNAME_padding_NAMEEND_VAL temp141_26)))
(assert (= temp141_28 #x0000000000000000))
(assert (= temp141_29 #x0000000000000001))
(assert (= temp141_30 temp141_29))
(assert (= temp141_31 (select ARGNAME_padding_NAMEEND_VAL temp141_30)))
(assert (= temp141_32 #x0000000000000000))
(assert (= temp141_33 #x0000000000000002))
(assert (= temp141_34 temp141_33))
(assert (= temp141_35 (select ARGNAME_padding_NAMEEND_VAL temp141_34)))
(assert (= temp141_36 #x0000000000000000))
(assert (= temp141_37 #x0000000000000003))
(assert (= temp141_38 temp141_37))
(assert (= temp141_39 (select ARGNAME_padding_NAMEEND_VAL temp141_38)))
(assert (= temp141_40 #x0000000000000000))
(assert (= temp141_41 #x0000000000000004))
(assert (= temp141_42 temp141_41))
(assert (= temp141_43 (select ARGNAME_padding_NAMEEND_VAL temp141_42)))
(assert (= temp141_44 #x0000000000000000))
(assert (= temp141_45 #x0000000000000005))
(assert (= temp141_46 temp141_45))
(assert (= temp141_47 (select ARGNAME_padding_NAMEEND_VAL temp141_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp141_27 temp141_24)
             (bvslt temp141_31 temp141_28)
             (bvslt temp141_35 temp141_32)
             (bvslt temp141_39 temp141_36)
             (bvslt temp141_43 temp141_40)
             (bvslt temp141_47 temp141_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_48 #x0000000000000000))
(assert (= var1322786 temp141_48))
(assert (= temp141_49 #x0000000000000000))
(assert (= temp141_50 temp141_49))
(assert (= temp141_51 (select ARGNAME_output_padding_NAMEEND_VAL temp141_50)))
(assert (= temp141_52 #x0000000000000001))
(assert (= temp141_53 temp141_52))
(assert (= temp141_54 (select ARGNAME_output_padding_NAMEEND_VAL temp141_53)))
(assert (= temp141_55 #x0000000000000002))
(assert (= temp141_56 temp141_55))
(assert (= temp141_57 (select ARGNAME_output_padding_NAMEEND_VAL temp141_56)))
(assert (= temp141_58 #x0000000000000003))
(assert (= temp141_59 temp141_58))
(assert (= temp141_60 (select ARGNAME_output_padding_NAMEEND_VAL temp141_59)))
(assert (= temp141_61 #x0000000000000004))
(assert (= temp141_62 temp141_61))
(assert (= temp141_63 (select ARGNAME_output_padding_NAMEEND_VAL temp141_62)))
(assert (= temp141_64 #x0000000000000005))
(assert (= temp141_65 temp141_64))
(assert (= temp141_66 (select ARGNAME_output_padding_NAMEEND_VAL temp141_65)))
(assert (= temp141_67 #x0000000000000000))
(assert (= temp141_68 #x0000000000000000))
(assert (= temp141_69 temp141_68))
(assert (= temp141_70 (select ARGNAME_output_padding_NAMEEND_VAL temp141_69)))
(assert (= temp141_71 #x0000000000000000))
(assert (= temp141_72 #x0000000000000001))
(assert (= temp141_73 temp141_72))
(assert (= temp141_74 (select ARGNAME_output_padding_NAMEEND_VAL temp141_73)))
(assert (= temp141_75 #x0000000000000000))
(assert (= temp141_76 #x0000000000000002))
(assert (= temp141_77 temp141_76))
(assert (= temp141_78 (select ARGNAME_output_padding_NAMEEND_VAL temp141_77)))
(assert (= temp141_79 #x0000000000000000))
(assert (= temp141_80 #x0000000000000003))
(assert (= temp141_81 temp141_80))
(assert (= temp141_82 (select ARGNAME_output_padding_NAMEEND_VAL temp141_81)))
(assert (= temp141_83 #x0000000000000000))
(assert (= temp141_84 #x0000000000000004))
(assert (= temp141_85 temp141_84))
(assert (= temp141_86 (select ARGNAME_output_padding_NAMEEND_VAL temp141_85)))
(assert (= temp141_87 #x0000000000000000))
(assert (= temp141_88 #x0000000000000005))
(assert (= temp141_89 temp141_88))
(assert (= temp141_90 (select ARGNAME_output_padding_NAMEEND_VAL temp141_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp141_70 temp141_67)
             (bvslt temp141_74 temp141_71)
             (bvslt temp141_78 temp141_75)
             (bvslt temp141_82 temp141_79)
             (bvslt temp141_86 temp141_83)
             (bvslt temp141_90 temp141_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_91 #x0000000000000000))
(assert (= var1322797 temp141_91))
(assert (= temp141_92 #x0000000000000000))
(assert (= temp141_93 temp141_92))
(assert (= temp141_94 (select ARGNAME_stride_NAMEEND_VAL temp141_93)))
(assert (= temp141_95 #x0000000000000001))
(assert (= temp141_96 temp141_95))
(assert (= temp141_97 (select ARGNAME_stride_NAMEEND_VAL temp141_96)))
(assert (= temp141_98 #x0000000000000002))
(assert (= temp141_99 temp141_98))
(assert (= temp141_100 (select ARGNAME_stride_NAMEEND_VAL temp141_99)))
(assert (= temp141_101 #x0000000000000003))
(assert (= temp141_102 temp141_101))
(assert (= temp141_103 (select ARGNAME_stride_NAMEEND_VAL temp141_102)))
(assert (= temp141_104 #x0000000000000004))
(assert (= temp141_105 temp141_104))
(assert (= temp141_106 (select ARGNAME_stride_NAMEEND_VAL temp141_105)))
(assert (= temp141_107 #x0000000000000005))
(assert (= temp141_108 temp141_107))
(assert (= temp141_109 (select ARGNAME_stride_NAMEEND_VAL temp141_108)))
(assert (= temp141_110 #x0000000000000000))
(assert (= temp141_111 #x0000000000000000))
(assert (= temp141_112 temp141_111))
(assert (= temp141_113 (select ARGNAME_stride_NAMEEND_VAL temp141_112)))
(assert (= temp141_114 #x0000000000000000))
(assert (= temp141_115 #x0000000000000001))
(assert (= temp141_116 temp141_115))
(assert (= temp141_117 (select ARGNAME_stride_NAMEEND_VAL temp141_116)))
(assert (= temp141_118 #x0000000000000000))
(assert (= temp141_119 #x0000000000000002))
(assert (= temp141_120 temp141_119))
(assert (= temp141_121 (select ARGNAME_stride_NAMEEND_VAL temp141_120)))
(assert (= temp141_122 #x0000000000000000))
(assert (= temp141_123 #x0000000000000003))
(assert (= temp141_124 temp141_123))
(assert (= temp141_125 (select ARGNAME_stride_NAMEEND_VAL temp141_124)))
(assert (= temp141_126 #x0000000000000000))
(assert (= temp141_127 #x0000000000000004))
(assert (= temp141_128 temp141_127))
(assert (= temp141_129 (select ARGNAME_stride_NAMEEND_VAL temp141_128)))
(assert (= temp141_130 #x0000000000000000))
(assert (= temp141_131 #x0000000000000005))
(assert (= temp141_132 temp141_131))
(assert (= temp141_133 (select ARGNAME_stride_NAMEEND_VAL temp141_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp141_113 temp141_110)
             (bvsle temp141_117 temp141_114)
             (bvsle temp141_121 temp141_118)
             (bvsle temp141_125 temp141_122)
             (bvsle temp141_129 temp141_126)
             (bvsle temp141_133 temp141_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_134 #x0000000000000000))
(assert (= var1322807 temp141_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_135 #x0000000000000001))
(assert (= var1322819 temp141_135))
(assert (= temp141_136 #x0000000000000000))
(assert (= var1310898 temp141_136))
(assert (= temp141_137 #x0000000000000000))
(assert (= temp141_138 temp141_137))
(assert (= temp141_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp141_138)))
(assert (= temp141_140 #x0000000000000001))
(assert (= temp141_141 temp141_140))
(assert (= temp141_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp141_141)))
(assert (= temp141_143 #x0000000000000002))
(assert (= temp141_144 temp141_143))
(assert (= temp141_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp141_144)))
(assert (= temp141_146 #x0000000000000003))
(assert (= temp141_147 temp141_146))
(assert (= temp141_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp141_147)))
(assert (= temp141_149 #x0000000000000004))
(assert (= temp141_150 temp141_149))
(assert (= temp141_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp141_150)))
(assert (= temp141_152 #x0000000000000005))
(assert (= temp141_153 temp141_152))
(assert (= temp141_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp141_153)))
(assert (= temp141_156 var1310898))
(assert (= temp141_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp141_156)))
(assert (= temp141_155 temp141_157))
(assert (= var1322852
   (ite (bvslt temp141_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_158 #x0000000000000000))
(assert (= var1322852 temp141_158))
(assert (= temp141_159 #x0000000000000000))
(assert (= var1310898 temp141_159))
(assert (= temp141_161 var1310898))
(assert (= temp141_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp141_161)))
(assert (= temp141_160 temp141_162))
(assert (= var1322874 (bvsmod temp141_160 ARGNAME_groups_NAMEEND)))
(assert (= temp141_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp141_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp141_164 #x0000000000000001))
(assert (= var1322875 temp141_164))
(assert (= temp141_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp141_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_166 #x0000000000000001))
(assert (= var1322895 temp141_166))
(assert (= temp141_167 #x0000000000000001))
(assert (= var1311786 temp141_167))
(assert (= temp141_168 #x0000000000000000))
(assert (= temp141_169 temp141_168))
(assert (= temp141_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp141_169)))
(assert (= temp141_171 #x0000000000000001))
(assert (= temp141_172 temp141_171))
(assert (= temp141_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp141_172)))
(assert (= temp141_174 #x0000000000000002))
(assert (= temp141_175 temp141_174))
(assert (= temp141_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp141_175)))
(assert (= temp141_177 #x0000000000000003))
(assert (= temp141_178 temp141_177))
(assert (= temp141_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp141_178)))
(assert (= temp141_180 #x0000000000000004))
(assert (= temp141_181 temp141_180))
(assert (= temp141_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp141_181)))
(assert (= temp141_183 #x0000000000000005))
(assert (= temp141_184 temp141_183))
(assert (= temp141_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp141_184)))
(assert (= temp141_186 #x0000000000000000))
(assert (= temp141_187
   (ite (bvslt var1311786 temp141_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp141_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp141_187)))
(assert (= var1322903 temp141_188))
(assert (bvslt (ite (bvslt var1311786 temp141_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp141_189 #x0000000000000001))
(assert (= var1311786 temp141_189))
(assert (= temp141_191 var1311786))
(assert (= temp141_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp141_191)))
(assert (= temp141_190 temp141_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp141_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp141_193 #x0000000000000001))
(assert (= var1322908 temp141_193))
(assert (= temp141_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp141_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_195 #x0000000000000001))
(assert (= var1322975 temp141_195))
(assert (= temp141_196 #x0000000000000000))
(assert (= var1310898 temp141_196))
(assert (= temp141_197 #x0000000000000000))
(assert (= temp141_198 temp141_197))
(assert (= temp141_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp141_198)))
(assert (= temp141_200 #x0000000000000001))
(assert (= temp141_201 temp141_200))
(assert (= temp141_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp141_201)))
(assert (= temp141_203 #x0000000000000002))
(assert (= temp141_204 temp141_203))
(assert (= temp141_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp141_204)))
(assert (= temp141_206 #x0000000000000003))
(assert (= temp141_207 temp141_206))
(assert (= temp141_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp141_207)))
(assert (= temp141_209 #x0000000000000004))
(assert (= temp141_210 temp141_209))
(assert (= temp141_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp141_210)))
(assert (= temp141_212 #x0000000000000005))
(assert (= temp141_213 temp141_212))
(assert (= temp141_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp141_213)))
(assert (= temp141_215 #x0000000000000000))
(assert (= temp141_216
   (ite (bvslt var1310898 temp141_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp141_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp141_216)))
(assert (= var1322977 temp141_217))
(assert (bvslt (ite (bvslt var1310898 temp141_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp141_218 #x0000000000000000))
(assert (= var1310898 temp141_218))
(assert (= temp141_220 var1310898))
(assert (= temp141_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp141_220)))
(assert (= temp141_219 temp141_221))
(assert (= var1322980
   (ite (= var1322977 temp141_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp141_222 #x0000000000000001))
(assert (= var1322980 temp141_222))
(assert (= temp141_223 #x0000000000000002))
(assert (= var1848169 temp141_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp141_225 #x0000000000000001))
(assert (= var1323065 temp141_225))
(assert (= temp141_226 #x0000000000000001))
(assert (= var3486735 temp141_226))
(assert (= temp141_227 #x0000000000000001))
(assert (= var3814415 temp141_227))
(assert (= temp141_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp141_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_229 #x0000000000000001))
(assert (= var79986 temp141_229))
(assert (= temp141_230 #x0000000000000001))
(assert (= var80116 temp141_230))
(assert (= var4796905 var80116))
(assert (= temp141_231 #x0000000000000000))
(assert (= var4784306 temp141_231))
(assert (= temp141_232 #x0000000000000000))
(assert (= temp141_233
   (ite (bvslt var4784306 temp141_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp141_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp141_233)))
(assert (= var4796924 temp141_234))
(assert (bvslt (ite (bvslt var4784306 temp141_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp141_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp141_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp141_236 #x0000000000000001))
(assert (= var4796925 temp141_236))
(assert (= temp141_237 #x0000000000000000))
(assert (= var4996927 temp141_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp141_238 #x0000000000000002))
(assert (= var5125763 temp141_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp141_239 #x0000000000000000))
(assert (= var5191324 temp141_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= temp141_241 #xffffffffffffffff))
(assert (= temp141_240 temp141_241))
(assert (= temp141_242 #x0000000000000001))
(assert (= var66602 temp141_242))
(assert (= temp141_243 #x0000000000000000))
(assert (= temp141_244
   (ite (bvslt var66602 temp141_243)
        (bvadd ARGNAME_input_NAMEEND_DIM var66602)
        var66602)))
(assert (= temp141_245 (select ARGNAME_input_NAMEEND_DIMSIZE temp141_244)))
(assert (= var80523 temp141_245))
(assert (bvslt (ite (bvslt var66602 temp141_243)
            (bvadd ARGNAME_input_NAMEEND_DIM var66602)
            var66602)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp141_246 #x0000000000000000))
(assert (= var80524
   (ite (= var80523 temp141_246) #x0000000000000001 #x0000000000000000)))
(assert (= temp141_247 #x0000000000000001))
(assert (= var80524 temp141_247))
(assert (= temp141_249 #xffffffffffffffff))
(assert (= temp141_248 temp141_249))
(assert (= temp141_250 #x0000000000000001))
(assert (= var79986 temp141_250))
(model-add temp141_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp141_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp141_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






