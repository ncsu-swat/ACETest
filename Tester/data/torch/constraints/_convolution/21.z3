(declare-fun temp28_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp28_2 () (_ BitVec 64))
(declare-fun temp28_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp28_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp28_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp28_6 () (_ BitVec 64))
(declare-fun temp28_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_8 () (_ BitVec 64))
(declare-fun temp28_9 () (_ BitVec 64))
(declare-fun temp28_10 () (_ BitVec 64))
(declare-fun temp28_11 () (_ BitVec 64))
(declare-fun temp28_12 () (_ BitVec 64))
(declare-fun temp28_13 () (_ BitVec 64))
(declare-fun temp28_14 () (_ BitVec 64))
(declare-fun temp28_15 () (_ BitVec 64))
(declare-fun temp28_16 () (_ BitVec 64))
(declare-fun temp28_17 () (_ BitVec 64))
(declare-fun temp28_18 () (_ BitVec 64))
(declare-fun temp28_19 () (_ BitVec 64))
(declare-fun temp28_20 () (_ BitVec 64))
(declare-fun temp28_21 () (_ BitVec 64))
(declare-fun temp28_22 () (_ BitVec 64))
(declare-fun temp28_23 () (_ BitVec 64))
(declare-fun temp28_24 () (_ BitVec 64))
(declare-fun temp28_25 () (_ BitVec 64))
(declare-fun temp28_26 () (_ BitVec 64))
(declare-fun temp28_27 () (_ BitVec 64))
(declare-fun temp28_28 () (_ BitVec 64))
(declare-fun temp28_29 () (_ BitVec 64))
(declare-fun temp28_30 () (_ BitVec 64))
(declare-fun temp28_31 () (_ BitVec 64))
(declare-fun temp28_32 () (_ BitVec 64))
(declare-fun temp28_33 () (_ BitVec 64))
(declare-fun temp28_34 () (_ BitVec 64))
(declare-fun temp28_35 () (_ BitVec 64))
(declare-fun temp28_36 () (_ BitVec 64))
(declare-fun temp28_37 () (_ BitVec 64))
(declare-fun temp28_38 () (_ BitVec 64))
(declare-fun temp28_39 () (_ BitVec 64))
(declare-fun temp28_40 () (_ BitVec 64))
(declare-fun temp28_41 () (_ BitVec 64))
(declare-fun temp28_42 () (_ BitVec 64))
(declare-fun temp28_43 () (_ BitVec 64))
(declare-fun temp28_44 () (_ BitVec 64))
(declare-fun temp28_45 () (_ BitVec 64))
(declare-fun temp28_46 () (_ BitVec 64))
(declare-fun temp28_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp28_48 () (_ BitVec 64))
(declare-fun temp28_49 () (_ BitVec 64))
(declare-fun temp28_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_51 () (_ BitVec 64))
(declare-fun temp28_52 () (_ BitVec 64))
(declare-fun temp28_53 () (_ BitVec 64))
(declare-fun temp28_54 () (_ BitVec 64))
(declare-fun temp28_55 () (_ BitVec 64))
(declare-fun temp28_56 () (_ BitVec 64))
(declare-fun temp28_57 () (_ BitVec 64))
(declare-fun temp28_58 () (_ BitVec 64))
(declare-fun temp28_59 () (_ BitVec 64))
(declare-fun temp28_60 () (_ BitVec 64))
(declare-fun temp28_61 () (_ BitVec 64))
(declare-fun temp28_62 () (_ BitVec 64))
(declare-fun temp28_63 () (_ BitVec 64))
(declare-fun temp28_64 () (_ BitVec 64))
(declare-fun temp28_65 () (_ BitVec 64))
(declare-fun temp28_66 () (_ BitVec 64))
(declare-fun temp28_67 () (_ BitVec 64))
(declare-fun temp28_68 () (_ BitVec 64))
(declare-fun temp28_69 () (_ BitVec 64))
(declare-fun temp28_70 () (_ BitVec 64))
(declare-fun temp28_71 () (_ BitVec 64))
(declare-fun temp28_72 () (_ BitVec 64))
(declare-fun temp28_73 () (_ BitVec 64))
(declare-fun temp28_74 () (_ BitVec 64))
(declare-fun temp28_75 () (_ BitVec 64))
(declare-fun temp28_76 () (_ BitVec 64))
(declare-fun temp28_77 () (_ BitVec 64))
(declare-fun temp28_78 () (_ BitVec 64))
(declare-fun temp28_79 () (_ BitVec 64))
(declare-fun temp28_80 () (_ BitVec 64))
(declare-fun temp28_81 () (_ BitVec 64))
(declare-fun temp28_82 () (_ BitVec 64))
(declare-fun temp28_83 () (_ BitVec 64))
(declare-fun temp28_84 () (_ BitVec 64))
(declare-fun temp28_85 () (_ BitVec 64))
(declare-fun temp28_86 () (_ BitVec 64))
(declare-fun temp28_87 () (_ BitVec 64))
(declare-fun temp28_88 () (_ BitVec 64))
(declare-fun temp28_89 () (_ BitVec 64))
(declare-fun temp28_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp28_91 () (_ BitVec 64))
(declare-fun temp28_92 () (_ BitVec 64))
(declare-fun temp28_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_94 () (_ BitVec 64))
(declare-fun temp28_95 () (_ BitVec 64))
(declare-fun temp28_96 () (_ BitVec 64))
(declare-fun temp28_97 () (_ BitVec 64))
(declare-fun temp28_98 () (_ BitVec 64))
(declare-fun temp28_99 () (_ BitVec 64))
(declare-fun temp28_100 () (_ BitVec 64))
(declare-fun temp28_101 () (_ BitVec 64))
(declare-fun temp28_102 () (_ BitVec 64))
(declare-fun temp28_103 () (_ BitVec 64))
(declare-fun temp28_104 () (_ BitVec 64))
(declare-fun temp28_105 () (_ BitVec 64))
(declare-fun temp28_106 () (_ BitVec 64))
(declare-fun temp28_107 () (_ BitVec 64))
(declare-fun temp28_108 () (_ BitVec 64))
(declare-fun temp28_109 () (_ BitVec 64))
(declare-fun temp28_110 () (_ BitVec 64))
(declare-fun temp28_111 () (_ BitVec 64))
(declare-fun temp28_112 () (_ BitVec 64))
(declare-fun temp28_113 () (_ BitVec 64))
(declare-fun temp28_114 () (_ BitVec 64))
(declare-fun temp28_115 () (_ BitVec 64))
(declare-fun temp28_116 () (_ BitVec 64))
(declare-fun temp28_117 () (_ BitVec 64))
(declare-fun temp28_118 () (_ BitVec 64))
(declare-fun temp28_119 () (_ BitVec 64))
(declare-fun temp28_120 () (_ BitVec 64))
(declare-fun temp28_121 () (_ BitVec 64))
(declare-fun temp28_122 () (_ BitVec 64))
(declare-fun temp28_123 () (_ BitVec 64))
(declare-fun temp28_124 () (_ BitVec 64))
(declare-fun temp28_125 () (_ BitVec 64))
(declare-fun temp28_126 () (_ BitVec 64))
(declare-fun temp28_127 () (_ BitVec 64))
(declare-fun temp28_128 () (_ BitVec 64))
(declare-fun temp28_129 () (_ BitVec 64))
(declare-fun temp28_130 () (_ BitVec 64))
(declare-fun temp28_131 () (_ BitVec 64))
(declare-fun temp28_132 () (_ BitVec 64))
(declare-fun temp28_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp28_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp28_135 () (_ BitVec 64))
(declare-fun temp28_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp28_137 () (_ BitVec 64))
(declare-fun temp28_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_139 () (_ BitVec 64))
(declare-fun temp28_140 () (_ BitVec 64))
(declare-fun temp28_141 () (_ BitVec 64))
(declare-fun temp28_142 () (_ BitVec 64))
(declare-fun temp28_143 () (_ BitVec 64))
(declare-fun temp28_144 () (_ BitVec 64))
(declare-fun temp28_145 () (_ BitVec 64))
(declare-fun temp28_146 () (_ BitVec 64))
(declare-fun temp28_147 () (_ BitVec 64))
(declare-fun temp28_148 () (_ BitVec 64))
(declare-fun temp28_149 () (_ BitVec 64))
(declare-fun temp28_150 () (_ BitVec 64))
(declare-fun temp28_151 () (_ BitVec 64))
(declare-fun temp28_152 () (_ BitVec 64))
(declare-fun temp28_153 () (_ BitVec 64))
(declare-fun temp28_154 () (_ BitVec 64))
(declare-fun temp28_156 () (_ BitVec 64))
(declare-fun temp28_157 () (_ BitVec 64))
(declare-fun temp28_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp28_158 () (_ BitVec 64))
(declare-fun temp28_159 () (_ BitVec 64))
(declare-fun temp28_161 () (_ BitVec 64))
(declare-fun temp28_162 () (_ BitVec 64))
(declare-fun temp28_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp28_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp28_164 () (_ BitVec 64))
(declare-fun temp28_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp28_166 () (_ BitVec 64))
(declare-fun temp28_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp28_168 () (_ BitVec 64))
(declare-fun temp28_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_170 () (_ BitVec 64))
(declare-fun temp28_171 () (_ BitVec 64))
(declare-fun temp28_172 () (_ BitVec 64))
(declare-fun temp28_173 () (_ BitVec 64))
(declare-fun temp28_174 () (_ BitVec 64))
(declare-fun temp28_175 () (_ BitVec 64))
(declare-fun temp28_176 () (_ BitVec 64))
(declare-fun temp28_177 () (_ BitVec 64))
(declare-fun temp28_178 () (_ BitVec 64))
(declare-fun temp28_179 () (_ BitVec 64))
(declare-fun temp28_180 () (_ BitVec 64))
(declare-fun temp28_181 () (_ BitVec 64))
(declare-fun temp28_182 () (_ BitVec 64))
(declare-fun temp28_183 () (_ BitVec 64))
(declare-fun temp28_184 () (_ BitVec 64))
(declare-fun temp28_185 () (_ BitVec 64))
(declare-fun temp28_186 () (_ BitVec 64))
(declare-fun temp28_187 () (_ BitVec 64))
(declare-fun temp28_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp28_189 () (_ BitVec 64))
(declare-fun temp28_191 () (_ BitVec 64))
(declare-fun temp28_192 () (_ BitVec 64))
(declare-fun temp28_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp28_193 () (_ BitVec 64))
(declare-fun temp28_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp28_195 () (_ BitVec 64))
(declare-fun temp28_196 () (_ BitVec 64))
(declare-fun temp28_197 () (_ BitVec 64))
(declare-fun temp28_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_199 () (_ BitVec 64))
(declare-fun temp28_200 () (_ BitVec 64))
(declare-fun temp28_201 () (_ BitVec 64))
(declare-fun temp28_202 () (_ BitVec 64))
(declare-fun temp28_203 () (_ BitVec 64))
(declare-fun temp28_204 () (_ BitVec 64))
(declare-fun temp28_205 () (_ BitVec 64))
(declare-fun temp28_206 () (_ BitVec 64))
(declare-fun temp28_207 () (_ BitVec 64))
(declare-fun temp28_208 () (_ BitVec 64))
(declare-fun temp28_209 () (_ BitVec 64))
(declare-fun temp28_210 () (_ BitVec 64))
(declare-fun temp28_211 () (_ BitVec 64))
(declare-fun temp28_212 () (_ BitVec 64))
(declare-fun temp28_213 () (_ BitVec 64))
(declare-fun temp28_214 () (_ BitVec 64))
(declare-fun temp28_215 () (_ BitVec 64))
(declare-fun temp28_216 () (_ BitVec 64))
(declare-fun temp28_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp28_218 () (_ BitVec 64))
(declare-fun temp28_220 () (_ BitVec 64))
(declare-fun temp28_221 () (_ BitVec 64))
(declare-fun temp28_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp28_222 () (_ BitVec 64))
(declare-fun temp28_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp28_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp28_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp28_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp28_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp28_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp28_229 () (_ BitVec 64))
(declare-fun temp28_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp28_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp28_232 () (_ BitVec 64))
(declare-fun temp28_233 () (_ BitVec 64))
(declare-fun temp28_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp28_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp28_236 () (_ BitVec 64))
(declare-fun temp28_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp28_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp28_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun var5910928 () (_ BitVec 64))
(declare-fun temp28_240 () (_ BitVec 64))
(declare-fun ARGNAME_benchmark_NAMEEND () (_ BitVec 64))
(declare-fun var80315 () (_ BitVec 64))
(declare-fun temp28_241 () (_ BitVec 64))
(declare-fun ARGNAME_deterministic_NAMEEND () (_ BitVec 64))
(declare-fun var80317 () (_ BitVec 64))
(declare-fun temp28_242 () (_ BitVec 64))
(declare-fun ARGNAME_allow_tf32_NAMEEND () (_ BitVec 64))
(declare-fun var80319 () (_ BitVec 64))
(declare-fun var6831948 () (_ BitVec 64))
(declare-fun var6831949 () (_ BitVec 64))
(declare-fun var6831950 () (_ BitVec 64))
(declare-fun temp28_243 () (_ BitVec 64))
(declare-fun temp28_244 () (_ BitVec 64))
(declare-fun var7353108 () (_ BitVec 64))
(declare-fun var7353075 () (_ BitVec 64))
(declare-fun var7221639 () (_ BitVec 64))
(declare-fun var7221635 () (_ BitVec 64))
(declare-fun var81597 () (_ BitVec 64))
(declare-fun temp28_245 () (_ BitVec 64))
(assert (= temp28_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp28_1)))
(assert (= temp28_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp28_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_3 #x0000000000000000))
(assert (= var79869 temp28_3))
(assert (= temp28_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp28_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_5 #x0000000000000000))
(assert (= var79914 temp28_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp28_6 #x0000000000000000))
(assert (= temp28_7 temp28_6))
(assert (= temp28_8 (select ARGNAME_padding_NAMEEND_VAL temp28_7)))
(assert (= temp28_9 #x0000000000000001))
(assert (= temp28_10 temp28_9))
(assert (= temp28_11 (select ARGNAME_padding_NAMEEND_VAL temp28_10)))
(assert (= temp28_12 #x0000000000000002))
(assert (= temp28_13 temp28_12))
(assert (= temp28_14 (select ARGNAME_padding_NAMEEND_VAL temp28_13)))
(assert (= temp28_15 #x0000000000000003))
(assert (= temp28_16 temp28_15))
(assert (= temp28_17 (select ARGNAME_padding_NAMEEND_VAL temp28_16)))
(assert (= temp28_18 #x0000000000000004))
(assert (= temp28_19 temp28_18))
(assert (= temp28_20 (select ARGNAME_padding_NAMEEND_VAL temp28_19)))
(assert (= temp28_21 #x0000000000000005))
(assert (= temp28_22 temp28_21))
(assert (= temp28_23 (select ARGNAME_padding_NAMEEND_VAL temp28_22)))
(assert (= temp28_24 #x0000000000000000))
(assert (= temp28_25 #x0000000000000000))
(assert (= temp28_26 temp28_25))
(assert (= temp28_27 (select ARGNAME_padding_NAMEEND_VAL temp28_26)))
(assert (= temp28_28 #x0000000000000000))
(assert (= temp28_29 #x0000000000000001))
(assert (= temp28_30 temp28_29))
(assert (= temp28_31 (select ARGNAME_padding_NAMEEND_VAL temp28_30)))
(assert (= temp28_32 #x0000000000000000))
(assert (= temp28_33 #x0000000000000002))
(assert (= temp28_34 temp28_33))
(assert (= temp28_35 (select ARGNAME_padding_NAMEEND_VAL temp28_34)))
(assert (= temp28_36 #x0000000000000000))
(assert (= temp28_37 #x0000000000000003))
(assert (= temp28_38 temp28_37))
(assert (= temp28_39 (select ARGNAME_padding_NAMEEND_VAL temp28_38)))
(assert (= temp28_40 #x0000000000000000))
(assert (= temp28_41 #x0000000000000004))
(assert (= temp28_42 temp28_41))
(assert (= temp28_43 (select ARGNAME_padding_NAMEEND_VAL temp28_42)))
(assert (= temp28_44 #x0000000000000000))
(assert (= temp28_45 #x0000000000000005))
(assert (= temp28_46 temp28_45))
(assert (= temp28_47 (select ARGNAME_padding_NAMEEND_VAL temp28_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp28_27 temp28_24)
             (bvslt temp28_31 temp28_28)
             (bvslt temp28_35 temp28_32)
             (bvslt temp28_39 temp28_36)
             (bvslt temp28_43 temp28_40)
             (bvslt temp28_47 temp28_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_48 #x0000000000000000))
(assert (= var1322786 temp28_48))
(assert (= temp28_49 #x0000000000000000))
(assert (= temp28_50 temp28_49))
(assert (= temp28_51 (select ARGNAME_output_padding_NAMEEND_VAL temp28_50)))
(assert (= temp28_52 #x0000000000000001))
(assert (= temp28_53 temp28_52))
(assert (= temp28_54 (select ARGNAME_output_padding_NAMEEND_VAL temp28_53)))
(assert (= temp28_55 #x0000000000000002))
(assert (= temp28_56 temp28_55))
(assert (= temp28_57 (select ARGNAME_output_padding_NAMEEND_VAL temp28_56)))
(assert (= temp28_58 #x0000000000000003))
(assert (= temp28_59 temp28_58))
(assert (= temp28_60 (select ARGNAME_output_padding_NAMEEND_VAL temp28_59)))
(assert (= temp28_61 #x0000000000000004))
(assert (= temp28_62 temp28_61))
(assert (= temp28_63 (select ARGNAME_output_padding_NAMEEND_VAL temp28_62)))
(assert (= temp28_64 #x0000000000000005))
(assert (= temp28_65 temp28_64))
(assert (= temp28_66 (select ARGNAME_output_padding_NAMEEND_VAL temp28_65)))
(assert (= temp28_67 #x0000000000000000))
(assert (= temp28_68 #x0000000000000000))
(assert (= temp28_69 temp28_68))
(assert (= temp28_70 (select ARGNAME_output_padding_NAMEEND_VAL temp28_69)))
(assert (= temp28_71 #x0000000000000000))
(assert (= temp28_72 #x0000000000000001))
(assert (= temp28_73 temp28_72))
(assert (= temp28_74 (select ARGNAME_output_padding_NAMEEND_VAL temp28_73)))
(assert (= temp28_75 #x0000000000000000))
(assert (= temp28_76 #x0000000000000002))
(assert (= temp28_77 temp28_76))
(assert (= temp28_78 (select ARGNAME_output_padding_NAMEEND_VAL temp28_77)))
(assert (= temp28_79 #x0000000000000000))
(assert (= temp28_80 #x0000000000000003))
(assert (= temp28_81 temp28_80))
(assert (= temp28_82 (select ARGNAME_output_padding_NAMEEND_VAL temp28_81)))
(assert (= temp28_83 #x0000000000000000))
(assert (= temp28_84 #x0000000000000004))
(assert (= temp28_85 temp28_84))
(assert (= temp28_86 (select ARGNAME_output_padding_NAMEEND_VAL temp28_85)))
(assert (= temp28_87 #x0000000000000000))
(assert (= temp28_88 #x0000000000000005))
(assert (= temp28_89 temp28_88))
(assert (= temp28_90 (select ARGNAME_output_padding_NAMEEND_VAL temp28_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp28_70 temp28_67)
             (bvslt temp28_74 temp28_71)
             (bvslt temp28_78 temp28_75)
             (bvslt temp28_82 temp28_79)
             (bvslt temp28_86 temp28_83)
             (bvslt temp28_90 temp28_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_91 #x0000000000000000))
(assert (= var1322797 temp28_91))
(assert (= temp28_92 #x0000000000000000))
(assert (= temp28_93 temp28_92))
(assert (= temp28_94 (select ARGNAME_stride_NAMEEND_VAL temp28_93)))
(assert (= temp28_95 #x0000000000000001))
(assert (= temp28_96 temp28_95))
(assert (= temp28_97 (select ARGNAME_stride_NAMEEND_VAL temp28_96)))
(assert (= temp28_98 #x0000000000000002))
(assert (= temp28_99 temp28_98))
(assert (= temp28_100 (select ARGNAME_stride_NAMEEND_VAL temp28_99)))
(assert (= temp28_101 #x0000000000000003))
(assert (= temp28_102 temp28_101))
(assert (= temp28_103 (select ARGNAME_stride_NAMEEND_VAL temp28_102)))
(assert (= temp28_104 #x0000000000000004))
(assert (= temp28_105 temp28_104))
(assert (= temp28_106 (select ARGNAME_stride_NAMEEND_VAL temp28_105)))
(assert (= temp28_107 #x0000000000000005))
(assert (= temp28_108 temp28_107))
(assert (= temp28_109 (select ARGNAME_stride_NAMEEND_VAL temp28_108)))
(assert (= temp28_110 #x0000000000000000))
(assert (= temp28_111 #x0000000000000000))
(assert (= temp28_112 temp28_111))
(assert (= temp28_113 (select ARGNAME_stride_NAMEEND_VAL temp28_112)))
(assert (= temp28_114 #x0000000000000000))
(assert (= temp28_115 #x0000000000000001))
(assert (= temp28_116 temp28_115))
(assert (= temp28_117 (select ARGNAME_stride_NAMEEND_VAL temp28_116)))
(assert (= temp28_118 #x0000000000000000))
(assert (= temp28_119 #x0000000000000002))
(assert (= temp28_120 temp28_119))
(assert (= temp28_121 (select ARGNAME_stride_NAMEEND_VAL temp28_120)))
(assert (= temp28_122 #x0000000000000000))
(assert (= temp28_123 #x0000000000000003))
(assert (= temp28_124 temp28_123))
(assert (= temp28_125 (select ARGNAME_stride_NAMEEND_VAL temp28_124)))
(assert (= temp28_126 #x0000000000000000))
(assert (= temp28_127 #x0000000000000004))
(assert (= temp28_128 temp28_127))
(assert (= temp28_129 (select ARGNAME_stride_NAMEEND_VAL temp28_128)))
(assert (= temp28_130 #x0000000000000000))
(assert (= temp28_131 #x0000000000000005))
(assert (= temp28_132 temp28_131))
(assert (= temp28_133 (select ARGNAME_stride_NAMEEND_VAL temp28_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp28_113 temp28_110)
             (bvsle temp28_117 temp28_114)
             (bvsle temp28_121 temp28_118)
             (bvsle temp28_125 temp28_122)
             (bvsle temp28_129 temp28_126)
             (bvsle temp28_133 temp28_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_134 #x0000000000000000))
(assert (= var1322807 temp28_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_135 #x0000000000000001))
(assert (= var1322819 temp28_135))
(assert (= temp28_136 #x0000000000000000))
(assert (= var1310898 temp28_136))
(assert (= temp28_137 #x0000000000000000))
(assert (= temp28_138 temp28_137))
(assert (= temp28_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_138)))
(assert (= temp28_140 #x0000000000000001))
(assert (= temp28_141 temp28_140))
(assert (= temp28_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_141)))
(assert (= temp28_143 #x0000000000000002))
(assert (= temp28_144 temp28_143))
(assert (= temp28_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_144)))
(assert (= temp28_146 #x0000000000000003))
(assert (= temp28_147 temp28_146))
(assert (= temp28_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_147)))
(assert (= temp28_149 #x0000000000000004))
(assert (= temp28_150 temp28_149))
(assert (= temp28_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_150)))
(assert (= temp28_152 #x0000000000000005))
(assert (= temp28_153 temp28_152))
(assert (= temp28_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_153)))
(assert (= temp28_156 var1310898))
(assert (= temp28_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_156)))
(assert (= temp28_155 temp28_157))
(assert (= var1322852
   (ite (bvslt temp28_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_158 #x0000000000000000))
(assert (= var1322852 temp28_158))
(assert (= temp28_159 #x0000000000000000))
(assert (= var1310898 temp28_159))
(assert (= temp28_161 var1310898))
(assert (= temp28_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_161)))
(assert (= temp28_160 temp28_162))
(assert (= var1322874 (bvsmod temp28_160 ARGNAME_groups_NAMEEND)))
(assert (= temp28_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp28_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp28_164 #x0000000000000001))
(assert (= var1322875 temp28_164))
(assert (= temp28_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp28_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_166 #x0000000000000001))
(assert (= var1322895 temp28_166))
(assert (= temp28_167 #x0000000000000001))
(assert (= var1311786 temp28_167))
(assert (= temp28_168 #x0000000000000000))
(assert (= temp28_169 temp28_168))
(assert (= temp28_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_169)))
(assert (= temp28_171 #x0000000000000001))
(assert (= temp28_172 temp28_171))
(assert (= temp28_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_172)))
(assert (= temp28_174 #x0000000000000002))
(assert (= temp28_175 temp28_174))
(assert (= temp28_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_175)))
(assert (= temp28_177 #x0000000000000003))
(assert (= temp28_178 temp28_177))
(assert (= temp28_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_178)))
(assert (= temp28_180 #x0000000000000004))
(assert (= temp28_181 temp28_180))
(assert (= temp28_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_181)))
(assert (= temp28_183 #x0000000000000005))
(assert (= temp28_184 temp28_183))
(assert (= temp28_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_184)))
(assert (= temp28_186 #x0000000000000000))
(assert (= temp28_187
   (ite (bvslt var1311786 temp28_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp28_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_187)))
(assert (= var1322903 temp28_188))
(assert (bvslt (ite (bvslt var1311786 temp28_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp28_189 #x0000000000000001))
(assert (= var1311786 temp28_189))
(assert (= temp28_191 var1311786))
(assert (= temp28_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_191)))
(assert (= temp28_190 temp28_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp28_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp28_193 #x0000000000000001))
(assert (= var1322908 temp28_193))
(assert (= temp28_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp28_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_195 #x0000000000000001))
(assert (= var1322975 temp28_195))
(assert (= temp28_196 #x0000000000000000))
(assert (= var1310898 temp28_196))
(assert (= temp28_197 #x0000000000000000))
(assert (= temp28_198 temp28_197))
(assert (= temp28_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp28_198)))
(assert (= temp28_200 #x0000000000000001))
(assert (= temp28_201 temp28_200))
(assert (= temp28_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp28_201)))
(assert (= temp28_203 #x0000000000000002))
(assert (= temp28_204 temp28_203))
(assert (= temp28_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp28_204)))
(assert (= temp28_206 #x0000000000000003))
(assert (= temp28_207 temp28_206))
(assert (= temp28_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp28_207)))
(assert (= temp28_209 #x0000000000000004))
(assert (= temp28_210 temp28_209))
(assert (= temp28_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp28_210)))
(assert (= temp28_212 #x0000000000000005))
(assert (= temp28_213 temp28_212))
(assert (= temp28_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp28_213)))
(assert (= temp28_215 #x0000000000000000))
(assert (= temp28_216
   (ite (bvslt var1310898 temp28_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp28_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp28_216)))
(assert (= var1322977 temp28_217))
(assert (bvslt (ite (bvslt var1310898 temp28_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp28_218 #x0000000000000000))
(assert (= var1310898 temp28_218))
(assert (= temp28_220 var1310898))
(assert (= temp28_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_220)))
(assert (= temp28_219 temp28_221))
(assert (= var1322980
   (ite (= var1322977 temp28_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp28_222 #x0000000000000001))
(assert (= var1322980 temp28_222))
(assert (= temp28_223 #x0000000000000002))
(assert (= var1848169 temp28_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp28_225 #x0000000000000001))
(assert (= var1323065 temp28_225))
(assert (= temp28_226 #x0000000000000001))
(assert (= var3486735 temp28_226))
(assert (= temp28_227 #x0000000000000001))
(assert (= var3814415 temp28_227))
(assert (= temp28_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp28_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_229 #x0000000000000001))
(assert (= var79986 temp28_229))
(assert (= temp28_230 #x0000000000000001))
(assert (= var80116 temp28_230))
(assert (= var4796905 var80116))
(assert (= temp28_231 #x0000000000000000))
(assert (= var4784306 temp28_231))
(assert (= temp28_232 #x0000000000000000))
(assert (= temp28_233
   (ite (bvslt var4784306 temp28_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp28_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_233)))
(assert (= var4796924 temp28_234))
(assert (bvslt (ite (bvslt var4784306 temp28_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp28_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp28_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp28_236 #x0000000000000001))
(assert (= var4796925 temp28_236))
(assert (= temp28_237 #x0000000000000000))
(assert (= var4996927 temp28_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp28_238 #x0000000000000002))
(assert (= var5125763 temp28_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_239 #x0000000000000000))
(assert (= var5191324 temp28_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= var5910928 var80129))
(assert (= temp28_240 #x0000000000000000))
(assert (= var80315
   (ite (distinct ARGNAME_benchmark_NAMEEND temp28_240)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_241 #x0000000000000000))
(assert (= var80317
   (ite (distinct ARGNAME_deterministic_NAMEEND temp28_241)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_242 #x0000000000000000))
(assert (= var80319
   (ite (distinct ARGNAME_allow_tf32_NAMEEND temp28_242)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var6831948 var80315))
(assert (= var6831949 var80317))
(assert (= var6831950 var80319))
(assert (= temp28_243 #x0000000000000001))
(assert (= var79986 temp28_243))
(assert (= temp28_244 #x0000000000000000))
(assert (= var7353108 temp28_244))
(assert (= var7353075 var7353108))
(assert (= var7221639 var7353075))
(assert (= var7221635 var7221639))
(assert (= var81597 var7221635))
(assert (= temp28_245 #x0000000000000000))
(assert (= var81597 temp28_245))
(model-add temp28_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp28_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp28_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






