(declare-fun temp101_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp101_2 () (_ BitVec 64))
(declare-fun temp101_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp101_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp101_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp101_6 () (_ BitVec 64))
(declare-fun temp101_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp101_8 () (_ BitVec 64))
(declare-fun temp101_9 () (_ BitVec 64))
(declare-fun temp101_10 () (_ BitVec 64))
(declare-fun temp101_11 () (_ BitVec 64))
(declare-fun temp101_12 () (_ BitVec 64))
(declare-fun temp101_13 () (_ BitVec 64))
(declare-fun temp101_14 () (_ BitVec 64))
(declare-fun temp101_15 () (_ BitVec 64))
(declare-fun temp101_16 () (_ BitVec 64))
(declare-fun temp101_17 () (_ BitVec 64))
(declare-fun temp101_18 () (_ BitVec 64))
(declare-fun temp101_19 () (_ BitVec 64))
(declare-fun temp101_20 () (_ BitVec 64))
(declare-fun temp101_21 () (_ BitVec 64))
(declare-fun temp101_22 () (_ BitVec 64))
(declare-fun temp101_23 () (_ BitVec 64))
(declare-fun temp101_24 () (_ BitVec 64))
(declare-fun temp101_25 () (_ BitVec 64))
(declare-fun temp101_26 () (_ BitVec 64))
(declare-fun temp101_27 () (_ BitVec 64))
(declare-fun temp101_28 () (_ BitVec 64))
(declare-fun temp101_29 () (_ BitVec 64))
(declare-fun temp101_30 () (_ BitVec 64))
(declare-fun temp101_31 () (_ BitVec 64))
(declare-fun temp101_32 () (_ BitVec 64))
(declare-fun temp101_33 () (_ BitVec 64))
(declare-fun temp101_34 () (_ BitVec 64))
(declare-fun temp101_35 () (_ BitVec 64))
(declare-fun temp101_36 () (_ BitVec 64))
(declare-fun temp101_37 () (_ BitVec 64))
(declare-fun temp101_38 () (_ BitVec 64))
(declare-fun temp101_39 () (_ BitVec 64))
(declare-fun temp101_40 () (_ BitVec 64))
(declare-fun temp101_41 () (_ BitVec 64))
(declare-fun temp101_42 () (_ BitVec 64))
(declare-fun temp101_43 () (_ BitVec 64))
(declare-fun temp101_44 () (_ BitVec 64))
(declare-fun temp101_45 () (_ BitVec 64))
(declare-fun temp101_46 () (_ BitVec 64))
(declare-fun temp101_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp101_48 () (_ BitVec 64))
(declare-fun temp101_49 () (_ BitVec 64))
(declare-fun temp101_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp101_51 () (_ BitVec 64))
(declare-fun temp101_52 () (_ BitVec 64))
(declare-fun temp101_53 () (_ BitVec 64))
(declare-fun temp101_54 () (_ BitVec 64))
(declare-fun temp101_55 () (_ BitVec 64))
(declare-fun temp101_56 () (_ BitVec 64))
(declare-fun temp101_57 () (_ BitVec 64))
(declare-fun temp101_58 () (_ BitVec 64))
(declare-fun temp101_59 () (_ BitVec 64))
(declare-fun temp101_60 () (_ BitVec 64))
(declare-fun temp101_61 () (_ BitVec 64))
(declare-fun temp101_62 () (_ BitVec 64))
(declare-fun temp101_63 () (_ BitVec 64))
(declare-fun temp101_64 () (_ BitVec 64))
(declare-fun temp101_65 () (_ BitVec 64))
(declare-fun temp101_66 () (_ BitVec 64))
(declare-fun temp101_67 () (_ BitVec 64))
(declare-fun temp101_68 () (_ BitVec 64))
(declare-fun temp101_69 () (_ BitVec 64))
(declare-fun temp101_70 () (_ BitVec 64))
(declare-fun temp101_71 () (_ BitVec 64))
(declare-fun temp101_72 () (_ BitVec 64))
(declare-fun temp101_73 () (_ BitVec 64))
(declare-fun temp101_74 () (_ BitVec 64))
(declare-fun temp101_75 () (_ BitVec 64))
(declare-fun temp101_76 () (_ BitVec 64))
(declare-fun temp101_77 () (_ BitVec 64))
(declare-fun temp101_78 () (_ BitVec 64))
(declare-fun temp101_79 () (_ BitVec 64))
(declare-fun temp101_80 () (_ BitVec 64))
(declare-fun temp101_81 () (_ BitVec 64))
(declare-fun temp101_82 () (_ BitVec 64))
(declare-fun temp101_83 () (_ BitVec 64))
(declare-fun temp101_84 () (_ BitVec 64))
(declare-fun temp101_85 () (_ BitVec 64))
(declare-fun temp101_86 () (_ BitVec 64))
(declare-fun temp101_87 () (_ BitVec 64))
(declare-fun temp101_88 () (_ BitVec 64))
(declare-fun temp101_89 () (_ BitVec 64))
(declare-fun temp101_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp101_91 () (_ BitVec 64))
(declare-fun temp101_92 () (_ BitVec 64))
(declare-fun temp101_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp101_94 () (_ BitVec 64))
(declare-fun temp101_95 () (_ BitVec 64))
(declare-fun temp101_96 () (_ BitVec 64))
(declare-fun temp101_97 () (_ BitVec 64))
(declare-fun temp101_98 () (_ BitVec 64))
(declare-fun temp101_99 () (_ BitVec 64))
(declare-fun temp101_100 () (_ BitVec 64))
(declare-fun temp101_101 () (_ BitVec 64))
(declare-fun temp101_102 () (_ BitVec 64))
(declare-fun temp101_103 () (_ BitVec 64))
(declare-fun temp101_104 () (_ BitVec 64))
(declare-fun temp101_105 () (_ BitVec 64))
(declare-fun temp101_106 () (_ BitVec 64))
(declare-fun temp101_107 () (_ BitVec 64))
(declare-fun temp101_108 () (_ BitVec 64))
(declare-fun temp101_109 () (_ BitVec 64))
(declare-fun temp101_110 () (_ BitVec 64))
(declare-fun temp101_111 () (_ BitVec 64))
(declare-fun temp101_112 () (_ BitVec 64))
(declare-fun temp101_113 () (_ BitVec 64))
(declare-fun temp101_114 () (_ BitVec 64))
(declare-fun temp101_115 () (_ BitVec 64))
(declare-fun temp101_116 () (_ BitVec 64))
(declare-fun temp101_117 () (_ BitVec 64))
(declare-fun temp101_118 () (_ BitVec 64))
(declare-fun temp101_119 () (_ BitVec 64))
(declare-fun temp101_120 () (_ BitVec 64))
(declare-fun temp101_121 () (_ BitVec 64))
(declare-fun temp101_122 () (_ BitVec 64))
(declare-fun temp101_123 () (_ BitVec 64))
(declare-fun temp101_124 () (_ BitVec 64))
(declare-fun temp101_125 () (_ BitVec 64))
(declare-fun temp101_126 () (_ BitVec 64))
(declare-fun temp101_127 () (_ BitVec 64))
(declare-fun temp101_128 () (_ BitVec 64))
(declare-fun temp101_129 () (_ BitVec 64))
(declare-fun temp101_130 () (_ BitVec 64))
(declare-fun temp101_131 () (_ BitVec 64))
(declare-fun temp101_132 () (_ BitVec 64))
(declare-fun temp101_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp101_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp101_135 () (_ BitVec 64))
(declare-fun temp101_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp101_137 () (_ BitVec 64))
(declare-fun temp101_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp101_139 () (_ BitVec 64))
(declare-fun temp101_140 () (_ BitVec 64))
(declare-fun temp101_141 () (_ BitVec 64))
(declare-fun temp101_142 () (_ BitVec 64))
(declare-fun temp101_143 () (_ BitVec 64))
(declare-fun temp101_144 () (_ BitVec 64))
(declare-fun temp101_145 () (_ BitVec 64))
(declare-fun temp101_146 () (_ BitVec 64))
(declare-fun temp101_147 () (_ BitVec 64))
(declare-fun temp101_148 () (_ BitVec 64))
(declare-fun temp101_149 () (_ BitVec 64))
(declare-fun temp101_150 () (_ BitVec 64))
(declare-fun temp101_151 () (_ BitVec 64))
(declare-fun temp101_152 () (_ BitVec 64))
(declare-fun temp101_153 () (_ BitVec 64))
(declare-fun temp101_154 () (_ BitVec 64))
(declare-fun temp101_156 () (_ BitVec 64))
(declare-fun temp101_157 () (_ BitVec 64))
(declare-fun temp101_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp101_158 () (_ BitVec 64))
(declare-fun temp101_159 () (_ BitVec 64))
(declare-fun temp101_161 () (_ BitVec 64))
(declare-fun temp101_162 () (_ BitVec 64))
(declare-fun temp101_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp101_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp101_164 () (_ BitVec 64))
(declare-fun temp101_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp101_166 () (_ BitVec 64))
(declare-fun temp101_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp101_168 () (_ BitVec 64))
(declare-fun temp101_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp101_170 () (_ BitVec 64))
(declare-fun temp101_171 () (_ BitVec 64))
(declare-fun temp101_172 () (_ BitVec 64))
(declare-fun temp101_173 () (_ BitVec 64))
(declare-fun temp101_174 () (_ BitVec 64))
(declare-fun temp101_175 () (_ BitVec 64))
(declare-fun temp101_176 () (_ BitVec 64))
(declare-fun temp101_177 () (_ BitVec 64))
(declare-fun temp101_178 () (_ BitVec 64))
(declare-fun temp101_179 () (_ BitVec 64))
(declare-fun temp101_180 () (_ BitVec 64))
(declare-fun temp101_181 () (_ BitVec 64))
(declare-fun temp101_182 () (_ BitVec 64))
(declare-fun temp101_183 () (_ BitVec 64))
(declare-fun temp101_184 () (_ BitVec 64))
(declare-fun temp101_185 () (_ BitVec 64))
(declare-fun temp101_186 () (_ BitVec 64))
(declare-fun temp101_187 () (_ BitVec 64))
(declare-fun temp101_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp101_189 () (_ BitVec 64))
(declare-fun temp101_191 () (_ BitVec 64))
(declare-fun temp101_192 () (_ BitVec 64))
(declare-fun temp101_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp101_193 () (_ BitVec 64))
(declare-fun temp101_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp101_195 () (_ BitVec 64))
(declare-fun temp101_196 () (_ BitVec 64))
(declare-fun temp101_197 () (_ BitVec 64))
(declare-fun temp101_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp101_199 () (_ BitVec 64))
(declare-fun temp101_200 () (_ BitVec 64))
(declare-fun temp101_201 () (_ BitVec 64))
(declare-fun temp101_202 () (_ BitVec 64))
(declare-fun temp101_203 () (_ BitVec 64))
(declare-fun temp101_204 () (_ BitVec 64))
(declare-fun temp101_205 () (_ BitVec 64))
(declare-fun temp101_206 () (_ BitVec 64))
(declare-fun temp101_207 () (_ BitVec 64))
(declare-fun temp101_208 () (_ BitVec 64))
(declare-fun temp101_209 () (_ BitVec 64))
(declare-fun temp101_210 () (_ BitVec 64))
(declare-fun temp101_211 () (_ BitVec 64))
(declare-fun temp101_212 () (_ BitVec 64))
(declare-fun temp101_213 () (_ BitVec 64))
(declare-fun temp101_214 () (_ BitVec 64))
(declare-fun temp101_215 () (_ BitVec 64))
(declare-fun temp101_216 () (_ BitVec 64))
(declare-fun temp101_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp101_218 () (_ BitVec 64))
(declare-fun temp101_220 () (_ BitVec 64))
(declare-fun temp101_221 () (_ BitVec 64))
(declare-fun temp101_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp101_222 () (_ BitVec 64))
(declare-fun temp101_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp101_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp101_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp101_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp101_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp101_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp101_229 () (_ BitVec 64))
(declare-fun temp101_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp101_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp101_232 () (_ BitVec 64))
(declare-fun temp101_233 () (_ BitVec 64))
(declare-fun temp101_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp101_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp101_236 () (_ BitVec 64))
(declare-fun temp101_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp101_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp101_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun temp101_241 () (_ BitVec 64))
(declare-fun temp101_240 () (_ BitVec 64))
(declare-fun temp101_242 () (_ BitVec 64))
(declare-fun var66602 () (_ BitVec 64))
(declare-fun temp101_243 () (_ BitVec 64))
(declare-fun temp101_244 () (_ BitVec 64))
(declare-fun temp101_245 () (_ BitVec 64))
(declare-fun var80523 () (_ BitVec 64))
(declare-fun temp101_246 () (_ BitVec 64))
(declare-fun var80524 () (_ BitVec 64))
(declare-fun temp101_247 () (_ BitVec 64))
(declare-fun temp101_249 () (_ BitVec 64))
(declare-fun temp101_248 () (_ BitVec 64))
(declare-fun temp101_250 () (_ BitVec 64))
(assert (= temp101_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp101_1)))
(assert (= temp101_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp101_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_3 #x0000000000000000))
(assert (= var79869 temp101_3))
(assert (= temp101_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp101_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_5 #x0000000000000000))
(assert (= var79914 temp101_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp101_6 #x0000000000000000))
(assert (= temp101_7 temp101_6))
(assert (= temp101_8 (select ARGNAME_padding_NAMEEND_VAL temp101_7)))
(assert (= temp101_9 #x0000000000000001))
(assert (= temp101_10 temp101_9))
(assert (= temp101_11 (select ARGNAME_padding_NAMEEND_VAL temp101_10)))
(assert (= temp101_12 #x0000000000000002))
(assert (= temp101_13 temp101_12))
(assert (= temp101_14 (select ARGNAME_padding_NAMEEND_VAL temp101_13)))
(assert (= temp101_15 #x0000000000000003))
(assert (= temp101_16 temp101_15))
(assert (= temp101_17 (select ARGNAME_padding_NAMEEND_VAL temp101_16)))
(assert (= temp101_18 #x0000000000000004))
(assert (= temp101_19 temp101_18))
(assert (= temp101_20 (select ARGNAME_padding_NAMEEND_VAL temp101_19)))
(assert (= temp101_21 #x0000000000000005))
(assert (= temp101_22 temp101_21))
(assert (= temp101_23 (select ARGNAME_padding_NAMEEND_VAL temp101_22)))
(assert (= temp101_24 #x0000000000000000))
(assert (= temp101_25 #x0000000000000000))
(assert (= temp101_26 temp101_25))
(assert (= temp101_27 (select ARGNAME_padding_NAMEEND_VAL temp101_26)))
(assert (= temp101_28 #x0000000000000000))
(assert (= temp101_29 #x0000000000000001))
(assert (= temp101_30 temp101_29))
(assert (= temp101_31 (select ARGNAME_padding_NAMEEND_VAL temp101_30)))
(assert (= temp101_32 #x0000000000000000))
(assert (= temp101_33 #x0000000000000002))
(assert (= temp101_34 temp101_33))
(assert (= temp101_35 (select ARGNAME_padding_NAMEEND_VAL temp101_34)))
(assert (= temp101_36 #x0000000000000000))
(assert (= temp101_37 #x0000000000000003))
(assert (= temp101_38 temp101_37))
(assert (= temp101_39 (select ARGNAME_padding_NAMEEND_VAL temp101_38)))
(assert (= temp101_40 #x0000000000000000))
(assert (= temp101_41 #x0000000000000004))
(assert (= temp101_42 temp101_41))
(assert (= temp101_43 (select ARGNAME_padding_NAMEEND_VAL temp101_42)))
(assert (= temp101_44 #x0000000000000000))
(assert (= temp101_45 #x0000000000000005))
(assert (= temp101_46 temp101_45))
(assert (= temp101_47 (select ARGNAME_padding_NAMEEND_VAL temp101_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp101_27 temp101_24)
             (bvslt temp101_31 temp101_28)
             (bvslt temp101_35 temp101_32)
             (bvslt temp101_39 temp101_36)
             (bvslt temp101_43 temp101_40)
             (bvslt temp101_47 temp101_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_48 #x0000000000000000))
(assert (= var1322786 temp101_48))
(assert (= temp101_49 #x0000000000000000))
(assert (= temp101_50 temp101_49))
(assert (= temp101_51 (select ARGNAME_output_padding_NAMEEND_VAL temp101_50)))
(assert (= temp101_52 #x0000000000000001))
(assert (= temp101_53 temp101_52))
(assert (= temp101_54 (select ARGNAME_output_padding_NAMEEND_VAL temp101_53)))
(assert (= temp101_55 #x0000000000000002))
(assert (= temp101_56 temp101_55))
(assert (= temp101_57 (select ARGNAME_output_padding_NAMEEND_VAL temp101_56)))
(assert (= temp101_58 #x0000000000000003))
(assert (= temp101_59 temp101_58))
(assert (= temp101_60 (select ARGNAME_output_padding_NAMEEND_VAL temp101_59)))
(assert (= temp101_61 #x0000000000000004))
(assert (= temp101_62 temp101_61))
(assert (= temp101_63 (select ARGNAME_output_padding_NAMEEND_VAL temp101_62)))
(assert (= temp101_64 #x0000000000000005))
(assert (= temp101_65 temp101_64))
(assert (= temp101_66 (select ARGNAME_output_padding_NAMEEND_VAL temp101_65)))
(assert (= temp101_67 #x0000000000000000))
(assert (= temp101_68 #x0000000000000000))
(assert (= temp101_69 temp101_68))
(assert (= temp101_70 (select ARGNAME_output_padding_NAMEEND_VAL temp101_69)))
(assert (= temp101_71 #x0000000000000000))
(assert (= temp101_72 #x0000000000000001))
(assert (= temp101_73 temp101_72))
(assert (= temp101_74 (select ARGNAME_output_padding_NAMEEND_VAL temp101_73)))
(assert (= temp101_75 #x0000000000000000))
(assert (= temp101_76 #x0000000000000002))
(assert (= temp101_77 temp101_76))
(assert (= temp101_78 (select ARGNAME_output_padding_NAMEEND_VAL temp101_77)))
(assert (= temp101_79 #x0000000000000000))
(assert (= temp101_80 #x0000000000000003))
(assert (= temp101_81 temp101_80))
(assert (= temp101_82 (select ARGNAME_output_padding_NAMEEND_VAL temp101_81)))
(assert (= temp101_83 #x0000000000000000))
(assert (= temp101_84 #x0000000000000004))
(assert (= temp101_85 temp101_84))
(assert (= temp101_86 (select ARGNAME_output_padding_NAMEEND_VAL temp101_85)))
(assert (= temp101_87 #x0000000000000000))
(assert (= temp101_88 #x0000000000000005))
(assert (= temp101_89 temp101_88))
(assert (= temp101_90 (select ARGNAME_output_padding_NAMEEND_VAL temp101_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp101_70 temp101_67)
             (bvslt temp101_74 temp101_71)
             (bvslt temp101_78 temp101_75)
             (bvslt temp101_82 temp101_79)
             (bvslt temp101_86 temp101_83)
             (bvslt temp101_90 temp101_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_91 #x0000000000000000))
(assert (= var1322797 temp101_91))
(assert (= temp101_92 #x0000000000000000))
(assert (= temp101_93 temp101_92))
(assert (= temp101_94 (select ARGNAME_stride_NAMEEND_VAL temp101_93)))
(assert (= temp101_95 #x0000000000000001))
(assert (= temp101_96 temp101_95))
(assert (= temp101_97 (select ARGNAME_stride_NAMEEND_VAL temp101_96)))
(assert (= temp101_98 #x0000000000000002))
(assert (= temp101_99 temp101_98))
(assert (= temp101_100 (select ARGNAME_stride_NAMEEND_VAL temp101_99)))
(assert (= temp101_101 #x0000000000000003))
(assert (= temp101_102 temp101_101))
(assert (= temp101_103 (select ARGNAME_stride_NAMEEND_VAL temp101_102)))
(assert (= temp101_104 #x0000000000000004))
(assert (= temp101_105 temp101_104))
(assert (= temp101_106 (select ARGNAME_stride_NAMEEND_VAL temp101_105)))
(assert (= temp101_107 #x0000000000000005))
(assert (= temp101_108 temp101_107))
(assert (= temp101_109 (select ARGNAME_stride_NAMEEND_VAL temp101_108)))
(assert (= temp101_110 #x0000000000000000))
(assert (= temp101_111 #x0000000000000000))
(assert (= temp101_112 temp101_111))
(assert (= temp101_113 (select ARGNAME_stride_NAMEEND_VAL temp101_112)))
(assert (= temp101_114 #x0000000000000000))
(assert (= temp101_115 #x0000000000000001))
(assert (= temp101_116 temp101_115))
(assert (= temp101_117 (select ARGNAME_stride_NAMEEND_VAL temp101_116)))
(assert (= temp101_118 #x0000000000000000))
(assert (= temp101_119 #x0000000000000002))
(assert (= temp101_120 temp101_119))
(assert (= temp101_121 (select ARGNAME_stride_NAMEEND_VAL temp101_120)))
(assert (= temp101_122 #x0000000000000000))
(assert (= temp101_123 #x0000000000000003))
(assert (= temp101_124 temp101_123))
(assert (= temp101_125 (select ARGNAME_stride_NAMEEND_VAL temp101_124)))
(assert (= temp101_126 #x0000000000000000))
(assert (= temp101_127 #x0000000000000004))
(assert (= temp101_128 temp101_127))
(assert (= temp101_129 (select ARGNAME_stride_NAMEEND_VAL temp101_128)))
(assert (= temp101_130 #x0000000000000000))
(assert (= temp101_131 #x0000000000000005))
(assert (= temp101_132 temp101_131))
(assert (= temp101_133 (select ARGNAME_stride_NAMEEND_VAL temp101_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp101_113 temp101_110)
             (bvsle temp101_117 temp101_114)
             (bvsle temp101_121 temp101_118)
             (bvsle temp101_125 temp101_122)
             (bvsle temp101_129 temp101_126)
             (bvsle temp101_133 temp101_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_134 #x0000000000000000))
(assert (= var1322807 temp101_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_135 #x0000000000000001))
(assert (= var1322819 temp101_135))
(assert (= temp101_136 #x0000000000000000))
(assert (= var1310898 temp101_136))
(assert (= temp101_137 #x0000000000000000))
(assert (= temp101_138 temp101_137))
(assert (= temp101_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp101_138)))
(assert (= temp101_140 #x0000000000000001))
(assert (= temp101_141 temp101_140))
(assert (= temp101_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp101_141)))
(assert (= temp101_143 #x0000000000000002))
(assert (= temp101_144 temp101_143))
(assert (= temp101_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp101_144)))
(assert (= temp101_146 #x0000000000000003))
(assert (= temp101_147 temp101_146))
(assert (= temp101_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp101_147)))
(assert (= temp101_149 #x0000000000000004))
(assert (= temp101_150 temp101_149))
(assert (= temp101_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp101_150)))
(assert (= temp101_152 #x0000000000000005))
(assert (= temp101_153 temp101_152))
(assert (= temp101_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp101_153)))
(assert (= temp101_156 var1310898))
(assert (= temp101_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp101_156)))
(assert (= temp101_155 temp101_157))
(assert (= var1322852
   (ite (bvslt temp101_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_158 #x0000000000000000))
(assert (= var1322852 temp101_158))
(assert (= temp101_159 #x0000000000000000))
(assert (= var1310898 temp101_159))
(assert (= temp101_161 var1310898))
(assert (= temp101_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp101_161)))
(assert (= temp101_160 temp101_162))
(assert (= var1322874 (bvsmod temp101_160 ARGNAME_groups_NAMEEND)))
(assert (= temp101_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp101_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_164 #x0000000000000001))
(assert (= var1322875 temp101_164))
(assert (= temp101_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp101_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_166 #x0000000000000001))
(assert (= var1322895 temp101_166))
(assert (= temp101_167 #x0000000000000001))
(assert (= var1311786 temp101_167))
(assert (= temp101_168 #x0000000000000000))
(assert (= temp101_169 temp101_168))
(assert (= temp101_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_169)))
(assert (= temp101_171 #x0000000000000001))
(assert (= temp101_172 temp101_171))
(assert (= temp101_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_172)))
(assert (= temp101_174 #x0000000000000002))
(assert (= temp101_175 temp101_174))
(assert (= temp101_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_175)))
(assert (= temp101_177 #x0000000000000003))
(assert (= temp101_178 temp101_177))
(assert (= temp101_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_178)))
(assert (= temp101_180 #x0000000000000004))
(assert (= temp101_181 temp101_180))
(assert (= temp101_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_181)))
(assert (= temp101_183 #x0000000000000005))
(assert (= temp101_184 temp101_183))
(assert (= temp101_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_184)))
(assert (= temp101_186 #x0000000000000000))
(assert (= temp101_187
   (ite (bvslt var1311786 temp101_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp101_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_187)))
(assert (= var1322903 temp101_188))
(assert (bvslt (ite (bvslt var1311786 temp101_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp101_189 #x0000000000000001))
(assert (= var1311786 temp101_189))
(assert (= temp101_191 var1311786))
(assert (= temp101_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp101_191)))
(assert (= temp101_190 temp101_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp101_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_193 #x0000000000000001))
(assert (= var1322908 temp101_193))
(assert (= temp101_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp101_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_195 #x0000000000000001))
(assert (= var1322975 temp101_195))
(assert (= temp101_196 #x0000000000000000))
(assert (= var1310898 temp101_196))
(assert (= temp101_197 #x0000000000000000))
(assert (= temp101_198 temp101_197))
(assert (= temp101_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp101_198)))
(assert (= temp101_200 #x0000000000000001))
(assert (= temp101_201 temp101_200))
(assert (= temp101_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp101_201)))
(assert (= temp101_203 #x0000000000000002))
(assert (= temp101_204 temp101_203))
(assert (= temp101_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp101_204)))
(assert (= temp101_206 #x0000000000000003))
(assert (= temp101_207 temp101_206))
(assert (= temp101_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp101_207)))
(assert (= temp101_209 #x0000000000000004))
(assert (= temp101_210 temp101_209))
(assert (= temp101_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp101_210)))
(assert (= temp101_212 #x0000000000000005))
(assert (= temp101_213 temp101_212))
(assert (= temp101_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp101_213)))
(assert (= temp101_215 #x0000000000000000))
(assert (= temp101_216
   (ite (bvslt var1310898 temp101_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp101_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp101_216)))
(assert (= var1322977 temp101_217))
(assert (bvslt (ite (bvslt var1310898 temp101_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp101_218 #x0000000000000000))
(assert (= var1310898 temp101_218))
(assert (= temp101_220 var1310898))
(assert (= temp101_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp101_220)))
(assert (= temp101_219 temp101_221))
(assert (= var1322980
   (ite (= var1322977 temp101_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_222 #x0000000000000001))
(assert (= var1322980 temp101_222))
(assert (= temp101_223 #x0000000000000002))
(assert (= var1848169 temp101_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp101_225 #x0000000000000001))
(assert (= var1323065 temp101_225))
(assert (= temp101_226 #x0000000000000001))
(assert (= var3486735 temp101_226))
(assert (= temp101_227 #x0000000000000001))
(assert (= var3814415 temp101_227))
(assert (= temp101_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp101_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_229 #x0000000000000001))
(assert (= var79986 temp101_229))
(assert (= temp101_230 #x0000000000000001))
(assert (= var80116 temp101_230))
(assert (= var4796905 var80116))
(assert (= temp101_231 #x0000000000000000))
(assert (= var4784306 temp101_231))
(assert (= temp101_232 #x0000000000000000))
(assert (= temp101_233
   (ite (bvslt var4784306 temp101_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp101_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_233)))
(assert (= var4796924 temp101_234))
(assert (bvslt (ite (bvslt var4784306 temp101_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp101_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp101_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_236 #x0000000000000001))
(assert (= var4796925 temp101_236))
(assert (= temp101_237 #x0000000000000000))
(assert (= var4996927 temp101_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp101_238 #x0000000000000002))
(assert (= var5125763 temp101_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_239 #x0000000000000000))
(assert (= var5191324 temp101_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= temp101_241 #xffffffffffffffff))
(assert (= temp101_240 temp101_241))
(assert (= temp101_242 #x0000000000000001))
(assert (= var66602 temp101_242))
(assert (= temp101_243 #x0000000000000000))
(assert (= temp101_244
   (ite (bvslt var66602 temp101_243)
        (bvadd ARGNAME_input_NAMEEND_DIM var66602)
        var66602)))
(assert (= temp101_245 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_244)))
(assert (= var80523 temp101_245))
(assert (bvslt (ite (bvslt var66602 temp101_243)
            (bvadd ARGNAME_input_NAMEEND_DIM var66602)
            var66602)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp101_246 #x0000000000000000))
(assert (= var80524
   (ite (= var80523 temp101_246) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_247 #x0000000000000001))
(assert (= var80524 temp101_247))
(assert (= temp101_249 #xffffffffffffffff))
(assert (= temp101_248 temp101_249))
(assert (= temp101_250 #x0000000000000001))
(assert (= var79986 temp101_250))
(model-add temp101_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp101_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp101_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






