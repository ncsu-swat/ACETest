(declare-fun temp80_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp80_2 () (_ BitVec 64))
(declare-fun temp80_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp80_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp80_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp80_6 () (_ BitVec 64))
(declare-fun temp80_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp80_8 () (_ BitVec 64))
(declare-fun temp80_9 () (_ BitVec 64))
(declare-fun temp80_10 () (_ BitVec 64))
(declare-fun temp80_11 () (_ BitVec 64))
(declare-fun temp80_12 () (_ BitVec 64))
(declare-fun temp80_13 () (_ BitVec 64))
(declare-fun temp80_14 () (_ BitVec 64))
(declare-fun temp80_15 () (_ BitVec 64))
(declare-fun temp80_16 () (_ BitVec 64))
(declare-fun temp80_17 () (_ BitVec 64))
(declare-fun temp80_18 () (_ BitVec 64))
(declare-fun temp80_19 () (_ BitVec 64))
(declare-fun temp80_20 () (_ BitVec 64))
(declare-fun temp80_21 () (_ BitVec 64))
(declare-fun temp80_22 () (_ BitVec 64))
(declare-fun temp80_23 () (_ BitVec 64))
(declare-fun temp80_24 () (_ BitVec 64))
(declare-fun temp80_25 () (_ BitVec 64))
(declare-fun temp80_26 () (_ BitVec 64))
(declare-fun temp80_27 () (_ BitVec 64))
(declare-fun temp80_28 () (_ BitVec 64))
(declare-fun temp80_29 () (_ BitVec 64))
(declare-fun temp80_30 () (_ BitVec 64))
(declare-fun temp80_31 () (_ BitVec 64))
(declare-fun temp80_32 () (_ BitVec 64))
(declare-fun temp80_33 () (_ BitVec 64))
(declare-fun temp80_34 () (_ BitVec 64))
(declare-fun temp80_35 () (_ BitVec 64))
(declare-fun temp80_36 () (_ BitVec 64))
(declare-fun temp80_37 () (_ BitVec 64))
(declare-fun temp80_38 () (_ BitVec 64))
(declare-fun temp80_39 () (_ BitVec 64))
(declare-fun temp80_40 () (_ BitVec 64))
(declare-fun temp80_41 () (_ BitVec 64))
(declare-fun temp80_42 () (_ BitVec 64))
(declare-fun temp80_43 () (_ BitVec 64))
(declare-fun temp80_44 () (_ BitVec 64))
(declare-fun temp80_45 () (_ BitVec 64))
(declare-fun temp80_46 () (_ BitVec 64))
(declare-fun temp80_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp80_48 () (_ BitVec 64))
(declare-fun temp80_49 () (_ BitVec 64))
(declare-fun temp80_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp80_51 () (_ BitVec 64))
(declare-fun temp80_52 () (_ BitVec 64))
(declare-fun temp80_53 () (_ BitVec 64))
(declare-fun temp80_54 () (_ BitVec 64))
(declare-fun temp80_55 () (_ BitVec 64))
(declare-fun temp80_56 () (_ BitVec 64))
(declare-fun temp80_57 () (_ BitVec 64))
(declare-fun temp80_58 () (_ BitVec 64))
(declare-fun temp80_59 () (_ BitVec 64))
(declare-fun temp80_60 () (_ BitVec 64))
(declare-fun temp80_61 () (_ BitVec 64))
(declare-fun temp80_62 () (_ BitVec 64))
(declare-fun temp80_63 () (_ BitVec 64))
(declare-fun temp80_64 () (_ BitVec 64))
(declare-fun temp80_65 () (_ BitVec 64))
(declare-fun temp80_66 () (_ BitVec 64))
(declare-fun temp80_67 () (_ BitVec 64))
(declare-fun temp80_68 () (_ BitVec 64))
(declare-fun temp80_69 () (_ BitVec 64))
(declare-fun temp80_70 () (_ BitVec 64))
(declare-fun temp80_71 () (_ BitVec 64))
(declare-fun temp80_72 () (_ BitVec 64))
(declare-fun temp80_73 () (_ BitVec 64))
(declare-fun temp80_74 () (_ BitVec 64))
(declare-fun temp80_75 () (_ BitVec 64))
(declare-fun temp80_76 () (_ BitVec 64))
(declare-fun temp80_77 () (_ BitVec 64))
(declare-fun temp80_78 () (_ BitVec 64))
(declare-fun temp80_79 () (_ BitVec 64))
(declare-fun temp80_80 () (_ BitVec 64))
(declare-fun temp80_81 () (_ BitVec 64))
(declare-fun temp80_82 () (_ BitVec 64))
(declare-fun temp80_83 () (_ BitVec 64))
(declare-fun temp80_84 () (_ BitVec 64))
(declare-fun temp80_85 () (_ BitVec 64))
(declare-fun temp80_86 () (_ BitVec 64))
(declare-fun temp80_87 () (_ BitVec 64))
(declare-fun temp80_88 () (_ BitVec 64))
(declare-fun temp80_89 () (_ BitVec 64))
(declare-fun temp80_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp80_91 () (_ BitVec 64))
(declare-fun temp80_92 () (_ BitVec 64))
(declare-fun temp80_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp80_94 () (_ BitVec 64))
(declare-fun temp80_95 () (_ BitVec 64))
(declare-fun temp80_96 () (_ BitVec 64))
(declare-fun temp80_97 () (_ BitVec 64))
(declare-fun temp80_98 () (_ BitVec 64))
(declare-fun temp80_99 () (_ BitVec 64))
(declare-fun temp80_100 () (_ BitVec 64))
(declare-fun temp80_101 () (_ BitVec 64))
(declare-fun temp80_102 () (_ BitVec 64))
(declare-fun temp80_103 () (_ BitVec 64))
(declare-fun temp80_104 () (_ BitVec 64))
(declare-fun temp80_105 () (_ BitVec 64))
(declare-fun temp80_106 () (_ BitVec 64))
(declare-fun temp80_107 () (_ BitVec 64))
(declare-fun temp80_108 () (_ BitVec 64))
(declare-fun temp80_109 () (_ BitVec 64))
(declare-fun temp80_110 () (_ BitVec 64))
(declare-fun temp80_111 () (_ BitVec 64))
(declare-fun temp80_112 () (_ BitVec 64))
(declare-fun temp80_113 () (_ BitVec 64))
(declare-fun temp80_114 () (_ BitVec 64))
(declare-fun temp80_115 () (_ BitVec 64))
(declare-fun temp80_116 () (_ BitVec 64))
(declare-fun temp80_117 () (_ BitVec 64))
(declare-fun temp80_118 () (_ BitVec 64))
(declare-fun temp80_119 () (_ BitVec 64))
(declare-fun temp80_120 () (_ BitVec 64))
(declare-fun temp80_121 () (_ BitVec 64))
(declare-fun temp80_122 () (_ BitVec 64))
(declare-fun temp80_123 () (_ BitVec 64))
(declare-fun temp80_124 () (_ BitVec 64))
(declare-fun temp80_125 () (_ BitVec 64))
(declare-fun temp80_126 () (_ BitVec 64))
(declare-fun temp80_127 () (_ BitVec 64))
(declare-fun temp80_128 () (_ BitVec 64))
(declare-fun temp80_129 () (_ BitVec 64))
(declare-fun temp80_130 () (_ BitVec 64))
(declare-fun temp80_131 () (_ BitVec 64))
(declare-fun temp80_132 () (_ BitVec 64))
(declare-fun temp80_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp80_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp80_135 () (_ BitVec 64))
(declare-fun temp80_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp80_137 () (_ BitVec 64))
(declare-fun temp80_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp80_139 () (_ BitVec 64))
(declare-fun temp80_140 () (_ BitVec 64))
(declare-fun temp80_141 () (_ BitVec 64))
(declare-fun temp80_142 () (_ BitVec 64))
(declare-fun temp80_143 () (_ BitVec 64))
(declare-fun temp80_144 () (_ BitVec 64))
(declare-fun temp80_145 () (_ BitVec 64))
(declare-fun temp80_146 () (_ BitVec 64))
(declare-fun temp80_147 () (_ BitVec 64))
(declare-fun temp80_148 () (_ BitVec 64))
(declare-fun temp80_149 () (_ BitVec 64))
(declare-fun temp80_150 () (_ BitVec 64))
(declare-fun temp80_151 () (_ BitVec 64))
(declare-fun temp80_152 () (_ BitVec 64))
(declare-fun temp80_153 () (_ BitVec 64))
(declare-fun temp80_154 () (_ BitVec 64))
(declare-fun temp80_156 () (_ BitVec 64))
(declare-fun temp80_157 () (_ BitVec 64))
(declare-fun temp80_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp80_158 () (_ BitVec 64))
(declare-fun temp80_159 () (_ BitVec 64))
(declare-fun temp80_161 () (_ BitVec 64))
(declare-fun temp80_162 () (_ BitVec 64))
(declare-fun temp80_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp80_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp80_164 () (_ BitVec 64))
(declare-fun temp80_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp80_166 () (_ BitVec 64))
(declare-fun temp80_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp80_168 () (_ BitVec 64))
(declare-fun temp80_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp80_170 () (_ BitVec 64))
(declare-fun temp80_171 () (_ BitVec 64))
(declare-fun temp80_172 () (_ BitVec 64))
(declare-fun temp80_173 () (_ BitVec 64))
(declare-fun temp80_174 () (_ BitVec 64))
(declare-fun temp80_175 () (_ BitVec 64))
(declare-fun temp80_176 () (_ BitVec 64))
(declare-fun temp80_177 () (_ BitVec 64))
(declare-fun temp80_178 () (_ BitVec 64))
(declare-fun temp80_179 () (_ BitVec 64))
(declare-fun temp80_180 () (_ BitVec 64))
(declare-fun temp80_181 () (_ BitVec 64))
(declare-fun temp80_182 () (_ BitVec 64))
(declare-fun temp80_183 () (_ BitVec 64))
(declare-fun temp80_184 () (_ BitVec 64))
(declare-fun temp80_185 () (_ BitVec 64))
(declare-fun temp80_186 () (_ BitVec 64))
(declare-fun temp80_187 () (_ BitVec 64))
(declare-fun temp80_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp80_189 () (_ BitVec 64))
(declare-fun temp80_191 () (_ BitVec 64))
(declare-fun temp80_192 () (_ BitVec 64))
(declare-fun temp80_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp80_193 () (_ BitVec 64))
(declare-fun temp80_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp80_195 () (_ BitVec 64))
(declare-fun temp80_196 () (_ BitVec 64))
(declare-fun temp80_197 () (_ BitVec 64))
(declare-fun temp80_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp80_199 () (_ BitVec 64))
(declare-fun temp80_200 () (_ BitVec 64))
(declare-fun temp80_201 () (_ BitVec 64))
(declare-fun temp80_202 () (_ BitVec 64))
(declare-fun temp80_203 () (_ BitVec 64))
(declare-fun temp80_204 () (_ BitVec 64))
(declare-fun temp80_205 () (_ BitVec 64))
(declare-fun temp80_206 () (_ BitVec 64))
(declare-fun temp80_207 () (_ BitVec 64))
(declare-fun temp80_208 () (_ BitVec 64))
(declare-fun temp80_209 () (_ BitVec 64))
(declare-fun temp80_210 () (_ BitVec 64))
(declare-fun temp80_211 () (_ BitVec 64))
(declare-fun temp80_212 () (_ BitVec 64))
(declare-fun temp80_213 () (_ BitVec 64))
(declare-fun temp80_214 () (_ BitVec 64))
(declare-fun temp80_215 () (_ BitVec 64))
(declare-fun temp80_216 () (_ BitVec 64))
(declare-fun temp80_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp80_218 () (_ BitVec 64))
(declare-fun temp80_220 () (_ BitVec 64))
(declare-fun temp80_221 () (_ BitVec 64))
(declare-fun temp80_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp80_222 () (_ BitVec 64))
(declare-fun temp80_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp80_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp80_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp80_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp80_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp80_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp80_229 () (_ BitVec 64))
(declare-fun temp80_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp80_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp80_232 () (_ BitVec 64))
(declare-fun temp80_233 () (_ BitVec 64))
(declare-fun temp80_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp80_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp80_236 () (_ BitVec 64))
(declare-fun temp80_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp80_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp80_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun var5714320 () (_ BitVec 64))
(declare-fun temp80_240 () (_ BitVec 64))
(declare-fun ARGNAME_benchmark_NAMEEND () (_ BitVec 64))
(declare-fun var80421 () (_ BitVec 64))
(declare-fun temp80_241 () (_ BitVec 64))
(declare-fun ARGNAME_deterministic_NAMEEND () (_ BitVec 64))
(declare-fun var80423 () (_ BitVec 64))
(declare-fun temp80_242 () (_ BitVec 64))
(declare-fun ARGNAME_allow_tf32_NAMEEND () (_ BitVec 64))
(declare-fun var80425 () (_ BitVec 64))
(declare-fun temp80_243 () (_ BitVec 64))
(assert (= temp80_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp80_1)))
(assert (= temp80_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp80_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_3 #x0000000000000000))
(assert (= var79869 temp80_3))
(assert (= temp80_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp80_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_5 #x0000000000000000))
(assert (= var79914 temp80_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp80_6 #x0000000000000000))
(assert (= temp80_7 temp80_6))
(assert (= temp80_8 (select ARGNAME_padding_NAMEEND_VAL temp80_7)))
(assert (= temp80_9 #x0000000000000001))
(assert (= temp80_10 temp80_9))
(assert (= temp80_11 (select ARGNAME_padding_NAMEEND_VAL temp80_10)))
(assert (= temp80_12 #x0000000000000002))
(assert (= temp80_13 temp80_12))
(assert (= temp80_14 (select ARGNAME_padding_NAMEEND_VAL temp80_13)))
(assert (= temp80_15 #x0000000000000003))
(assert (= temp80_16 temp80_15))
(assert (= temp80_17 (select ARGNAME_padding_NAMEEND_VAL temp80_16)))
(assert (= temp80_18 #x0000000000000004))
(assert (= temp80_19 temp80_18))
(assert (= temp80_20 (select ARGNAME_padding_NAMEEND_VAL temp80_19)))
(assert (= temp80_21 #x0000000000000005))
(assert (= temp80_22 temp80_21))
(assert (= temp80_23 (select ARGNAME_padding_NAMEEND_VAL temp80_22)))
(assert (= temp80_24 #x0000000000000000))
(assert (= temp80_25 #x0000000000000000))
(assert (= temp80_26 temp80_25))
(assert (= temp80_27 (select ARGNAME_padding_NAMEEND_VAL temp80_26)))
(assert (= temp80_28 #x0000000000000000))
(assert (= temp80_29 #x0000000000000001))
(assert (= temp80_30 temp80_29))
(assert (= temp80_31 (select ARGNAME_padding_NAMEEND_VAL temp80_30)))
(assert (= temp80_32 #x0000000000000000))
(assert (= temp80_33 #x0000000000000002))
(assert (= temp80_34 temp80_33))
(assert (= temp80_35 (select ARGNAME_padding_NAMEEND_VAL temp80_34)))
(assert (= temp80_36 #x0000000000000000))
(assert (= temp80_37 #x0000000000000003))
(assert (= temp80_38 temp80_37))
(assert (= temp80_39 (select ARGNAME_padding_NAMEEND_VAL temp80_38)))
(assert (= temp80_40 #x0000000000000000))
(assert (= temp80_41 #x0000000000000004))
(assert (= temp80_42 temp80_41))
(assert (= temp80_43 (select ARGNAME_padding_NAMEEND_VAL temp80_42)))
(assert (= temp80_44 #x0000000000000000))
(assert (= temp80_45 #x0000000000000005))
(assert (= temp80_46 temp80_45))
(assert (= temp80_47 (select ARGNAME_padding_NAMEEND_VAL temp80_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp80_27 temp80_24)
             (bvslt temp80_31 temp80_28)
             (bvslt temp80_35 temp80_32)
             (bvslt temp80_39 temp80_36)
             (bvslt temp80_43 temp80_40)
             (bvslt temp80_47 temp80_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_48 #x0000000000000000))
(assert (= var1322786 temp80_48))
(assert (= temp80_49 #x0000000000000000))
(assert (= temp80_50 temp80_49))
(assert (= temp80_51 (select ARGNAME_output_padding_NAMEEND_VAL temp80_50)))
(assert (= temp80_52 #x0000000000000001))
(assert (= temp80_53 temp80_52))
(assert (= temp80_54 (select ARGNAME_output_padding_NAMEEND_VAL temp80_53)))
(assert (= temp80_55 #x0000000000000002))
(assert (= temp80_56 temp80_55))
(assert (= temp80_57 (select ARGNAME_output_padding_NAMEEND_VAL temp80_56)))
(assert (= temp80_58 #x0000000000000003))
(assert (= temp80_59 temp80_58))
(assert (= temp80_60 (select ARGNAME_output_padding_NAMEEND_VAL temp80_59)))
(assert (= temp80_61 #x0000000000000004))
(assert (= temp80_62 temp80_61))
(assert (= temp80_63 (select ARGNAME_output_padding_NAMEEND_VAL temp80_62)))
(assert (= temp80_64 #x0000000000000005))
(assert (= temp80_65 temp80_64))
(assert (= temp80_66 (select ARGNAME_output_padding_NAMEEND_VAL temp80_65)))
(assert (= temp80_67 #x0000000000000000))
(assert (= temp80_68 #x0000000000000000))
(assert (= temp80_69 temp80_68))
(assert (= temp80_70 (select ARGNAME_output_padding_NAMEEND_VAL temp80_69)))
(assert (= temp80_71 #x0000000000000000))
(assert (= temp80_72 #x0000000000000001))
(assert (= temp80_73 temp80_72))
(assert (= temp80_74 (select ARGNAME_output_padding_NAMEEND_VAL temp80_73)))
(assert (= temp80_75 #x0000000000000000))
(assert (= temp80_76 #x0000000000000002))
(assert (= temp80_77 temp80_76))
(assert (= temp80_78 (select ARGNAME_output_padding_NAMEEND_VAL temp80_77)))
(assert (= temp80_79 #x0000000000000000))
(assert (= temp80_80 #x0000000000000003))
(assert (= temp80_81 temp80_80))
(assert (= temp80_82 (select ARGNAME_output_padding_NAMEEND_VAL temp80_81)))
(assert (= temp80_83 #x0000000000000000))
(assert (= temp80_84 #x0000000000000004))
(assert (= temp80_85 temp80_84))
(assert (= temp80_86 (select ARGNAME_output_padding_NAMEEND_VAL temp80_85)))
(assert (= temp80_87 #x0000000000000000))
(assert (= temp80_88 #x0000000000000005))
(assert (= temp80_89 temp80_88))
(assert (= temp80_90 (select ARGNAME_output_padding_NAMEEND_VAL temp80_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp80_70 temp80_67)
             (bvslt temp80_74 temp80_71)
             (bvslt temp80_78 temp80_75)
             (bvslt temp80_82 temp80_79)
             (bvslt temp80_86 temp80_83)
             (bvslt temp80_90 temp80_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_91 #x0000000000000000))
(assert (= var1322797 temp80_91))
(assert (= temp80_92 #x0000000000000000))
(assert (= temp80_93 temp80_92))
(assert (= temp80_94 (select ARGNAME_stride_NAMEEND_VAL temp80_93)))
(assert (= temp80_95 #x0000000000000001))
(assert (= temp80_96 temp80_95))
(assert (= temp80_97 (select ARGNAME_stride_NAMEEND_VAL temp80_96)))
(assert (= temp80_98 #x0000000000000002))
(assert (= temp80_99 temp80_98))
(assert (= temp80_100 (select ARGNAME_stride_NAMEEND_VAL temp80_99)))
(assert (= temp80_101 #x0000000000000003))
(assert (= temp80_102 temp80_101))
(assert (= temp80_103 (select ARGNAME_stride_NAMEEND_VAL temp80_102)))
(assert (= temp80_104 #x0000000000000004))
(assert (= temp80_105 temp80_104))
(assert (= temp80_106 (select ARGNAME_stride_NAMEEND_VAL temp80_105)))
(assert (= temp80_107 #x0000000000000005))
(assert (= temp80_108 temp80_107))
(assert (= temp80_109 (select ARGNAME_stride_NAMEEND_VAL temp80_108)))
(assert (= temp80_110 #x0000000000000000))
(assert (= temp80_111 #x0000000000000000))
(assert (= temp80_112 temp80_111))
(assert (= temp80_113 (select ARGNAME_stride_NAMEEND_VAL temp80_112)))
(assert (= temp80_114 #x0000000000000000))
(assert (= temp80_115 #x0000000000000001))
(assert (= temp80_116 temp80_115))
(assert (= temp80_117 (select ARGNAME_stride_NAMEEND_VAL temp80_116)))
(assert (= temp80_118 #x0000000000000000))
(assert (= temp80_119 #x0000000000000002))
(assert (= temp80_120 temp80_119))
(assert (= temp80_121 (select ARGNAME_stride_NAMEEND_VAL temp80_120)))
(assert (= temp80_122 #x0000000000000000))
(assert (= temp80_123 #x0000000000000003))
(assert (= temp80_124 temp80_123))
(assert (= temp80_125 (select ARGNAME_stride_NAMEEND_VAL temp80_124)))
(assert (= temp80_126 #x0000000000000000))
(assert (= temp80_127 #x0000000000000004))
(assert (= temp80_128 temp80_127))
(assert (= temp80_129 (select ARGNAME_stride_NAMEEND_VAL temp80_128)))
(assert (= temp80_130 #x0000000000000000))
(assert (= temp80_131 #x0000000000000005))
(assert (= temp80_132 temp80_131))
(assert (= temp80_133 (select ARGNAME_stride_NAMEEND_VAL temp80_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp80_113 temp80_110)
             (bvsle temp80_117 temp80_114)
             (bvsle temp80_121 temp80_118)
             (bvsle temp80_125 temp80_122)
             (bvsle temp80_129 temp80_126)
             (bvsle temp80_133 temp80_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_134 #x0000000000000000))
(assert (= var1322807 temp80_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_135 #x0000000000000001))
(assert (= var1322819 temp80_135))
(assert (= temp80_136 #x0000000000000000))
(assert (= var1310898 temp80_136))
(assert (= temp80_137 #x0000000000000000))
(assert (= temp80_138 temp80_137))
(assert (= temp80_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp80_138)))
(assert (= temp80_140 #x0000000000000001))
(assert (= temp80_141 temp80_140))
(assert (= temp80_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp80_141)))
(assert (= temp80_143 #x0000000000000002))
(assert (= temp80_144 temp80_143))
(assert (= temp80_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp80_144)))
(assert (= temp80_146 #x0000000000000003))
(assert (= temp80_147 temp80_146))
(assert (= temp80_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp80_147)))
(assert (= temp80_149 #x0000000000000004))
(assert (= temp80_150 temp80_149))
(assert (= temp80_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp80_150)))
(assert (= temp80_152 #x0000000000000005))
(assert (= temp80_153 temp80_152))
(assert (= temp80_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp80_153)))
(assert (= temp80_156 var1310898))
(assert (= temp80_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp80_156)))
(assert (= temp80_155 temp80_157))
(assert (= var1322852
   (ite (bvslt temp80_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_158 #x0000000000000000))
(assert (= var1322852 temp80_158))
(assert (= temp80_159 #x0000000000000000))
(assert (= var1310898 temp80_159))
(assert (= temp80_161 var1310898))
(assert (= temp80_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp80_161)))
(assert (= temp80_160 temp80_162))
(assert (= var1322874 (bvsmod temp80_160 ARGNAME_groups_NAMEEND)))
(assert (= temp80_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp80_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp80_164 #x0000000000000001))
(assert (= var1322875 temp80_164))
(assert (= temp80_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp80_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_166 #x0000000000000001))
(assert (= var1322895 temp80_166))
(assert (= temp80_167 #x0000000000000001))
(assert (= var1311786 temp80_167))
(assert (= temp80_168 #x0000000000000000))
(assert (= temp80_169 temp80_168))
(assert (= temp80_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp80_169)))
(assert (= temp80_171 #x0000000000000001))
(assert (= temp80_172 temp80_171))
(assert (= temp80_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp80_172)))
(assert (= temp80_174 #x0000000000000002))
(assert (= temp80_175 temp80_174))
(assert (= temp80_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp80_175)))
(assert (= temp80_177 #x0000000000000003))
(assert (= temp80_178 temp80_177))
(assert (= temp80_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp80_178)))
(assert (= temp80_180 #x0000000000000004))
(assert (= temp80_181 temp80_180))
(assert (= temp80_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp80_181)))
(assert (= temp80_183 #x0000000000000005))
(assert (= temp80_184 temp80_183))
(assert (= temp80_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp80_184)))
(assert (= temp80_186 #x0000000000000000))
(assert (= temp80_187
   (ite (bvslt var1311786 temp80_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp80_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp80_187)))
(assert (= var1322903 temp80_188))
(assert (bvslt (ite (bvslt var1311786 temp80_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp80_189 #x0000000000000001))
(assert (= var1311786 temp80_189))
(assert (= temp80_191 var1311786))
(assert (= temp80_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp80_191)))
(assert (= temp80_190 temp80_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp80_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp80_193 #x0000000000000001))
(assert (= var1322908 temp80_193))
(assert (= temp80_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp80_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_195 #x0000000000000001))
(assert (= var1322975 temp80_195))
(assert (= temp80_196 #x0000000000000000))
(assert (= var1310898 temp80_196))
(assert (= temp80_197 #x0000000000000000))
(assert (= temp80_198 temp80_197))
(assert (= temp80_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp80_198)))
(assert (= temp80_200 #x0000000000000001))
(assert (= temp80_201 temp80_200))
(assert (= temp80_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp80_201)))
(assert (= temp80_203 #x0000000000000002))
(assert (= temp80_204 temp80_203))
(assert (= temp80_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp80_204)))
(assert (= temp80_206 #x0000000000000003))
(assert (= temp80_207 temp80_206))
(assert (= temp80_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp80_207)))
(assert (= temp80_209 #x0000000000000004))
(assert (= temp80_210 temp80_209))
(assert (= temp80_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp80_210)))
(assert (= temp80_212 #x0000000000000005))
(assert (= temp80_213 temp80_212))
(assert (= temp80_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp80_213)))
(assert (= temp80_215 #x0000000000000000))
(assert (= temp80_216
   (ite (bvslt var1310898 temp80_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp80_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp80_216)))
(assert (= var1322977 temp80_217))
(assert (bvslt (ite (bvslt var1310898 temp80_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp80_218 #x0000000000000000))
(assert (= var1310898 temp80_218))
(assert (= temp80_220 var1310898))
(assert (= temp80_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp80_220)))
(assert (= temp80_219 temp80_221))
(assert (= var1322980
   (ite (= var1322977 temp80_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp80_222 #x0000000000000001))
(assert (= var1322980 temp80_222))
(assert (= temp80_223 #x0000000000000002))
(assert (= var1848169 temp80_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp80_225 #x0000000000000001))
(assert (= var1323065 temp80_225))
(assert (= temp80_226 #x0000000000000001))
(assert (= var3486735 temp80_226))
(assert (= temp80_227 #x0000000000000001))
(assert (= var3814415 temp80_227))
(assert (= temp80_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp80_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_229 #x0000000000000001))
(assert (= var79986 temp80_229))
(assert (= temp80_230 #x0000000000000001))
(assert (= var80116 temp80_230))
(assert (= var4796905 var80116))
(assert (= temp80_231 #x0000000000000000))
(assert (= var4784306 temp80_231))
(assert (= temp80_232 #x0000000000000000))
(assert (= temp80_233
   (ite (bvslt var4784306 temp80_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp80_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp80_233)))
(assert (= var4796924 temp80_234))
(assert (bvslt (ite (bvslt var4784306 temp80_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp80_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp80_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp80_236 #x0000000000000001))
(assert (= var4796925 temp80_236))
(assert (= temp80_237 #x0000000000000000))
(assert (= var4996927 temp80_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp80_238 #x0000000000000002))
(assert (= var5125763 temp80_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_239 #x0000000000000000))
(assert (= var5191324 temp80_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= var5714320 var80129))
(assert (= temp80_240 #x0000000000000000))
(assert (= var80421
   (ite (distinct ARGNAME_benchmark_NAMEEND temp80_240)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_241 #x0000000000000000))
(assert (= var80423
   (ite (distinct ARGNAME_deterministic_NAMEEND temp80_241)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_242 #x0000000000000000))
(assert (= var80425
   (ite (distinct ARGNAME_allow_tf32_NAMEEND temp80_242)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp80_243 #x0000000000000001))
(assert (= var79986 temp80_243))
(model-add temp80_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp80_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp80_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






