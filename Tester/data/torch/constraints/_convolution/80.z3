(declare-fun temp105_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp105_2 () (_ BitVec 64))
(declare-fun temp105_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp105_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp105_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp105_6 () (_ BitVec 64))
(declare-fun temp105_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp105_8 () (_ BitVec 64))
(declare-fun temp105_9 () (_ BitVec 64))
(declare-fun temp105_10 () (_ BitVec 64))
(declare-fun temp105_11 () (_ BitVec 64))
(declare-fun temp105_12 () (_ BitVec 64))
(declare-fun temp105_13 () (_ BitVec 64))
(declare-fun temp105_14 () (_ BitVec 64))
(declare-fun temp105_15 () (_ BitVec 64))
(declare-fun temp105_16 () (_ BitVec 64))
(declare-fun temp105_17 () (_ BitVec 64))
(declare-fun temp105_18 () (_ BitVec 64))
(declare-fun temp105_19 () (_ BitVec 64))
(declare-fun temp105_20 () (_ BitVec 64))
(declare-fun temp105_21 () (_ BitVec 64))
(declare-fun temp105_22 () (_ BitVec 64))
(declare-fun temp105_23 () (_ BitVec 64))
(declare-fun temp105_24 () (_ BitVec 64))
(declare-fun temp105_25 () (_ BitVec 64))
(declare-fun temp105_26 () (_ BitVec 64))
(declare-fun temp105_27 () (_ BitVec 64))
(declare-fun temp105_28 () (_ BitVec 64))
(declare-fun temp105_29 () (_ BitVec 64))
(declare-fun temp105_30 () (_ BitVec 64))
(declare-fun temp105_31 () (_ BitVec 64))
(declare-fun temp105_32 () (_ BitVec 64))
(declare-fun temp105_33 () (_ BitVec 64))
(declare-fun temp105_34 () (_ BitVec 64))
(declare-fun temp105_35 () (_ BitVec 64))
(declare-fun temp105_36 () (_ BitVec 64))
(declare-fun temp105_37 () (_ BitVec 64))
(declare-fun temp105_38 () (_ BitVec 64))
(declare-fun temp105_39 () (_ BitVec 64))
(declare-fun temp105_40 () (_ BitVec 64))
(declare-fun temp105_41 () (_ BitVec 64))
(declare-fun temp105_42 () (_ BitVec 64))
(declare-fun temp105_43 () (_ BitVec 64))
(declare-fun temp105_44 () (_ BitVec 64))
(declare-fun temp105_45 () (_ BitVec 64))
(declare-fun temp105_46 () (_ BitVec 64))
(declare-fun temp105_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp105_48 () (_ BitVec 64))
(declare-fun temp105_49 () (_ BitVec 64))
(declare-fun temp105_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp105_51 () (_ BitVec 64))
(declare-fun temp105_52 () (_ BitVec 64))
(declare-fun temp105_53 () (_ BitVec 64))
(declare-fun temp105_54 () (_ BitVec 64))
(declare-fun temp105_55 () (_ BitVec 64))
(declare-fun temp105_56 () (_ BitVec 64))
(declare-fun temp105_57 () (_ BitVec 64))
(declare-fun temp105_58 () (_ BitVec 64))
(declare-fun temp105_59 () (_ BitVec 64))
(declare-fun temp105_60 () (_ BitVec 64))
(declare-fun temp105_61 () (_ BitVec 64))
(declare-fun temp105_62 () (_ BitVec 64))
(declare-fun temp105_63 () (_ BitVec 64))
(declare-fun temp105_64 () (_ BitVec 64))
(declare-fun temp105_65 () (_ BitVec 64))
(declare-fun temp105_66 () (_ BitVec 64))
(declare-fun temp105_67 () (_ BitVec 64))
(declare-fun temp105_68 () (_ BitVec 64))
(declare-fun temp105_69 () (_ BitVec 64))
(declare-fun temp105_70 () (_ BitVec 64))
(declare-fun temp105_71 () (_ BitVec 64))
(declare-fun temp105_72 () (_ BitVec 64))
(declare-fun temp105_73 () (_ BitVec 64))
(declare-fun temp105_74 () (_ BitVec 64))
(declare-fun temp105_75 () (_ BitVec 64))
(declare-fun temp105_76 () (_ BitVec 64))
(declare-fun temp105_77 () (_ BitVec 64))
(declare-fun temp105_78 () (_ BitVec 64))
(declare-fun temp105_79 () (_ BitVec 64))
(declare-fun temp105_80 () (_ BitVec 64))
(declare-fun temp105_81 () (_ BitVec 64))
(declare-fun temp105_82 () (_ BitVec 64))
(declare-fun temp105_83 () (_ BitVec 64))
(declare-fun temp105_84 () (_ BitVec 64))
(declare-fun temp105_85 () (_ BitVec 64))
(declare-fun temp105_86 () (_ BitVec 64))
(declare-fun temp105_87 () (_ BitVec 64))
(declare-fun temp105_88 () (_ BitVec 64))
(declare-fun temp105_89 () (_ BitVec 64))
(declare-fun temp105_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp105_91 () (_ BitVec 64))
(declare-fun temp105_92 () (_ BitVec 64))
(declare-fun temp105_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp105_94 () (_ BitVec 64))
(declare-fun temp105_95 () (_ BitVec 64))
(declare-fun temp105_96 () (_ BitVec 64))
(declare-fun temp105_97 () (_ BitVec 64))
(declare-fun temp105_98 () (_ BitVec 64))
(declare-fun temp105_99 () (_ BitVec 64))
(declare-fun temp105_100 () (_ BitVec 64))
(declare-fun temp105_101 () (_ BitVec 64))
(declare-fun temp105_102 () (_ BitVec 64))
(declare-fun temp105_103 () (_ BitVec 64))
(declare-fun temp105_104 () (_ BitVec 64))
(declare-fun temp105_105 () (_ BitVec 64))
(declare-fun temp105_106 () (_ BitVec 64))
(declare-fun temp105_107 () (_ BitVec 64))
(declare-fun temp105_108 () (_ BitVec 64))
(declare-fun temp105_109 () (_ BitVec 64))
(declare-fun temp105_110 () (_ BitVec 64))
(declare-fun temp105_111 () (_ BitVec 64))
(declare-fun temp105_112 () (_ BitVec 64))
(declare-fun temp105_113 () (_ BitVec 64))
(declare-fun temp105_114 () (_ BitVec 64))
(declare-fun temp105_115 () (_ BitVec 64))
(declare-fun temp105_116 () (_ BitVec 64))
(declare-fun temp105_117 () (_ BitVec 64))
(declare-fun temp105_118 () (_ BitVec 64))
(declare-fun temp105_119 () (_ BitVec 64))
(declare-fun temp105_120 () (_ BitVec 64))
(declare-fun temp105_121 () (_ BitVec 64))
(declare-fun temp105_122 () (_ BitVec 64))
(declare-fun temp105_123 () (_ BitVec 64))
(declare-fun temp105_124 () (_ BitVec 64))
(declare-fun temp105_125 () (_ BitVec 64))
(declare-fun temp105_126 () (_ BitVec 64))
(declare-fun temp105_127 () (_ BitVec 64))
(declare-fun temp105_128 () (_ BitVec 64))
(declare-fun temp105_129 () (_ BitVec 64))
(declare-fun temp105_130 () (_ BitVec 64))
(declare-fun temp105_131 () (_ BitVec 64))
(declare-fun temp105_132 () (_ BitVec 64))
(declare-fun temp105_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp105_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp105_135 () (_ BitVec 64))
(declare-fun temp105_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp105_137 () (_ BitVec 64))
(declare-fun temp105_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp105_139 () (_ BitVec 64))
(declare-fun temp105_140 () (_ BitVec 64))
(declare-fun temp105_141 () (_ BitVec 64))
(declare-fun temp105_142 () (_ BitVec 64))
(declare-fun temp105_143 () (_ BitVec 64))
(declare-fun temp105_144 () (_ BitVec 64))
(declare-fun temp105_145 () (_ BitVec 64))
(declare-fun temp105_146 () (_ BitVec 64))
(declare-fun temp105_147 () (_ BitVec 64))
(declare-fun temp105_148 () (_ BitVec 64))
(declare-fun temp105_149 () (_ BitVec 64))
(declare-fun temp105_150 () (_ BitVec 64))
(declare-fun temp105_151 () (_ BitVec 64))
(declare-fun temp105_152 () (_ BitVec 64))
(declare-fun temp105_153 () (_ BitVec 64))
(declare-fun temp105_154 () (_ BitVec 64))
(declare-fun temp105_156 () (_ BitVec 64))
(declare-fun temp105_157 () (_ BitVec 64))
(declare-fun temp105_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp105_158 () (_ BitVec 64))
(declare-fun temp105_159 () (_ BitVec 64))
(declare-fun temp105_161 () (_ BitVec 64))
(declare-fun temp105_162 () (_ BitVec 64))
(declare-fun temp105_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp105_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp105_164 () (_ BitVec 64))
(declare-fun temp105_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp105_166 () (_ BitVec 64))
(declare-fun temp105_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp105_168 () (_ BitVec 64))
(declare-fun temp105_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp105_170 () (_ BitVec 64))
(declare-fun temp105_171 () (_ BitVec 64))
(declare-fun temp105_172 () (_ BitVec 64))
(declare-fun temp105_173 () (_ BitVec 64))
(declare-fun temp105_174 () (_ BitVec 64))
(declare-fun temp105_175 () (_ BitVec 64))
(declare-fun temp105_176 () (_ BitVec 64))
(declare-fun temp105_177 () (_ BitVec 64))
(declare-fun temp105_178 () (_ BitVec 64))
(declare-fun temp105_179 () (_ BitVec 64))
(declare-fun temp105_180 () (_ BitVec 64))
(declare-fun temp105_181 () (_ BitVec 64))
(declare-fun temp105_182 () (_ BitVec 64))
(declare-fun temp105_183 () (_ BitVec 64))
(declare-fun temp105_184 () (_ BitVec 64))
(declare-fun temp105_185 () (_ BitVec 64))
(declare-fun temp105_186 () (_ BitVec 64))
(declare-fun temp105_187 () (_ BitVec 64))
(declare-fun temp105_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp105_189 () (_ BitVec 64))
(declare-fun temp105_191 () (_ BitVec 64))
(declare-fun temp105_192 () (_ BitVec 64))
(declare-fun temp105_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp105_193 () (_ BitVec 64))
(declare-fun temp105_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp105_195 () (_ BitVec 64))
(declare-fun temp105_196 () (_ BitVec 64))
(declare-fun temp105_197 () (_ BitVec 64))
(declare-fun temp105_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp105_199 () (_ BitVec 64))
(declare-fun temp105_200 () (_ BitVec 64))
(declare-fun temp105_201 () (_ BitVec 64))
(declare-fun temp105_202 () (_ BitVec 64))
(declare-fun temp105_203 () (_ BitVec 64))
(declare-fun temp105_204 () (_ BitVec 64))
(declare-fun temp105_205 () (_ BitVec 64))
(declare-fun temp105_206 () (_ BitVec 64))
(declare-fun temp105_207 () (_ BitVec 64))
(declare-fun temp105_208 () (_ BitVec 64))
(declare-fun temp105_209 () (_ BitVec 64))
(declare-fun temp105_210 () (_ BitVec 64))
(declare-fun temp105_211 () (_ BitVec 64))
(declare-fun temp105_212 () (_ BitVec 64))
(declare-fun temp105_213 () (_ BitVec 64))
(declare-fun temp105_214 () (_ BitVec 64))
(declare-fun temp105_215 () (_ BitVec 64))
(declare-fun temp105_216 () (_ BitVec 64))
(declare-fun temp105_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp105_218 () (_ BitVec 64))
(declare-fun temp105_220 () (_ BitVec 64))
(declare-fun temp105_221 () (_ BitVec 64))
(declare-fun temp105_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp105_222 () (_ BitVec 64))
(declare-fun temp105_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp105_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp105_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp105_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp105_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp105_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp105_229 () (_ BitVec 64))
(declare-fun temp105_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp105_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp105_232 () (_ BitVec 64))
(declare-fun temp105_233 () (_ BitVec 64))
(declare-fun temp105_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp105_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp105_236 () (_ BitVec 64))
(declare-fun temp105_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp105_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp105_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun temp105_241 () (_ BitVec 64))
(declare-fun temp105_240 () (_ BitVec 64))
(declare-fun temp105_242 () (_ BitVec 64))
(declare-fun var66602 () (_ BitVec 64))
(declare-fun temp105_243 () (_ BitVec 64))
(declare-fun temp105_244 () (_ BitVec 64))
(declare-fun temp105_245 () (_ BitVec 64))
(declare-fun var80523 () (_ BitVec 64))
(declare-fun temp105_246 () (_ BitVec 64))
(declare-fun var80524 () (_ BitVec 64))
(declare-fun temp105_247 () (_ BitVec 64))
(declare-fun temp105_249 () (_ BitVec 64))
(declare-fun temp105_248 () (_ BitVec 64))
(declare-fun temp105_250 () (_ BitVec 64))
(assert (= temp105_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp105_1)))
(assert (= temp105_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp105_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_3 #x0000000000000000))
(assert (= var79869 temp105_3))
(assert (= temp105_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp105_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_5 #x0000000000000000))
(assert (= var79914 temp105_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp105_6 #x0000000000000000))
(assert (= temp105_7 temp105_6))
(assert (= temp105_8 (select ARGNAME_padding_NAMEEND_VAL temp105_7)))
(assert (= temp105_9 #x0000000000000001))
(assert (= temp105_10 temp105_9))
(assert (= temp105_11 (select ARGNAME_padding_NAMEEND_VAL temp105_10)))
(assert (= temp105_12 #x0000000000000002))
(assert (= temp105_13 temp105_12))
(assert (= temp105_14 (select ARGNAME_padding_NAMEEND_VAL temp105_13)))
(assert (= temp105_15 #x0000000000000003))
(assert (= temp105_16 temp105_15))
(assert (= temp105_17 (select ARGNAME_padding_NAMEEND_VAL temp105_16)))
(assert (= temp105_18 #x0000000000000004))
(assert (= temp105_19 temp105_18))
(assert (= temp105_20 (select ARGNAME_padding_NAMEEND_VAL temp105_19)))
(assert (= temp105_21 #x0000000000000005))
(assert (= temp105_22 temp105_21))
(assert (= temp105_23 (select ARGNAME_padding_NAMEEND_VAL temp105_22)))
(assert (= temp105_24 #x0000000000000000))
(assert (= temp105_25 #x0000000000000000))
(assert (= temp105_26 temp105_25))
(assert (= temp105_27 (select ARGNAME_padding_NAMEEND_VAL temp105_26)))
(assert (= temp105_28 #x0000000000000000))
(assert (= temp105_29 #x0000000000000001))
(assert (= temp105_30 temp105_29))
(assert (= temp105_31 (select ARGNAME_padding_NAMEEND_VAL temp105_30)))
(assert (= temp105_32 #x0000000000000000))
(assert (= temp105_33 #x0000000000000002))
(assert (= temp105_34 temp105_33))
(assert (= temp105_35 (select ARGNAME_padding_NAMEEND_VAL temp105_34)))
(assert (= temp105_36 #x0000000000000000))
(assert (= temp105_37 #x0000000000000003))
(assert (= temp105_38 temp105_37))
(assert (= temp105_39 (select ARGNAME_padding_NAMEEND_VAL temp105_38)))
(assert (= temp105_40 #x0000000000000000))
(assert (= temp105_41 #x0000000000000004))
(assert (= temp105_42 temp105_41))
(assert (= temp105_43 (select ARGNAME_padding_NAMEEND_VAL temp105_42)))
(assert (= temp105_44 #x0000000000000000))
(assert (= temp105_45 #x0000000000000005))
(assert (= temp105_46 temp105_45))
(assert (= temp105_47 (select ARGNAME_padding_NAMEEND_VAL temp105_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp105_27 temp105_24)
             (bvslt temp105_31 temp105_28)
             (bvslt temp105_35 temp105_32)
             (bvslt temp105_39 temp105_36)
             (bvslt temp105_43 temp105_40)
             (bvslt temp105_47 temp105_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_48 #x0000000000000000))
(assert (= var1322786 temp105_48))
(assert (= temp105_49 #x0000000000000000))
(assert (= temp105_50 temp105_49))
(assert (= temp105_51 (select ARGNAME_output_padding_NAMEEND_VAL temp105_50)))
(assert (= temp105_52 #x0000000000000001))
(assert (= temp105_53 temp105_52))
(assert (= temp105_54 (select ARGNAME_output_padding_NAMEEND_VAL temp105_53)))
(assert (= temp105_55 #x0000000000000002))
(assert (= temp105_56 temp105_55))
(assert (= temp105_57 (select ARGNAME_output_padding_NAMEEND_VAL temp105_56)))
(assert (= temp105_58 #x0000000000000003))
(assert (= temp105_59 temp105_58))
(assert (= temp105_60 (select ARGNAME_output_padding_NAMEEND_VAL temp105_59)))
(assert (= temp105_61 #x0000000000000004))
(assert (= temp105_62 temp105_61))
(assert (= temp105_63 (select ARGNAME_output_padding_NAMEEND_VAL temp105_62)))
(assert (= temp105_64 #x0000000000000005))
(assert (= temp105_65 temp105_64))
(assert (= temp105_66 (select ARGNAME_output_padding_NAMEEND_VAL temp105_65)))
(assert (= temp105_67 #x0000000000000000))
(assert (= temp105_68 #x0000000000000000))
(assert (= temp105_69 temp105_68))
(assert (= temp105_70 (select ARGNAME_output_padding_NAMEEND_VAL temp105_69)))
(assert (= temp105_71 #x0000000000000000))
(assert (= temp105_72 #x0000000000000001))
(assert (= temp105_73 temp105_72))
(assert (= temp105_74 (select ARGNAME_output_padding_NAMEEND_VAL temp105_73)))
(assert (= temp105_75 #x0000000000000000))
(assert (= temp105_76 #x0000000000000002))
(assert (= temp105_77 temp105_76))
(assert (= temp105_78 (select ARGNAME_output_padding_NAMEEND_VAL temp105_77)))
(assert (= temp105_79 #x0000000000000000))
(assert (= temp105_80 #x0000000000000003))
(assert (= temp105_81 temp105_80))
(assert (= temp105_82 (select ARGNAME_output_padding_NAMEEND_VAL temp105_81)))
(assert (= temp105_83 #x0000000000000000))
(assert (= temp105_84 #x0000000000000004))
(assert (= temp105_85 temp105_84))
(assert (= temp105_86 (select ARGNAME_output_padding_NAMEEND_VAL temp105_85)))
(assert (= temp105_87 #x0000000000000000))
(assert (= temp105_88 #x0000000000000005))
(assert (= temp105_89 temp105_88))
(assert (= temp105_90 (select ARGNAME_output_padding_NAMEEND_VAL temp105_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp105_70 temp105_67)
             (bvslt temp105_74 temp105_71)
             (bvslt temp105_78 temp105_75)
             (bvslt temp105_82 temp105_79)
             (bvslt temp105_86 temp105_83)
             (bvslt temp105_90 temp105_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_91 #x0000000000000000))
(assert (= var1322797 temp105_91))
(assert (= temp105_92 #x0000000000000000))
(assert (= temp105_93 temp105_92))
(assert (= temp105_94 (select ARGNAME_stride_NAMEEND_VAL temp105_93)))
(assert (= temp105_95 #x0000000000000001))
(assert (= temp105_96 temp105_95))
(assert (= temp105_97 (select ARGNAME_stride_NAMEEND_VAL temp105_96)))
(assert (= temp105_98 #x0000000000000002))
(assert (= temp105_99 temp105_98))
(assert (= temp105_100 (select ARGNAME_stride_NAMEEND_VAL temp105_99)))
(assert (= temp105_101 #x0000000000000003))
(assert (= temp105_102 temp105_101))
(assert (= temp105_103 (select ARGNAME_stride_NAMEEND_VAL temp105_102)))
(assert (= temp105_104 #x0000000000000004))
(assert (= temp105_105 temp105_104))
(assert (= temp105_106 (select ARGNAME_stride_NAMEEND_VAL temp105_105)))
(assert (= temp105_107 #x0000000000000005))
(assert (= temp105_108 temp105_107))
(assert (= temp105_109 (select ARGNAME_stride_NAMEEND_VAL temp105_108)))
(assert (= temp105_110 #x0000000000000000))
(assert (= temp105_111 #x0000000000000000))
(assert (= temp105_112 temp105_111))
(assert (= temp105_113 (select ARGNAME_stride_NAMEEND_VAL temp105_112)))
(assert (= temp105_114 #x0000000000000000))
(assert (= temp105_115 #x0000000000000001))
(assert (= temp105_116 temp105_115))
(assert (= temp105_117 (select ARGNAME_stride_NAMEEND_VAL temp105_116)))
(assert (= temp105_118 #x0000000000000000))
(assert (= temp105_119 #x0000000000000002))
(assert (= temp105_120 temp105_119))
(assert (= temp105_121 (select ARGNAME_stride_NAMEEND_VAL temp105_120)))
(assert (= temp105_122 #x0000000000000000))
(assert (= temp105_123 #x0000000000000003))
(assert (= temp105_124 temp105_123))
(assert (= temp105_125 (select ARGNAME_stride_NAMEEND_VAL temp105_124)))
(assert (= temp105_126 #x0000000000000000))
(assert (= temp105_127 #x0000000000000004))
(assert (= temp105_128 temp105_127))
(assert (= temp105_129 (select ARGNAME_stride_NAMEEND_VAL temp105_128)))
(assert (= temp105_130 #x0000000000000000))
(assert (= temp105_131 #x0000000000000005))
(assert (= temp105_132 temp105_131))
(assert (= temp105_133 (select ARGNAME_stride_NAMEEND_VAL temp105_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp105_113 temp105_110)
             (bvsle temp105_117 temp105_114)
             (bvsle temp105_121 temp105_118)
             (bvsle temp105_125 temp105_122)
             (bvsle temp105_129 temp105_126)
             (bvsle temp105_133 temp105_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_134 #x0000000000000000))
(assert (= var1322807 temp105_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_135 #x0000000000000001))
(assert (= var1322819 temp105_135))
(assert (= temp105_136 #x0000000000000000))
(assert (= var1310898 temp105_136))
(assert (= temp105_137 #x0000000000000000))
(assert (= temp105_138 temp105_137))
(assert (= temp105_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp105_138)))
(assert (= temp105_140 #x0000000000000001))
(assert (= temp105_141 temp105_140))
(assert (= temp105_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp105_141)))
(assert (= temp105_143 #x0000000000000002))
(assert (= temp105_144 temp105_143))
(assert (= temp105_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp105_144)))
(assert (= temp105_146 #x0000000000000003))
(assert (= temp105_147 temp105_146))
(assert (= temp105_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp105_147)))
(assert (= temp105_149 #x0000000000000004))
(assert (= temp105_150 temp105_149))
(assert (= temp105_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp105_150)))
(assert (= temp105_152 #x0000000000000005))
(assert (= temp105_153 temp105_152))
(assert (= temp105_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp105_153)))
(assert (= temp105_156 var1310898))
(assert (= temp105_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp105_156)))
(assert (= temp105_155 temp105_157))
(assert (= var1322852
   (ite (bvslt temp105_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_158 #x0000000000000000))
(assert (= var1322852 temp105_158))
(assert (= temp105_159 #x0000000000000000))
(assert (= var1310898 temp105_159))
(assert (= temp105_161 var1310898))
(assert (= temp105_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp105_161)))
(assert (= temp105_160 temp105_162))
(assert (= var1322874 (bvsmod temp105_160 ARGNAME_groups_NAMEEND)))
(assert (= temp105_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp105_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp105_164 #x0000000000000001))
(assert (= var1322875 temp105_164))
(assert (= temp105_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp105_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_166 #x0000000000000001))
(assert (= var1322895 temp105_166))
(assert (= temp105_167 #x0000000000000001))
(assert (= var1311786 temp105_167))
(assert (= temp105_168 #x0000000000000000))
(assert (= temp105_169 temp105_168))
(assert (= temp105_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp105_169)))
(assert (= temp105_171 #x0000000000000001))
(assert (= temp105_172 temp105_171))
(assert (= temp105_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp105_172)))
(assert (= temp105_174 #x0000000000000002))
(assert (= temp105_175 temp105_174))
(assert (= temp105_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp105_175)))
(assert (= temp105_177 #x0000000000000003))
(assert (= temp105_178 temp105_177))
(assert (= temp105_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp105_178)))
(assert (= temp105_180 #x0000000000000004))
(assert (= temp105_181 temp105_180))
(assert (= temp105_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp105_181)))
(assert (= temp105_183 #x0000000000000005))
(assert (= temp105_184 temp105_183))
(assert (= temp105_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp105_184)))
(assert (= temp105_186 #x0000000000000000))
(assert (= temp105_187
   (ite (bvslt var1311786 temp105_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp105_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp105_187)))
(assert (= var1322903 temp105_188))
(assert (bvslt (ite (bvslt var1311786 temp105_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp105_189 #x0000000000000001))
(assert (= var1311786 temp105_189))
(assert (= temp105_191 var1311786))
(assert (= temp105_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp105_191)))
(assert (= temp105_190 temp105_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp105_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp105_193 #x0000000000000001))
(assert (= var1322908 temp105_193))
(assert (= temp105_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp105_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_195 #x0000000000000001))
(assert (= var1322975 temp105_195))
(assert (= temp105_196 #x0000000000000000))
(assert (= var1310898 temp105_196))
(assert (= temp105_197 #x0000000000000000))
(assert (= temp105_198 temp105_197))
(assert (= temp105_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp105_198)))
(assert (= temp105_200 #x0000000000000001))
(assert (= temp105_201 temp105_200))
(assert (= temp105_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp105_201)))
(assert (= temp105_203 #x0000000000000002))
(assert (= temp105_204 temp105_203))
(assert (= temp105_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp105_204)))
(assert (= temp105_206 #x0000000000000003))
(assert (= temp105_207 temp105_206))
(assert (= temp105_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp105_207)))
(assert (= temp105_209 #x0000000000000004))
(assert (= temp105_210 temp105_209))
(assert (= temp105_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp105_210)))
(assert (= temp105_212 #x0000000000000005))
(assert (= temp105_213 temp105_212))
(assert (= temp105_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp105_213)))
(assert (= temp105_215 #x0000000000000000))
(assert (= temp105_216
   (ite (bvslt var1310898 temp105_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp105_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp105_216)))
(assert (= var1322977 temp105_217))
(assert (bvslt (ite (bvslt var1310898 temp105_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp105_218 #x0000000000000000))
(assert (= var1310898 temp105_218))
(assert (= temp105_220 var1310898))
(assert (= temp105_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp105_220)))
(assert (= temp105_219 temp105_221))
(assert (= var1322980
   (ite (= var1322977 temp105_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp105_222 #x0000000000000001))
(assert (= var1322980 temp105_222))
(assert (= temp105_223 #x0000000000000002))
(assert (= var1848169 temp105_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp105_225 #x0000000000000001))
(assert (= var1323065 temp105_225))
(assert (= temp105_226 #x0000000000000001))
(assert (= var3486735 temp105_226))
(assert (= temp105_227 #x0000000000000001))
(assert (= var3814415 temp105_227))
(assert (= temp105_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp105_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_229 #x0000000000000001))
(assert (= var79986 temp105_229))
(assert (= temp105_230 #x0000000000000001))
(assert (= var80116 temp105_230))
(assert (= var4796905 var80116))
(assert (= temp105_231 #x0000000000000000))
(assert (= var4784306 temp105_231))
(assert (= temp105_232 #x0000000000000000))
(assert (= temp105_233
   (ite (bvslt var4784306 temp105_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp105_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp105_233)))
(assert (= var4796924 temp105_234))
(assert (bvslt (ite (bvslt var4784306 temp105_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp105_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp105_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp105_236 #x0000000000000001))
(assert (= var4796925 temp105_236))
(assert (= temp105_237 #x0000000000000000))
(assert (= var4996927 temp105_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp105_238 #x0000000000000002))
(assert (= var5125763 temp105_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp105_239 #x0000000000000000))
(assert (= var5191324 temp105_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= temp105_241 #xffffffffffffffff))
(assert (= temp105_240 temp105_241))
(assert (= temp105_242 #x0000000000000001))
(assert (= var66602 temp105_242))
(assert (= temp105_243 #x0000000000000000))
(assert (= temp105_244
   (ite (bvslt var66602 temp105_243)
        (bvadd ARGNAME_input_NAMEEND_DIM var66602)
        var66602)))
(assert (= temp105_245 (select ARGNAME_input_NAMEEND_DIMSIZE temp105_244)))
(assert (= var80523 temp105_245))
(assert (bvslt (ite (bvslt var66602 temp105_243)
            (bvadd ARGNAME_input_NAMEEND_DIM var66602)
            var66602)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp105_246 #x0000000000000000))
(assert (= var80524
   (ite (= var80523 temp105_246) #x0000000000000001 #x0000000000000000)))
(assert (= temp105_247 #x0000000000000001))
(assert (= var80524 temp105_247))
(assert (= temp105_249 #xffffffffffffffff))
(assert (= temp105_248 temp105_249))
(assert (= temp105_250 #x0000000000000001))
(assert (= var79986 temp105_250))
(model-add temp105_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp105_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp105_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






