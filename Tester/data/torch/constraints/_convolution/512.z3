(declare-fun temp680_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp680_2 () (_ BitVec 64))
(declare-fun temp680_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp680_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp680_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp680_6 () (_ BitVec 64))
(declare-fun temp680_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp680_8 () (_ BitVec 64))
(declare-fun temp680_9 () (_ BitVec 64))
(declare-fun temp680_10 () (_ BitVec 64))
(declare-fun temp680_11 () (_ BitVec 64))
(declare-fun temp680_12 () (_ BitVec 64))
(declare-fun temp680_13 () (_ BitVec 64))
(declare-fun temp680_14 () (_ BitVec 64))
(declare-fun temp680_15 () (_ BitVec 64))
(declare-fun temp680_16 () (_ BitVec 64))
(declare-fun temp680_17 () (_ BitVec 64))
(declare-fun temp680_18 () (_ BitVec 64))
(declare-fun temp680_19 () (_ BitVec 64))
(declare-fun temp680_20 () (_ BitVec 64))
(declare-fun temp680_21 () (_ BitVec 64))
(declare-fun temp680_22 () (_ BitVec 64))
(declare-fun temp680_23 () (_ BitVec 64))
(declare-fun temp680_24 () (_ BitVec 64))
(declare-fun temp680_25 () (_ BitVec 64))
(declare-fun temp680_26 () (_ BitVec 64))
(declare-fun temp680_27 () (_ BitVec 64))
(declare-fun temp680_28 () (_ BitVec 64))
(declare-fun temp680_29 () (_ BitVec 64))
(declare-fun temp680_30 () (_ BitVec 64))
(declare-fun temp680_31 () (_ BitVec 64))
(declare-fun temp680_32 () (_ BitVec 64))
(declare-fun temp680_33 () (_ BitVec 64))
(declare-fun temp680_34 () (_ BitVec 64))
(declare-fun temp680_35 () (_ BitVec 64))
(declare-fun temp680_36 () (_ BitVec 64))
(declare-fun temp680_37 () (_ BitVec 64))
(declare-fun temp680_38 () (_ BitVec 64))
(declare-fun temp680_39 () (_ BitVec 64))
(declare-fun temp680_40 () (_ BitVec 64))
(declare-fun temp680_41 () (_ BitVec 64))
(declare-fun temp680_42 () (_ BitVec 64))
(declare-fun temp680_43 () (_ BitVec 64))
(declare-fun temp680_44 () (_ BitVec 64))
(declare-fun temp680_45 () (_ BitVec 64))
(declare-fun temp680_46 () (_ BitVec 64))
(declare-fun temp680_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp680_48 () (_ BitVec 64))
(declare-fun temp680_49 () (_ BitVec 64))
(declare-fun temp680_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp680_51 () (_ BitVec 64))
(declare-fun temp680_52 () (_ BitVec 64))
(declare-fun temp680_53 () (_ BitVec 64))
(declare-fun temp680_54 () (_ BitVec 64))
(declare-fun temp680_55 () (_ BitVec 64))
(declare-fun temp680_56 () (_ BitVec 64))
(declare-fun temp680_57 () (_ BitVec 64))
(declare-fun temp680_58 () (_ BitVec 64))
(declare-fun temp680_59 () (_ BitVec 64))
(declare-fun temp680_60 () (_ BitVec 64))
(declare-fun temp680_61 () (_ BitVec 64))
(declare-fun temp680_62 () (_ BitVec 64))
(declare-fun temp680_63 () (_ BitVec 64))
(declare-fun temp680_64 () (_ BitVec 64))
(declare-fun temp680_65 () (_ BitVec 64))
(declare-fun temp680_66 () (_ BitVec 64))
(declare-fun temp680_67 () (_ BitVec 64))
(declare-fun temp680_68 () (_ BitVec 64))
(declare-fun temp680_69 () (_ BitVec 64))
(declare-fun temp680_70 () (_ BitVec 64))
(declare-fun temp680_71 () (_ BitVec 64))
(declare-fun temp680_72 () (_ BitVec 64))
(declare-fun temp680_73 () (_ BitVec 64))
(declare-fun temp680_74 () (_ BitVec 64))
(declare-fun temp680_75 () (_ BitVec 64))
(declare-fun temp680_76 () (_ BitVec 64))
(declare-fun temp680_77 () (_ BitVec 64))
(declare-fun temp680_78 () (_ BitVec 64))
(declare-fun temp680_79 () (_ BitVec 64))
(declare-fun temp680_80 () (_ BitVec 64))
(declare-fun temp680_81 () (_ BitVec 64))
(declare-fun temp680_82 () (_ BitVec 64))
(declare-fun temp680_83 () (_ BitVec 64))
(declare-fun temp680_84 () (_ BitVec 64))
(declare-fun temp680_85 () (_ BitVec 64))
(declare-fun temp680_86 () (_ BitVec 64))
(declare-fun temp680_87 () (_ BitVec 64))
(declare-fun temp680_88 () (_ BitVec 64))
(declare-fun temp680_89 () (_ BitVec 64))
(declare-fun temp680_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp680_91 () (_ BitVec 64))
(declare-fun temp680_92 () (_ BitVec 64))
(declare-fun temp680_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp680_94 () (_ BitVec 64))
(declare-fun temp680_95 () (_ BitVec 64))
(declare-fun temp680_96 () (_ BitVec 64))
(declare-fun temp680_97 () (_ BitVec 64))
(declare-fun temp680_98 () (_ BitVec 64))
(declare-fun temp680_99 () (_ BitVec 64))
(declare-fun temp680_100 () (_ BitVec 64))
(declare-fun temp680_101 () (_ BitVec 64))
(declare-fun temp680_102 () (_ BitVec 64))
(declare-fun temp680_103 () (_ BitVec 64))
(declare-fun temp680_104 () (_ BitVec 64))
(declare-fun temp680_105 () (_ BitVec 64))
(declare-fun temp680_106 () (_ BitVec 64))
(declare-fun temp680_107 () (_ BitVec 64))
(declare-fun temp680_108 () (_ BitVec 64))
(declare-fun temp680_109 () (_ BitVec 64))
(declare-fun temp680_110 () (_ BitVec 64))
(declare-fun temp680_111 () (_ BitVec 64))
(declare-fun temp680_112 () (_ BitVec 64))
(declare-fun temp680_113 () (_ BitVec 64))
(declare-fun temp680_114 () (_ BitVec 64))
(declare-fun temp680_115 () (_ BitVec 64))
(declare-fun temp680_116 () (_ BitVec 64))
(declare-fun temp680_117 () (_ BitVec 64))
(declare-fun temp680_118 () (_ BitVec 64))
(declare-fun temp680_119 () (_ BitVec 64))
(declare-fun temp680_120 () (_ BitVec 64))
(declare-fun temp680_121 () (_ BitVec 64))
(declare-fun temp680_122 () (_ BitVec 64))
(declare-fun temp680_123 () (_ BitVec 64))
(declare-fun temp680_124 () (_ BitVec 64))
(declare-fun temp680_125 () (_ BitVec 64))
(declare-fun temp680_126 () (_ BitVec 64))
(declare-fun temp680_127 () (_ BitVec 64))
(declare-fun temp680_128 () (_ BitVec 64))
(declare-fun temp680_129 () (_ BitVec 64))
(declare-fun temp680_130 () (_ BitVec 64))
(declare-fun temp680_131 () (_ BitVec 64))
(declare-fun temp680_132 () (_ BitVec 64))
(declare-fun temp680_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp680_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp680_135 () (_ BitVec 64))
(declare-fun temp680_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp680_137 () (_ BitVec 64))
(declare-fun temp680_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp680_139 () (_ BitVec 64))
(declare-fun temp680_140 () (_ BitVec 64))
(declare-fun temp680_141 () (_ BitVec 64))
(declare-fun temp680_142 () (_ BitVec 64))
(declare-fun temp680_143 () (_ BitVec 64))
(declare-fun temp680_144 () (_ BitVec 64))
(declare-fun temp680_145 () (_ BitVec 64))
(declare-fun temp680_146 () (_ BitVec 64))
(declare-fun temp680_147 () (_ BitVec 64))
(declare-fun temp680_148 () (_ BitVec 64))
(declare-fun temp680_149 () (_ BitVec 64))
(declare-fun temp680_150 () (_ BitVec 64))
(declare-fun temp680_151 () (_ BitVec 64))
(declare-fun temp680_152 () (_ BitVec 64))
(declare-fun temp680_153 () (_ BitVec 64))
(declare-fun temp680_154 () (_ BitVec 64))
(declare-fun temp680_156 () (_ BitVec 64))
(declare-fun temp680_157 () (_ BitVec 64))
(declare-fun temp680_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp680_158 () (_ BitVec 64))
(declare-fun temp680_159 () (_ BitVec 64))
(declare-fun temp680_161 () (_ BitVec 64))
(declare-fun temp680_162 () (_ BitVec 64))
(declare-fun temp680_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp680_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp680_164 () (_ BitVec 64))
(declare-fun temp680_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp680_166 () (_ BitVec 64))
(declare-fun temp680_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp680_168 () (_ BitVec 64))
(declare-fun temp680_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp680_170 () (_ BitVec 64))
(declare-fun temp680_171 () (_ BitVec 64))
(declare-fun temp680_172 () (_ BitVec 64))
(declare-fun temp680_173 () (_ BitVec 64))
(declare-fun temp680_174 () (_ BitVec 64))
(declare-fun temp680_175 () (_ BitVec 64))
(declare-fun temp680_176 () (_ BitVec 64))
(declare-fun temp680_177 () (_ BitVec 64))
(declare-fun temp680_178 () (_ BitVec 64))
(declare-fun temp680_179 () (_ BitVec 64))
(declare-fun temp680_180 () (_ BitVec 64))
(declare-fun temp680_181 () (_ BitVec 64))
(declare-fun temp680_182 () (_ BitVec 64))
(declare-fun temp680_183 () (_ BitVec 64))
(declare-fun temp680_184 () (_ BitVec 64))
(declare-fun temp680_185 () (_ BitVec 64))
(declare-fun temp680_186 () (_ BitVec 64))
(declare-fun temp680_187 () (_ BitVec 64))
(declare-fun temp680_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp680_189 () (_ BitVec 64))
(declare-fun temp680_191 () (_ BitVec 64))
(declare-fun temp680_192 () (_ BitVec 64))
(declare-fun temp680_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp680_193 () (_ BitVec 64))
(declare-fun temp680_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp680_195 () (_ BitVec 64))
(declare-fun temp680_196 () (_ BitVec 64))
(declare-fun temp680_197 () (_ BitVec 64))
(declare-fun temp680_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp680_199 () (_ BitVec 64))
(declare-fun temp680_200 () (_ BitVec 64))
(declare-fun temp680_201 () (_ BitVec 64))
(declare-fun temp680_202 () (_ BitVec 64))
(declare-fun temp680_203 () (_ BitVec 64))
(declare-fun temp680_204 () (_ BitVec 64))
(declare-fun temp680_205 () (_ BitVec 64))
(declare-fun temp680_206 () (_ BitVec 64))
(declare-fun temp680_207 () (_ BitVec 64))
(declare-fun temp680_208 () (_ BitVec 64))
(declare-fun temp680_209 () (_ BitVec 64))
(declare-fun temp680_210 () (_ BitVec 64))
(declare-fun temp680_211 () (_ BitVec 64))
(declare-fun temp680_212 () (_ BitVec 64))
(declare-fun temp680_213 () (_ BitVec 64))
(declare-fun temp680_214 () (_ BitVec 64))
(declare-fun temp680_215 () (_ BitVec 64))
(declare-fun temp680_216 () (_ BitVec 64))
(declare-fun temp680_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp680_218 () (_ BitVec 64))
(declare-fun temp680_220 () (_ BitVec 64))
(declare-fun temp680_221 () (_ BitVec 64))
(declare-fun temp680_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp680_222 () (_ BitVec 64))
(declare-fun temp680_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp680_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp680_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp680_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp680_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp680_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp680_229 () (_ BitVec 64))
(declare-fun temp680_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp680_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp680_232 () (_ BitVec 64))
(declare-fun temp680_233 () (_ BitVec 64))
(declare-fun temp680_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp680_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp680_236 () (_ BitVec 64))
(declare-fun temp680_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp680_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp680_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun temp680_241 () (_ BitVec 64))
(declare-fun temp680_240 () (_ BitVec 64))
(declare-fun temp680_242 () (_ BitVec 64))
(declare-fun var66602 () (_ BitVec 64))
(declare-fun temp680_243 () (_ BitVec 64))
(declare-fun temp680_244 () (_ BitVec 64))
(declare-fun temp680_245 () (_ BitVec 64))
(declare-fun var80523 () (_ BitVec 64))
(declare-fun temp680_246 () (_ BitVec 64))
(declare-fun var80524 () (_ BitVec 64))
(declare-fun temp680_247 () (_ BitVec 64))
(declare-fun temp680_249 () (_ BitVec 64))
(declare-fun temp680_248 () (_ BitVec 64))
(declare-fun temp680_250 () (_ BitVec 64))
(assert (= temp680_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp680_1)))
(assert (= temp680_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp680_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_3 #x0000000000000000))
(assert (= var79869 temp680_3))
(assert (= temp680_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp680_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_5 #x0000000000000000))
(assert (= var79914 temp680_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp680_6 #x0000000000000000))
(assert (= temp680_7 temp680_6))
(assert (= temp680_8 (select ARGNAME_padding_NAMEEND_VAL temp680_7)))
(assert (= temp680_9 #x0000000000000001))
(assert (= temp680_10 temp680_9))
(assert (= temp680_11 (select ARGNAME_padding_NAMEEND_VAL temp680_10)))
(assert (= temp680_12 #x0000000000000002))
(assert (= temp680_13 temp680_12))
(assert (= temp680_14 (select ARGNAME_padding_NAMEEND_VAL temp680_13)))
(assert (= temp680_15 #x0000000000000003))
(assert (= temp680_16 temp680_15))
(assert (= temp680_17 (select ARGNAME_padding_NAMEEND_VAL temp680_16)))
(assert (= temp680_18 #x0000000000000004))
(assert (= temp680_19 temp680_18))
(assert (= temp680_20 (select ARGNAME_padding_NAMEEND_VAL temp680_19)))
(assert (= temp680_21 #x0000000000000005))
(assert (= temp680_22 temp680_21))
(assert (= temp680_23 (select ARGNAME_padding_NAMEEND_VAL temp680_22)))
(assert (= temp680_24 #x0000000000000000))
(assert (= temp680_25 #x0000000000000000))
(assert (= temp680_26 temp680_25))
(assert (= temp680_27 (select ARGNAME_padding_NAMEEND_VAL temp680_26)))
(assert (= temp680_28 #x0000000000000000))
(assert (= temp680_29 #x0000000000000001))
(assert (= temp680_30 temp680_29))
(assert (= temp680_31 (select ARGNAME_padding_NAMEEND_VAL temp680_30)))
(assert (= temp680_32 #x0000000000000000))
(assert (= temp680_33 #x0000000000000002))
(assert (= temp680_34 temp680_33))
(assert (= temp680_35 (select ARGNAME_padding_NAMEEND_VAL temp680_34)))
(assert (= temp680_36 #x0000000000000000))
(assert (= temp680_37 #x0000000000000003))
(assert (= temp680_38 temp680_37))
(assert (= temp680_39 (select ARGNAME_padding_NAMEEND_VAL temp680_38)))
(assert (= temp680_40 #x0000000000000000))
(assert (= temp680_41 #x0000000000000004))
(assert (= temp680_42 temp680_41))
(assert (= temp680_43 (select ARGNAME_padding_NAMEEND_VAL temp680_42)))
(assert (= temp680_44 #x0000000000000000))
(assert (= temp680_45 #x0000000000000005))
(assert (= temp680_46 temp680_45))
(assert (= temp680_47 (select ARGNAME_padding_NAMEEND_VAL temp680_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp680_27 temp680_24)
             (bvslt temp680_31 temp680_28)
             (bvslt temp680_35 temp680_32)
             (bvslt temp680_39 temp680_36)
             (bvslt temp680_43 temp680_40)
             (bvslt temp680_47 temp680_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_48 #x0000000000000000))
(assert (= var1322786 temp680_48))
(assert (= temp680_49 #x0000000000000000))
(assert (= temp680_50 temp680_49))
(assert (= temp680_51 (select ARGNAME_output_padding_NAMEEND_VAL temp680_50)))
(assert (= temp680_52 #x0000000000000001))
(assert (= temp680_53 temp680_52))
(assert (= temp680_54 (select ARGNAME_output_padding_NAMEEND_VAL temp680_53)))
(assert (= temp680_55 #x0000000000000002))
(assert (= temp680_56 temp680_55))
(assert (= temp680_57 (select ARGNAME_output_padding_NAMEEND_VAL temp680_56)))
(assert (= temp680_58 #x0000000000000003))
(assert (= temp680_59 temp680_58))
(assert (= temp680_60 (select ARGNAME_output_padding_NAMEEND_VAL temp680_59)))
(assert (= temp680_61 #x0000000000000004))
(assert (= temp680_62 temp680_61))
(assert (= temp680_63 (select ARGNAME_output_padding_NAMEEND_VAL temp680_62)))
(assert (= temp680_64 #x0000000000000005))
(assert (= temp680_65 temp680_64))
(assert (= temp680_66 (select ARGNAME_output_padding_NAMEEND_VAL temp680_65)))
(assert (= temp680_67 #x0000000000000000))
(assert (= temp680_68 #x0000000000000000))
(assert (= temp680_69 temp680_68))
(assert (= temp680_70 (select ARGNAME_output_padding_NAMEEND_VAL temp680_69)))
(assert (= temp680_71 #x0000000000000000))
(assert (= temp680_72 #x0000000000000001))
(assert (= temp680_73 temp680_72))
(assert (= temp680_74 (select ARGNAME_output_padding_NAMEEND_VAL temp680_73)))
(assert (= temp680_75 #x0000000000000000))
(assert (= temp680_76 #x0000000000000002))
(assert (= temp680_77 temp680_76))
(assert (= temp680_78 (select ARGNAME_output_padding_NAMEEND_VAL temp680_77)))
(assert (= temp680_79 #x0000000000000000))
(assert (= temp680_80 #x0000000000000003))
(assert (= temp680_81 temp680_80))
(assert (= temp680_82 (select ARGNAME_output_padding_NAMEEND_VAL temp680_81)))
(assert (= temp680_83 #x0000000000000000))
(assert (= temp680_84 #x0000000000000004))
(assert (= temp680_85 temp680_84))
(assert (= temp680_86 (select ARGNAME_output_padding_NAMEEND_VAL temp680_85)))
(assert (= temp680_87 #x0000000000000000))
(assert (= temp680_88 #x0000000000000005))
(assert (= temp680_89 temp680_88))
(assert (= temp680_90 (select ARGNAME_output_padding_NAMEEND_VAL temp680_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp680_70 temp680_67)
             (bvslt temp680_74 temp680_71)
             (bvslt temp680_78 temp680_75)
             (bvslt temp680_82 temp680_79)
             (bvslt temp680_86 temp680_83)
             (bvslt temp680_90 temp680_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_91 #x0000000000000000))
(assert (= var1322797 temp680_91))
(assert (= temp680_92 #x0000000000000000))
(assert (= temp680_93 temp680_92))
(assert (= temp680_94 (select ARGNAME_stride_NAMEEND_VAL temp680_93)))
(assert (= temp680_95 #x0000000000000001))
(assert (= temp680_96 temp680_95))
(assert (= temp680_97 (select ARGNAME_stride_NAMEEND_VAL temp680_96)))
(assert (= temp680_98 #x0000000000000002))
(assert (= temp680_99 temp680_98))
(assert (= temp680_100 (select ARGNAME_stride_NAMEEND_VAL temp680_99)))
(assert (= temp680_101 #x0000000000000003))
(assert (= temp680_102 temp680_101))
(assert (= temp680_103 (select ARGNAME_stride_NAMEEND_VAL temp680_102)))
(assert (= temp680_104 #x0000000000000004))
(assert (= temp680_105 temp680_104))
(assert (= temp680_106 (select ARGNAME_stride_NAMEEND_VAL temp680_105)))
(assert (= temp680_107 #x0000000000000005))
(assert (= temp680_108 temp680_107))
(assert (= temp680_109 (select ARGNAME_stride_NAMEEND_VAL temp680_108)))
(assert (= temp680_110 #x0000000000000000))
(assert (= temp680_111 #x0000000000000000))
(assert (= temp680_112 temp680_111))
(assert (= temp680_113 (select ARGNAME_stride_NAMEEND_VAL temp680_112)))
(assert (= temp680_114 #x0000000000000000))
(assert (= temp680_115 #x0000000000000001))
(assert (= temp680_116 temp680_115))
(assert (= temp680_117 (select ARGNAME_stride_NAMEEND_VAL temp680_116)))
(assert (= temp680_118 #x0000000000000000))
(assert (= temp680_119 #x0000000000000002))
(assert (= temp680_120 temp680_119))
(assert (= temp680_121 (select ARGNAME_stride_NAMEEND_VAL temp680_120)))
(assert (= temp680_122 #x0000000000000000))
(assert (= temp680_123 #x0000000000000003))
(assert (= temp680_124 temp680_123))
(assert (= temp680_125 (select ARGNAME_stride_NAMEEND_VAL temp680_124)))
(assert (= temp680_126 #x0000000000000000))
(assert (= temp680_127 #x0000000000000004))
(assert (= temp680_128 temp680_127))
(assert (= temp680_129 (select ARGNAME_stride_NAMEEND_VAL temp680_128)))
(assert (= temp680_130 #x0000000000000000))
(assert (= temp680_131 #x0000000000000005))
(assert (= temp680_132 temp680_131))
(assert (= temp680_133 (select ARGNAME_stride_NAMEEND_VAL temp680_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp680_113 temp680_110)
             (bvsle temp680_117 temp680_114)
             (bvsle temp680_121 temp680_118)
             (bvsle temp680_125 temp680_122)
             (bvsle temp680_129 temp680_126)
             (bvsle temp680_133 temp680_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_134 #x0000000000000000))
(assert (= var1322807 temp680_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_135 #x0000000000000001))
(assert (= var1322819 temp680_135))
(assert (= temp680_136 #x0000000000000000))
(assert (= var1310898 temp680_136))
(assert (= temp680_137 #x0000000000000000))
(assert (= temp680_138 temp680_137))
(assert (= temp680_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp680_138)))
(assert (= temp680_140 #x0000000000000001))
(assert (= temp680_141 temp680_140))
(assert (= temp680_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp680_141)))
(assert (= temp680_143 #x0000000000000002))
(assert (= temp680_144 temp680_143))
(assert (= temp680_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp680_144)))
(assert (= temp680_146 #x0000000000000003))
(assert (= temp680_147 temp680_146))
(assert (= temp680_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp680_147)))
(assert (= temp680_149 #x0000000000000004))
(assert (= temp680_150 temp680_149))
(assert (= temp680_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp680_150)))
(assert (= temp680_152 #x0000000000000005))
(assert (= temp680_153 temp680_152))
(assert (= temp680_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp680_153)))
(assert (= temp680_156 var1310898))
(assert (= temp680_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp680_156)))
(assert (= temp680_155 temp680_157))
(assert (= var1322852
   (ite (bvslt temp680_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_158 #x0000000000000000))
(assert (= var1322852 temp680_158))
(assert (= temp680_159 #x0000000000000000))
(assert (= var1310898 temp680_159))
(assert (= temp680_161 var1310898))
(assert (= temp680_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp680_161)))
(assert (= temp680_160 temp680_162))
(assert (= var1322874 (bvsmod temp680_160 ARGNAME_groups_NAMEEND)))
(assert (= temp680_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp680_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp680_164 #x0000000000000001))
(assert (= var1322875 temp680_164))
(assert (= temp680_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp680_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_166 #x0000000000000001))
(assert (= var1322895 temp680_166))
(assert (= temp680_167 #x0000000000000001))
(assert (= var1311786 temp680_167))
(assert (= temp680_168 #x0000000000000000))
(assert (= temp680_169 temp680_168))
(assert (= temp680_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp680_169)))
(assert (= temp680_171 #x0000000000000001))
(assert (= temp680_172 temp680_171))
(assert (= temp680_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp680_172)))
(assert (= temp680_174 #x0000000000000002))
(assert (= temp680_175 temp680_174))
(assert (= temp680_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp680_175)))
(assert (= temp680_177 #x0000000000000003))
(assert (= temp680_178 temp680_177))
(assert (= temp680_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp680_178)))
(assert (= temp680_180 #x0000000000000004))
(assert (= temp680_181 temp680_180))
(assert (= temp680_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp680_181)))
(assert (= temp680_183 #x0000000000000005))
(assert (= temp680_184 temp680_183))
(assert (= temp680_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp680_184)))
(assert (= temp680_186 #x0000000000000000))
(assert (= temp680_187
   (ite (bvslt var1311786 temp680_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp680_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp680_187)))
(assert (= var1322903 temp680_188))
(assert (bvslt (ite (bvslt var1311786 temp680_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp680_189 #x0000000000000001))
(assert (= var1311786 temp680_189))
(assert (= temp680_191 var1311786))
(assert (= temp680_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp680_191)))
(assert (= temp680_190 temp680_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp680_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp680_193 #x0000000000000001))
(assert (= var1322908 temp680_193))
(assert (= temp680_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp680_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_195 #x0000000000000001))
(assert (= var1322975 temp680_195))
(assert (= temp680_196 #x0000000000000000))
(assert (= var1310898 temp680_196))
(assert (= temp680_197 #x0000000000000000))
(assert (= temp680_198 temp680_197))
(assert (= temp680_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp680_198)))
(assert (= temp680_200 #x0000000000000001))
(assert (= temp680_201 temp680_200))
(assert (= temp680_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp680_201)))
(assert (= temp680_203 #x0000000000000002))
(assert (= temp680_204 temp680_203))
(assert (= temp680_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp680_204)))
(assert (= temp680_206 #x0000000000000003))
(assert (= temp680_207 temp680_206))
(assert (= temp680_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp680_207)))
(assert (= temp680_209 #x0000000000000004))
(assert (= temp680_210 temp680_209))
(assert (= temp680_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp680_210)))
(assert (= temp680_212 #x0000000000000005))
(assert (= temp680_213 temp680_212))
(assert (= temp680_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp680_213)))
(assert (= temp680_215 #x0000000000000000))
(assert (= temp680_216
   (ite (bvslt var1310898 temp680_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp680_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp680_216)))
(assert (= var1322977 temp680_217))
(assert (bvslt (ite (bvslt var1310898 temp680_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp680_218 #x0000000000000000))
(assert (= var1310898 temp680_218))
(assert (= temp680_220 var1310898))
(assert (= temp680_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp680_220)))
(assert (= temp680_219 temp680_221))
(assert (= var1322980
   (ite (= var1322977 temp680_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp680_222 #x0000000000000001))
(assert (= var1322980 temp680_222))
(assert (= temp680_223 #x0000000000000002))
(assert (= var1848169 temp680_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp680_225 #x0000000000000001))
(assert (= var1323065 temp680_225))
(assert (= temp680_226 #x0000000000000001))
(assert (= var3486735 temp680_226))
(assert (= temp680_227 #x0000000000000001))
(assert (= var3814415 temp680_227))
(assert (= temp680_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp680_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_229 #x0000000000000001))
(assert (= var79986 temp680_229))
(assert (= temp680_230 #x0000000000000001))
(assert (= var80116 temp680_230))
(assert (= var4796905 var80116))
(assert (= temp680_231 #x0000000000000000))
(assert (= var4784306 temp680_231))
(assert (= temp680_232 #x0000000000000000))
(assert (= temp680_233
   (ite (bvslt var4784306 temp680_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp680_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp680_233)))
(assert (= var4796924 temp680_234))
(assert (bvslt (ite (bvslt var4784306 temp680_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp680_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp680_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp680_236 #x0000000000000001))
(assert (= var4796925 temp680_236))
(assert (= temp680_237 #x0000000000000000))
(assert (= var4996927 temp680_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp680_238 #x0000000000000002))
(assert (= var5125763 temp680_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp680_239 #x0000000000000000))
(assert (= var5191324 temp680_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= temp680_241 #xffffffffffffffff))
(assert (= temp680_240 temp680_241))
(assert (= temp680_242 #x0000000000000001))
(assert (= var66602 temp680_242))
(assert (= temp680_243 #x0000000000000000))
(assert (= temp680_244
   (ite (bvslt var66602 temp680_243)
        (bvadd ARGNAME_input_NAMEEND_DIM var66602)
        var66602)))
(assert (= temp680_245 (select ARGNAME_input_NAMEEND_DIMSIZE temp680_244)))
(assert (= var80523 temp680_245))
(assert (bvslt (ite (bvslt var66602 temp680_243)
            (bvadd ARGNAME_input_NAMEEND_DIM var66602)
            var66602)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp680_246 #x0000000000000000))
(assert (= var80524
   (ite (= var80523 temp680_246) #x0000000000000001 #x0000000000000000)))
(assert (= temp680_247 #x0000000000000001))
(assert (= var80524 temp680_247))
(assert (= temp680_249 #xffffffffffffffff))
(assert (= temp680_248 temp680_249))
(assert (= temp680_250 #x0000000000000001))
(assert (= var79986 temp680_250))
(model-add temp680_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp680_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp680_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






