(declare-fun temp765_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp765_2 () (_ BitVec 64))
(declare-fun temp765_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp765_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp765_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp765_6 () (_ BitVec 64))
(declare-fun temp765_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp765_8 () (_ BitVec 64))
(declare-fun temp765_9 () (_ BitVec 64))
(declare-fun temp765_10 () (_ BitVec 64))
(declare-fun temp765_11 () (_ BitVec 64))
(declare-fun temp765_12 () (_ BitVec 64))
(declare-fun temp765_13 () (_ BitVec 64))
(declare-fun temp765_14 () (_ BitVec 64))
(declare-fun temp765_15 () (_ BitVec 64))
(declare-fun temp765_16 () (_ BitVec 64))
(declare-fun temp765_17 () (_ BitVec 64))
(declare-fun temp765_18 () (_ BitVec 64))
(declare-fun temp765_19 () (_ BitVec 64))
(declare-fun temp765_20 () (_ BitVec 64))
(declare-fun temp765_21 () (_ BitVec 64))
(declare-fun temp765_22 () (_ BitVec 64))
(declare-fun temp765_23 () (_ BitVec 64))
(declare-fun temp765_24 () (_ BitVec 64))
(declare-fun temp765_25 () (_ BitVec 64))
(declare-fun temp765_26 () (_ BitVec 64))
(declare-fun temp765_27 () (_ BitVec 64))
(declare-fun temp765_28 () (_ BitVec 64))
(declare-fun temp765_29 () (_ BitVec 64))
(declare-fun temp765_30 () (_ BitVec 64))
(declare-fun temp765_31 () (_ BitVec 64))
(declare-fun temp765_32 () (_ BitVec 64))
(declare-fun temp765_33 () (_ BitVec 64))
(declare-fun temp765_34 () (_ BitVec 64))
(declare-fun temp765_35 () (_ BitVec 64))
(declare-fun temp765_36 () (_ BitVec 64))
(declare-fun temp765_37 () (_ BitVec 64))
(declare-fun temp765_38 () (_ BitVec 64))
(declare-fun temp765_39 () (_ BitVec 64))
(declare-fun temp765_40 () (_ BitVec 64))
(declare-fun temp765_41 () (_ BitVec 64))
(declare-fun temp765_42 () (_ BitVec 64))
(declare-fun temp765_43 () (_ BitVec 64))
(declare-fun temp765_44 () (_ BitVec 64))
(declare-fun temp765_45 () (_ BitVec 64))
(declare-fun temp765_46 () (_ BitVec 64))
(declare-fun temp765_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp765_48 () (_ BitVec 64))
(declare-fun temp765_49 () (_ BitVec 64))
(declare-fun temp765_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp765_51 () (_ BitVec 64))
(declare-fun temp765_52 () (_ BitVec 64))
(declare-fun temp765_53 () (_ BitVec 64))
(declare-fun temp765_54 () (_ BitVec 64))
(declare-fun temp765_55 () (_ BitVec 64))
(declare-fun temp765_56 () (_ BitVec 64))
(declare-fun temp765_57 () (_ BitVec 64))
(declare-fun temp765_58 () (_ BitVec 64))
(declare-fun temp765_59 () (_ BitVec 64))
(declare-fun temp765_60 () (_ BitVec 64))
(declare-fun temp765_61 () (_ BitVec 64))
(declare-fun temp765_62 () (_ BitVec 64))
(declare-fun temp765_63 () (_ BitVec 64))
(declare-fun temp765_64 () (_ BitVec 64))
(declare-fun temp765_65 () (_ BitVec 64))
(declare-fun temp765_66 () (_ BitVec 64))
(declare-fun temp765_67 () (_ BitVec 64))
(declare-fun temp765_68 () (_ BitVec 64))
(declare-fun temp765_69 () (_ BitVec 64))
(declare-fun temp765_70 () (_ BitVec 64))
(declare-fun temp765_71 () (_ BitVec 64))
(declare-fun temp765_72 () (_ BitVec 64))
(declare-fun temp765_73 () (_ BitVec 64))
(declare-fun temp765_74 () (_ BitVec 64))
(declare-fun temp765_75 () (_ BitVec 64))
(declare-fun temp765_76 () (_ BitVec 64))
(declare-fun temp765_77 () (_ BitVec 64))
(declare-fun temp765_78 () (_ BitVec 64))
(declare-fun temp765_79 () (_ BitVec 64))
(declare-fun temp765_80 () (_ BitVec 64))
(declare-fun temp765_81 () (_ BitVec 64))
(declare-fun temp765_82 () (_ BitVec 64))
(declare-fun temp765_83 () (_ BitVec 64))
(declare-fun temp765_84 () (_ BitVec 64))
(declare-fun temp765_85 () (_ BitVec 64))
(declare-fun temp765_86 () (_ BitVec 64))
(declare-fun temp765_87 () (_ BitVec 64))
(declare-fun temp765_88 () (_ BitVec 64))
(declare-fun temp765_89 () (_ BitVec 64))
(declare-fun temp765_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp765_91 () (_ BitVec 64))
(declare-fun temp765_92 () (_ BitVec 64))
(declare-fun temp765_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp765_94 () (_ BitVec 64))
(declare-fun temp765_95 () (_ BitVec 64))
(declare-fun temp765_96 () (_ BitVec 64))
(declare-fun temp765_97 () (_ BitVec 64))
(declare-fun temp765_98 () (_ BitVec 64))
(declare-fun temp765_99 () (_ BitVec 64))
(declare-fun temp765_100 () (_ BitVec 64))
(declare-fun temp765_101 () (_ BitVec 64))
(declare-fun temp765_102 () (_ BitVec 64))
(declare-fun temp765_103 () (_ BitVec 64))
(declare-fun temp765_104 () (_ BitVec 64))
(declare-fun temp765_105 () (_ BitVec 64))
(declare-fun temp765_106 () (_ BitVec 64))
(declare-fun temp765_107 () (_ BitVec 64))
(declare-fun temp765_108 () (_ BitVec 64))
(declare-fun temp765_109 () (_ BitVec 64))
(declare-fun temp765_110 () (_ BitVec 64))
(declare-fun temp765_111 () (_ BitVec 64))
(declare-fun temp765_112 () (_ BitVec 64))
(declare-fun temp765_113 () (_ BitVec 64))
(declare-fun temp765_114 () (_ BitVec 64))
(declare-fun temp765_115 () (_ BitVec 64))
(declare-fun temp765_116 () (_ BitVec 64))
(declare-fun temp765_117 () (_ BitVec 64))
(declare-fun temp765_118 () (_ BitVec 64))
(declare-fun temp765_119 () (_ BitVec 64))
(declare-fun temp765_120 () (_ BitVec 64))
(declare-fun temp765_121 () (_ BitVec 64))
(declare-fun temp765_122 () (_ BitVec 64))
(declare-fun temp765_123 () (_ BitVec 64))
(declare-fun temp765_124 () (_ BitVec 64))
(declare-fun temp765_125 () (_ BitVec 64))
(declare-fun temp765_126 () (_ BitVec 64))
(declare-fun temp765_127 () (_ BitVec 64))
(declare-fun temp765_128 () (_ BitVec 64))
(declare-fun temp765_129 () (_ BitVec 64))
(declare-fun temp765_130 () (_ BitVec 64))
(declare-fun temp765_131 () (_ BitVec 64))
(declare-fun temp765_132 () (_ BitVec 64))
(declare-fun temp765_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp765_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp765_135 () (_ BitVec 64))
(declare-fun temp765_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp765_137 () (_ BitVec 64))
(declare-fun temp765_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp765_139 () (_ BitVec 64))
(declare-fun temp765_140 () (_ BitVec 64))
(declare-fun temp765_141 () (_ BitVec 64))
(declare-fun temp765_142 () (_ BitVec 64))
(declare-fun temp765_143 () (_ BitVec 64))
(declare-fun temp765_144 () (_ BitVec 64))
(declare-fun temp765_145 () (_ BitVec 64))
(declare-fun temp765_146 () (_ BitVec 64))
(declare-fun temp765_147 () (_ BitVec 64))
(declare-fun temp765_148 () (_ BitVec 64))
(declare-fun temp765_149 () (_ BitVec 64))
(declare-fun temp765_150 () (_ BitVec 64))
(declare-fun temp765_151 () (_ BitVec 64))
(declare-fun temp765_152 () (_ BitVec 64))
(declare-fun temp765_153 () (_ BitVec 64))
(declare-fun temp765_154 () (_ BitVec 64))
(declare-fun temp765_156 () (_ BitVec 64))
(declare-fun temp765_157 () (_ BitVec 64))
(declare-fun temp765_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp765_158 () (_ BitVec 64))
(declare-fun temp765_159 () (_ BitVec 64))
(declare-fun temp765_161 () (_ BitVec 64))
(declare-fun temp765_162 () (_ BitVec 64))
(declare-fun temp765_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp765_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp765_164 () (_ BitVec 64))
(declare-fun temp765_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp765_166 () (_ BitVec 64))
(declare-fun temp765_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp765_168 () (_ BitVec 64))
(declare-fun temp765_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp765_170 () (_ BitVec 64))
(declare-fun temp765_171 () (_ BitVec 64))
(declare-fun temp765_172 () (_ BitVec 64))
(declare-fun temp765_173 () (_ BitVec 64))
(declare-fun temp765_174 () (_ BitVec 64))
(declare-fun temp765_175 () (_ BitVec 64))
(declare-fun temp765_176 () (_ BitVec 64))
(declare-fun temp765_177 () (_ BitVec 64))
(declare-fun temp765_178 () (_ BitVec 64))
(declare-fun temp765_179 () (_ BitVec 64))
(declare-fun temp765_180 () (_ BitVec 64))
(declare-fun temp765_181 () (_ BitVec 64))
(declare-fun temp765_182 () (_ BitVec 64))
(declare-fun temp765_183 () (_ BitVec 64))
(declare-fun temp765_184 () (_ BitVec 64))
(declare-fun temp765_185 () (_ BitVec 64))
(declare-fun temp765_186 () (_ BitVec 64))
(declare-fun temp765_187 () (_ BitVec 64))
(declare-fun temp765_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp765_189 () (_ BitVec 64))
(declare-fun temp765_191 () (_ BitVec 64))
(declare-fun temp765_192 () (_ BitVec 64))
(declare-fun temp765_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp765_193 () (_ BitVec 64))
(declare-fun temp765_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp765_195 () (_ BitVec 64))
(declare-fun temp765_196 () (_ BitVec 64))
(declare-fun temp765_197 () (_ BitVec 64))
(declare-fun temp765_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp765_199 () (_ BitVec 64))
(declare-fun temp765_200 () (_ BitVec 64))
(declare-fun temp765_201 () (_ BitVec 64))
(declare-fun temp765_202 () (_ BitVec 64))
(declare-fun temp765_203 () (_ BitVec 64))
(declare-fun temp765_204 () (_ BitVec 64))
(declare-fun temp765_205 () (_ BitVec 64))
(declare-fun temp765_206 () (_ BitVec 64))
(declare-fun temp765_207 () (_ BitVec 64))
(declare-fun temp765_208 () (_ BitVec 64))
(declare-fun temp765_209 () (_ BitVec 64))
(declare-fun temp765_210 () (_ BitVec 64))
(declare-fun temp765_211 () (_ BitVec 64))
(declare-fun temp765_212 () (_ BitVec 64))
(declare-fun temp765_213 () (_ BitVec 64))
(declare-fun temp765_214 () (_ BitVec 64))
(declare-fun temp765_215 () (_ BitVec 64))
(declare-fun temp765_216 () (_ BitVec 64))
(declare-fun temp765_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp765_218 () (_ BitVec 64))
(declare-fun temp765_220 () (_ BitVec 64))
(declare-fun temp765_221 () (_ BitVec 64))
(declare-fun temp765_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp765_222 () (_ BitVec 64))
(declare-fun temp765_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp765_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp765_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp765_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp765_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp765_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp765_229 () (_ BitVec 64))
(declare-fun temp765_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp765_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp765_232 () (_ BitVec 64))
(declare-fun temp765_233 () (_ BitVec 64))
(declare-fun temp765_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp765_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp765_236 () (_ BitVec 64))
(declare-fun temp765_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp765_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp765_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun temp765_241 () (_ BitVec 64))
(declare-fun temp765_240 () (_ BitVec 64))
(declare-fun temp765_242 () (_ BitVec 64))
(declare-fun var66602 () (_ BitVec 64))
(declare-fun temp765_243 () (_ BitVec 64))
(declare-fun temp765_244 () (_ BitVec 64))
(declare-fun temp765_245 () (_ BitVec 64))
(declare-fun var80523 () (_ BitVec 64))
(declare-fun temp765_246 () (_ BitVec 64))
(declare-fun var80524 () (_ BitVec 64))
(declare-fun temp765_247 () (_ BitVec 64))
(declare-fun temp765_248 () (_ BitVec 64))
(assert (= temp765_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp765_1)))
(assert (= temp765_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp765_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_3 #x0000000000000000))
(assert (= var79869 temp765_3))
(assert (= temp765_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp765_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_5 #x0000000000000000))
(assert (= var79914 temp765_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp765_6 #x0000000000000000))
(assert (= temp765_7 temp765_6))
(assert (= temp765_8 (select ARGNAME_padding_NAMEEND_VAL temp765_7)))
(assert (= temp765_9 #x0000000000000001))
(assert (= temp765_10 temp765_9))
(assert (= temp765_11 (select ARGNAME_padding_NAMEEND_VAL temp765_10)))
(assert (= temp765_12 #x0000000000000002))
(assert (= temp765_13 temp765_12))
(assert (= temp765_14 (select ARGNAME_padding_NAMEEND_VAL temp765_13)))
(assert (= temp765_15 #x0000000000000003))
(assert (= temp765_16 temp765_15))
(assert (= temp765_17 (select ARGNAME_padding_NAMEEND_VAL temp765_16)))
(assert (= temp765_18 #x0000000000000004))
(assert (= temp765_19 temp765_18))
(assert (= temp765_20 (select ARGNAME_padding_NAMEEND_VAL temp765_19)))
(assert (= temp765_21 #x0000000000000005))
(assert (= temp765_22 temp765_21))
(assert (= temp765_23 (select ARGNAME_padding_NAMEEND_VAL temp765_22)))
(assert (= temp765_24 #x0000000000000000))
(assert (= temp765_25 #x0000000000000000))
(assert (= temp765_26 temp765_25))
(assert (= temp765_27 (select ARGNAME_padding_NAMEEND_VAL temp765_26)))
(assert (= temp765_28 #x0000000000000000))
(assert (= temp765_29 #x0000000000000001))
(assert (= temp765_30 temp765_29))
(assert (= temp765_31 (select ARGNAME_padding_NAMEEND_VAL temp765_30)))
(assert (= temp765_32 #x0000000000000000))
(assert (= temp765_33 #x0000000000000002))
(assert (= temp765_34 temp765_33))
(assert (= temp765_35 (select ARGNAME_padding_NAMEEND_VAL temp765_34)))
(assert (= temp765_36 #x0000000000000000))
(assert (= temp765_37 #x0000000000000003))
(assert (= temp765_38 temp765_37))
(assert (= temp765_39 (select ARGNAME_padding_NAMEEND_VAL temp765_38)))
(assert (= temp765_40 #x0000000000000000))
(assert (= temp765_41 #x0000000000000004))
(assert (= temp765_42 temp765_41))
(assert (= temp765_43 (select ARGNAME_padding_NAMEEND_VAL temp765_42)))
(assert (= temp765_44 #x0000000000000000))
(assert (= temp765_45 #x0000000000000005))
(assert (= temp765_46 temp765_45))
(assert (= temp765_47 (select ARGNAME_padding_NAMEEND_VAL temp765_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp765_27 temp765_24)
             (bvslt temp765_31 temp765_28)
             (bvslt temp765_35 temp765_32)
             (bvslt temp765_39 temp765_36)
             (bvslt temp765_43 temp765_40)
             (bvslt temp765_47 temp765_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_48 #x0000000000000000))
(assert (= var1322786 temp765_48))
(assert (= temp765_49 #x0000000000000000))
(assert (= temp765_50 temp765_49))
(assert (= temp765_51 (select ARGNAME_output_padding_NAMEEND_VAL temp765_50)))
(assert (= temp765_52 #x0000000000000001))
(assert (= temp765_53 temp765_52))
(assert (= temp765_54 (select ARGNAME_output_padding_NAMEEND_VAL temp765_53)))
(assert (= temp765_55 #x0000000000000002))
(assert (= temp765_56 temp765_55))
(assert (= temp765_57 (select ARGNAME_output_padding_NAMEEND_VAL temp765_56)))
(assert (= temp765_58 #x0000000000000003))
(assert (= temp765_59 temp765_58))
(assert (= temp765_60 (select ARGNAME_output_padding_NAMEEND_VAL temp765_59)))
(assert (= temp765_61 #x0000000000000004))
(assert (= temp765_62 temp765_61))
(assert (= temp765_63 (select ARGNAME_output_padding_NAMEEND_VAL temp765_62)))
(assert (= temp765_64 #x0000000000000005))
(assert (= temp765_65 temp765_64))
(assert (= temp765_66 (select ARGNAME_output_padding_NAMEEND_VAL temp765_65)))
(assert (= temp765_67 #x0000000000000000))
(assert (= temp765_68 #x0000000000000000))
(assert (= temp765_69 temp765_68))
(assert (= temp765_70 (select ARGNAME_output_padding_NAMEEND_VAL temp765_69)))
(assert (= temp765_71 #x0000000000000000))
(assert (= temp765_72 #x0000000000000001))
(assert (= temp765_73 temp765_72))
(assert (= temp765_74 (select ARGNAME_output_padding_NAMEEND_VAL temp765_73)))
(assert (= temp765_75 #x0000000000000000))
(assert (= temp765_76 #x0000000000000002))
(assert (= temp765_77 temp765_76))
(assert (= temp765_78 (select ARGNAME_output_padding_NAMEEND_VAL temp765_77)))
(assert (= temp765_79 #x0000000000000000))
(assert (= temp765_80 #x0000000000000003))
(assert (= temp765_81 temp765_80))
(assert (= temp765_82 (select ARGNAME_output_padding_NAMEEND_VAL temp765_81)))
(assert (= temp765_83 #x0000000000000000))
(assert (= temp765_84 #x0000000000000004))
(assert (= temp765_85 temp765_84))
(assert (= temp765_86 (select ARGNAME_output_padding_NAMEEND_VAL temp765_85)))
(assert (= temp765_87 #x0000000000000000))
(assert (= temp765_88 #x0000000000000005))
(assert (= temp765_89 temp765_88))
(assert (= temp765_90 (select ARGNAME_output_padding_NAMEEND_VAL temp765_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp765_70 temp765_67)
             (bvslt temp765_74 temp765_71)
             (bvslt temp765_78 temp765_75)
             (bvslt temp765_82 temp765_79)
             (bvslt temp765_86 temp765_83)
             (bvslt temp765_90 temp765_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_91 #x0000000000000000))
(assert (= var1322797 temp765_91))
(assert (= temp765_92 #x0000000000000000))
(assert (= temp765_93 temp765_92))
(assert (= temp765_94 (select ARGNAME_stride_NAMEEND_VAL temp765_93)))
(assert (= temp765_95 #x0000000000000001))
(assert (= temp765_96 temp765_95))
(assert (= temp765_97 (select ARGNAME_stride_NAMEEND_VAL temp765_96)))
(assert (= temp765_98 #x0000000000000002))
(assert (= temp765_99 temp765_98))
(assert (= temp765_100 (select ARGNAME_stride_NAMEEND_VAL temp765_99)))
(assert (= temp765_101 #x0000000000000003))
(assert (= temp765_102 temp765_101))
(assert (= temp765_103 (select ARGNAME_stride_NAMEEND_VAL temp765_102)))
(assert (= temp765_104 #x0000000000000004))
(assert (= temp765_105 temp765_104))
(assert (= temp765_106 (select ARGNAME_stride_NAMEEND_VAL temp765_105)))
(assert (= temp765_107 #x0000000000000005))
(assert (= temp765_108 temp765_107))
(assert (= temp765_109 (select ARGNAME_stride_NAMEEND_VAL temp765_108)))
(assert (= temp765_110 #x0000000000000000))
(assert (= temp765_111 #x0000000000000000))
(assert (= temp765_112 temp765_111))
(assert (= temp765_113 (select ARGNAME_stride_NAMEEND_VAL temp765_112)))
(assert (= temp765_114 #x0000000000000000))
(assert (= temp765_115 #x0000000000000001))
(assert (= temp765_116 temp765_115))
(assert (= temp765_117 (select ARGNAME_stride_NAMEEND_VAL temp765_116)))
(assert (= temp765_118 #x0000000000000000))
(assert (= temp765_119 #x0000000000000002))
(assert (= temp765_120 temp765_119))
(assert (= temp765_121 (select ARGNAME_stride_NAMEEND_VAL temp765_120)))
(assert (= temp765_122 #x0000000000000000))
(assert (= temp765_123 #x0000000000000003))
(assert (= temp765_124 temp765_123))
(assert (= temp765_125 (select ARGNAME_stride_NAMEEND_VAL temp765_124)))
(assert (= temp765_126 #x0000000000000000))
(assert (= temp765_127 #x0000000000000004))
(assert (= temp765_128 temp765_127))
(assert (= temp765_129 (select ARGNAME_stride_NAMEEND_VAL temp765_128)))
(assert (= temp765_130 #x0000000000000000))
(assert (= temp765_131 #x0000000000000005))
(assert (= temp765_132 temp765_131))
(assert (= temp765_133 (select ARGNAME_stride_NAMEEND_VAL temp765_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp765_113 temp765_110)
             (bvsle temp765_117 temp765_114)
             (bvsle temp765_121 temp765_118)
             (bvsle temp765_125 temp765_122)
             (bvsle temp765_129 temp765_126)
             (bvsle temp765_133 temp765_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_134 #x0000000000000000))
(assert (= var1322807 temp765_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_135 #x0000000000000001))
(assert (= var1322819 temp765_135))
(assert (= temp765_136 #x0000000000000000))
(assert (= var1310898 temp765_136))
(assert (= temp765_137 #x0000000000000000))
(assert (= temp765_138 temp765_137))
(assert (= temp765_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp765_138)))
(assert (= temp765_140 #x0000000000000001))
(assert (= temp765_141 temp765_140))
(assert (= temp765_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp765_141)))
(assert (= temp765_143 #x0000000000000002))
(assert (= temp765_144 temp765_143))
(assert (= temp765_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp765_144)))
(assert (= temp765_146 #x0000000000000003))
(assert (= temp765_147 temp765_146))
(assert (= temp765_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp765_147)))
(assert (= temp765_149 #x0000000000000004))
(assert (= temp765_150 temp765_149))
(assert (= temp765_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp765_150)))
(assert (= temp765_152 #x0000000000000005))
(assert (= temp765_153 temp765_152))
(assert (= temp765_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp765_153)))
(assert (= temp765_156 var1310898))
(assert (= temp765_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp765_156)))
(assert (= temp765_155 temp765_157))
(assert (= var1322852
   (ite (bvslt temp765_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_158 #x0000000000000000))
(assert (= var1322852 temp765_158))
(assert (= temp765_159 #x0000000000000000))
(assert (= var1310898 temp765_159))
(assert (= temp765_161 var1310898))
(assert (= temp765_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp765_161)))
(assert (= temp765_160 temp765_162))
(assert (= var1322874 (bvsmod temp765_160 ARGNAME_groups_NAMEEND)))
(assert (= temp765_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp765_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp765_164 #x0000000000000001))
(assert (= var1322875 temp765_164))
(assert (= temp765_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp765_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_166 #x0000000000000001))
(assert (= var1322895 temp765_166))
(assert (= temp765_167 #x0000000000000001))
(assert (= var1311786 temp765_167))
(assert (= temp765_168 #x0000000000000000))
(assert (= temp765_169 temp765_168))
(assert (= temp765_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp765_169)))
(assert (= temp765_171 #x0000000000000001))
(assert (= temp765_172 temp765_171))
(assert (= temp765_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp765_172)))
(assert (= temp765_174 #x0000000000000002))
(assert (= temp765_175 temp765_174))
(assert (= temp765_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp765_175)))
(assert (= temp765_177 #x0000000000000003))
(assert (= temp765_178 temp765_177))
(assert (= temp765_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp765_178)))
(assert (= temp765_180 #x0000000000000004))
(assert (= temp765_181 temp765_180))
(assert (= temp765_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp765_181)))
(assert (= temp765_183 #x0000000000000005))
(assert (= temp765_184 temp765_183))
(assert (= temp765_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp765_184)))
(assert (= temp765_186 #x0000000000000000))
(assert (= temp765_187
   (ite (bvslt var1311786 temp765_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp765_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp765_187)))
(assert (= var1322903 temp765_188))
(assert (bvslt (ite (bvslt var1311786 temp765_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp765_189 #x0000000000000001))
(assert (= var1311786 temp765_189))
(assert (= temp765_191 var1311786))
(assert (= temp765_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp765_191)))
(assert (= temp765_190 temp765_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp765_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp765_193 #x0000000000000001))
(assert (= var1322908 temp765_193))
(assert (= temp765_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp765_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_195 #x0000000000000001))
(assert (= var1322975 temp765_195))
(assert (= temp765_196 #x0000000000000000))
(assert (= var1310898 temp765_196))
(assert (= temp765_197 #x0000000000000000))
(assert (= temp765_198 temp765_197))
(assert (= temp765_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp765_198)))
(assert (= temp765_200 #x0000000000000001))
(assert (= temp765_201 temp765_200))
(assert (= temp765_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp765_201)))
(assert (= temp765_203 #x0000000000000002))
(assert (= temp765_204 temp765_203))
(assert (= temp765_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp765_204)))
(assert (= temp765_206 #x0000000000000003))
(assert (= temp765_207 temp765_206))
(assert (= temp765_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp765_207)))
(assert (= temp765_209 #x0000000000000004))
(assert (= temp765_210 temp765_209))
(assert (= temp765_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp765_210)))
(assert (= temp765_212 #x0000000000000005))
(assert (= temp765_213 temp765_212))
(assert (= temp765_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp765_213)))
(assert (= temp765_215 #x0000000000000000))
(assert (= temp765_216
   (ite (bvslt var1310898 temp765_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp765_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp765_216)))
(assert (= var1322977 temp765_217))
(assert (bvslt (ite (bvslt var1310898 temp765_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp765_218 #x0000000000000000))
(assert (= var1310898 temp765_218))
(assert (= temp765_220 var1310898))
(assert (= temp765_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp765_220)))
(assert (= temp765_219 temp765_221))
(assert (= var1322980
   (ite (= var1322977 temp765_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp765_222 #x0000000000000001))
(assert (= var1322980 temp765_222))
(assert (= temp765_223 #x0000000000000002))
(assert (= var1848169 temp765_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp765_225 #x0000000000000001))
(assert (= var1323065 temp765_225))
(assert (= temp765_226 #x0000000000000001))
(assert (= var3486735 temp765_226))
(assert (= temp765_227 #x0000000000000001))
(assert (= var3814415 temp765_227))
(assert (= temp765_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp765_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_229 #x0000000000000001))
(assert (= var79986 temp765_229))
(assert (= temp765_230 #x0000000000000001))
(assert (= var80116 temp765_230))
(assert (= var4796905 var80116))
(assert (= temp765_231 #x0000000000000000))
(assert (= var4784306 temp765_231))
(assert (= temp765_232 #x0000000000000000))
(assert (= temp765_233
   (ite (bvslt var4784306 temp765_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp765_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp765_233)))
(assert (= var4796924 temp765_234))
(assert (bvslt (ite (bvslt var4784306 temp765_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp765_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp765_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp765_236 #x0000000000000001))
(assert (= var4796925 temp765_236))
(assert (= temp765_237 #x0000000000000000))
(assert (= var4996927 temp765_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp765_238 #x0000000000000002))
(assert (= var5125763 temp765_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp765_239 #x0000000000000000))
(assert (= var5191324 temp765_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= temp765_241 #xffffffffffffffff))
(assert (= temp765_240 temp765_241))
(assert (= temp765_242 #x0000000000000001))
(assert (= var66602 temp765_242))
(assert (= temp765_243 #x0000000000000000))
(assert (= temp765_244
   (ite (bvslt var66602 temp765_243)
        (bvadd ARGNAME_input_NAMEEND_DIM var66602)
        var66602)))
(assert (= temp765_245 (select ARGNAME_input_NAMEEND_DIMSIZE temp765_244)))
(assert (= var80523 temp765_245))
(assert (bvslt (ite (bvslt var66602 temp765_243)
            (bvadd ARGNAME_input_NAMEEND_DIM var66602)
            var66602)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp765_246 #x0000000000000000))
(assert (= var80524
   (ite (= var80523 temp765_246) #x0000000000000001 #x0000000000000000)))
(assert (= temp765_247 #x0000000000000000))
(assert (= var80524 temp765_247))
(assert (= temp765_248 #x0000000000000001))
(assert (= var79986 temp765_248))
(model-add temp765_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp765_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp765_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






