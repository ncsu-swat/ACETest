(declare-fun temp58_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp58_2 () (_ BitVec 64))
(declare-fun temp58_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp58_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp58_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp58_6 () (_ BitVec 64))
(declare-fun temp58_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp58_8 () (_ BitVec 64))
(declare-fun temp58_9 () (_ BitVec 64))
(declare-fun temp58_10 () (_ BitVec 64))
(declare-fun temp58_11 () (_ BitVec 64))
(declare-fun temp58_12 () (_ BitVec 64))
(declare-fun temp58_13 () (_ BitVec 64))
(declare-fun temp58_14 () (_ BitVec 64))
(declare-fun temp58_15 () (_ BitVec 64))
(declare-fun temp58_16 () (_ BitVec 64))
(declare-fun temp58_17 () (_ BitVec 64))
(declare-fun temp58_18 () (_ BitVec 64))
(declare-fun temp58_19 () (_ BitVec 64))
(declare-fun temp58_20 () (_ BitVec 64))
(declare-fun temp58_21 () (_ BitVec 64))
(declare-fun temp58_22 () (_ BitVec 64))
(declare-fun temp58_23 () (_ BitVec 64))
(declare-fun temp58_24 () (_ BitVec 64))
(declare-fun temp58_25 () (_ BitVec 64))
(declare-fun temp58_26 () (_ BitVec 64))
(declare-fun temp58_27 () (_ BitVec 64))
(declare-fun temp58_28 () (_ BitVec 64))
(declare-fun temp58_29 () (_ BitVec 64))
(declare-fun temp58_30 () (_ BitVec 64))
(declare-fun temp58_31 () (_ BitVec 64))
(declare-fun temp58_32 () (_ BitVec 64))
(declare-fun temp58_33 () (_ BitVec 64))
(declare-fun temp58_34 () (_ BitVec 64))
(declare-fun temp58_35 () (_ BitVec 64))
(declare-fun temp58_36 () (_ BitVec 64))
(declare-fun temp58_37 () (_ BitVec 64))
(declare-fun temp58_38 () (_ BitVec 64))
(declare-fun temp58_39 () (_ BitVec 64))
(declare-fun temp58_40 () (_ BitVec 64))
(declare-fun temp58_41 () (_ BitVec 64))
(declare-fun temp58_42 () (_ BitVec 64))
(declare-fun temp58_43 () (_ BitVec 64))
(declare-fun temp58_44 () (_ BitVec 64))
(declare-fun temp58_45 () (_ BitVec 64))
(declare-fun temp58_46 () (_ BitVec 64))
(declare-fun temp58_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp58_48 () (_ BitVec 64))
(declare-fun temp58_49 () (_ BitVec 64))
(declare-fun temp58_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp58_51 () (_ BitVec 64))
(declare-fun temp58_52 () (_ BitVec 64))
(declare-fun temp58_53 () (_ BitVec 64))
(declare-fun temp58_54 () (_ BitVec 64))
(declare-fun temp58_55 () (_ BitVec 64))
(declare-fun temp58_56 () (_ BitVec 64))
(declare-fun temp58_57 () (_ BitVec 64))
(declare-fun temp58_58 () (_ BitVec 64))
(declare-fun temp58_59 () (_ BitVec 64))
(declare-fun temp58_60 () (_ BitVec 64))
(declare-fun temp58_61 () (_ BitVec 64))
(declare-fun temp58_62 () (_ BitVec 64))
(declare-fun temp58_63 () (_ BitVec 64))
(declare-fun temp58_64 () (_ BitVec 64))
(declare-fun temp58_65 () (_ BitVec 64))
(declare-fun temp58_66 () (_ BitVec 64))
(declare-fun temp58_67 () (_ BitVec 64))
(declare-fun temp58_68 () (_ BitVec 64))
(declare-fun temp58_69 () (_ BitVec 64))
(declare-fun temp58_70 () (_ BitVec 64))
(declare-fun temp58_71 () (_ BitVec 64))
(declare-fun temp58_72 () (_ BitVec 64))
(declare-fun temp58_73 () (_ BitVec 64))
(declare-fun temp58_74 () (_ BitVec 64))
(declare-fun temp58_75 () (_ BitVec 64))
(declare-fun temp58_76 () (_ BitVec 64))
(declare-fun temp58_77 () (_ BitVec 64))
(declare-fun temp58_78 () (_ BitVec 64))
(declare-fun temp58_79 () (_ BitVec 64))
(declare-fun temp58_80 () (_ BitVec 64))
(declare-fun temp58_81 () (_ BitVec 64))
(declare-fun temp58_82 () (_ BitVec 64))
(declare-fun temp58_83 () (_ BitVec 64))
(declare-fun temp58_84 () (_ BitVec 64))
(declare-fun temp58_85 () (_ BitVec 64))
(declare-fun temp58_86 () (_ BitVec 64))
(declare-fun temp58_87 () (_ BitVec 64))
(declare-fun temp58_88 () (_ BitVec 64))
(declare-fun temp58_89 () (_ BitVec 64))
(declare-fun temp58_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp58_91 () (_ BitVec 64))
(declare-fun temp58_92 () (_ BitVec 64))
(declare-fun temp58_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp58_94 () (_ BitVec 64))
(declare-fun temp58_95 () (_ BitVec 64))
(declare-fun temp58_96 () (_ BitVec 64))
(declare-fun temp58_97 () (_ BitVec 64))
(declare-fun temp58_98 () (_ BitVec 64))
(declare-fun temp58_99 () (_ BitVec 64))
(declare-fun temp58_100 () (_ BitVec 64))
(declare-fun temp58_101 () (_ BitVec 64))
(declare-fun temp58_102 () (_ BitVec 64))
(declare-fun temp58_103 () (_ BitVec 64))
(declare-fun temp58_104 () (_ BitVec 64))
(declare-fun temp58_105 () (_ BitVec 64))
(declare-fun temp58_106 () (_ BitVec 64))
(declare-fun temp58_107 () (_ BitVec 64))
(declare-fun temp58_108 () (_ BitVec 64))
(declare-fun temp58_109 () (_ BitVec 64))
(declare-fun temp58_110 () (_ BitVec 64))
(declare-fun temp58_111 () (_ BitVec 64))
(declare-fun temp58_112 () (_ BitVec 64))
(declare-fun temp58_113 () (_ BitVec 64))
(declare-fun temp58_114 () (_ BitVec 64))
(declare-fun temp58_115 () (_ BitVec 64))
(declare-fun temp58_116 () (_ BitVec 64))
(declare-fun temp58_117 () (_ BitVec 64))
(declare-fun temp58_118 () (_ BitVec 64))
(declare-fun temp58_119 () (_ BitVec 64))
(declare-fun temp58_120 () (_ BitVec 64))
(declare-fun temp58_121 () (_ BitVec 64))
(declare-fun temp58_122 () (_ BitVec 64))
(declare-fun temp58_123 () (_ BitVec 64))
(declare-fun temp58_124 () (_ BitVec 64))
(declare-fun temp58_125 () (_ BitVec 64))
(declare-fun temp58_126 () (_ BitVec 64))
(declare-fun temp58_127 () (_ BitVec 64))
(declare-fun temp58_128 () (_ BitVec 64))
(declare-fun temp58_129 () (_ BitVec 64))
(declare-fun temp58_130 () (_ BitVec 64))
(declare-fun temp58_131 () (_ BitVec 64))
(declare-fun temp58_132 () (_ BitVec 64))
(declare-fun temp58_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp58_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp58_135 () (_ BitVec 64))
(declare-fun temp58_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp58_137 () (_ BitVec 64))
(declare-fun temp58_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp58_139 () (_ BitVec 64))
(declare-fun temp58_140 () (_ BitVec 64))
(declare-fun temp58_141 () (_ BitVec 64))
(declare-fun temp58_142 () (_ BitVec 64))
(declare-fun temp58_143 () (_ BitVec 64))
(declare-fun temp58_144 () (_ BitVec 64))
(declare-fun temp58_145 () (_ BitVec 64))
(declare-fun temp58_146 () (_ BitVec 64))
(declare-fun temp58_147 () (_ BitVec 64))
(declare-fun temp58_148 () (_ BitVec 64))
(declare-fun temp58_149 () (_ BitVec 64))
(declare-fun temp58_150 () (_ BitVec 64))
(declare-fun temp58_151 () (_ BitVec 64))
(declare-fun temp58_152 () (_ BitVec 64))
(declare-fun temp58_153 () (_ BitVec 64))
(declare-fun temp58_154 () (_ BitVec 64))
(declare-fun temp58_156 () (_ BitVec 64))
(declare-fun temp58_157 () (_ BitVec 64))
(declare-fun temp58_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp58_158 () (_ BitVec 64))
(declare-fun temp58_159 () (_ BitVec 64))
(declare-fun temp58_161 () (_ BitVec 64))
(declare-fun temp58_162 () (_ BitVec 64))
(declare-fun temp58_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp58_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp58_164 () (_ BitVec 64))
(declare-fun temp58_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp58_166 () (_ BitVec 64))
(declare-fun temp58_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp58_168 () (_ BitVec 64))
(declare-fun temp58_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp58_170 () (_ BitVec 64))
(declare-fun temp58_171 () (_ BitVec 64))
(declare-fun temp58_172 () (_ BitVec 64))
(declare-fun temp58_173 () (_ BitVec 64))
(declare-fun temp58_174 () (_ BitVec 64))
(declare-fun temp58_175 () (_ BitVec 64))
(declare-fun temp58_176 () (_ BitVec 64))
(declare-fun temp58_177 () (_ BitVec 64))
(declare-fun temp58_178 () (_ BitVec 64))
(declare-fun temp58_179 () (_ BitVec 64))
(declare-fun temp58_180 () (_ BitVec 64))
(declare-fun temp58_181 () (_ BitVec 64))
(declare-fun temp58_182 () (_ BitVec 64))
(declare-fun temp58_183 () (_ BitVec 64))
(declare-fun temp58_184 () (_ BitVec 64))
(declare-fun temp58_185 () (_ BitVec 64))
(declare-fun temp58_186 () (_ BitVec 64))
(declare-fun temp58_187 () (_ BitVec 64))
(declare-fun temp58_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp58_189 () (_ BitVec 64))
(declare-fun temp58_191 () (_ BitVec 64))
(declare-fun temp58_192 () (_ BitVec 64))
(declare-fun temp58_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp58_193 () (_ BitVec 64))
(declare-fun temp58_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp58_195 () (_ BitVec 64))
(declare-fun temp58_196 () (_ BitVec 64))
(declare-fun temp58_197 () (_ BitVec 64))
(declare-fun temp58_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp58_199 () (_ BitVec 64))
(declare-fun temp58_200 () (_ BitVec 64))
(declare-fun temp58_201 () (_ BitVec 64))
(declare-fun temp58_202 () (_ BitVec 64))
(declare-fun temp58_203 () (_ BitVec 64))
(declare-fun temp58_204 () (_ BitVec 64))
(declare-fun temp58_205 () (_ BitVec 64))
(declare-fun temp58_206 () (_ BitVec 64))
(declare-fun temp58_207 () (_ BitVec 64))
(declare-fun temp58_208 () (_ BitVec 64))
(declare-fun temp58_209 () (_ BitVec 64))
(declare-fun temp58_210 () (_ BitVec 64))
(declare-fun temp58_211 () (_ BitVec 64))
(declare-fun temp58_212 () (_ BitVec 64))
(declare-fun temp58_213 () (_ BitVec 64))
(declare-fun temp58_214 () (_ BitVec 64))
(declare-fun temp58_215 () (_ BitVec 64))
(declare-fun temp58_216 () (_ BitVec 64))
(declare-fun temp58_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp58_218 () (_ BitVec 64))
(declare-fun temp58_220 () (_ BitVec 64))
(declare-fun temp58_221 () (_ BitVec 64))
(declare-fun temp58_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp58_222 () (_ BitVec 64))
(declare-fun temp58_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp58_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp58_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp58_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp58_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp58_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp58_229 () (_ BitVec 64))
(declare-fun temp58_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp58_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp58_232 () (_ BitVec 64))
(declare-fun temp58_233 () (_ BitVec 64))
(declare-fun temp58_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp58_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp58_236 () (_ BitVec 64))
(declare-fun temp58_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp58_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp58_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun var5910928 () (_ BitVec 64))
(declare-fun temp58_240 () (_ BitVec 64))
(declare-fun ARGNAME_benchmark_NAMEEND () (_ BitVec 64))
(declare-fun var80421 () (_ BitVec 64))
(declare-fun temp58_241 () (_ BitVec 64))
(declare-fun ARGNAME_deterministic_NAMEEND () (_ BitVec 64))
(declare-fun var80423 () (_ BitVec 64))
(declare-fun temp58_242 () (_ BitVec 64))
(declare-fun ARGNAME_allow_tf32_NAMEEND () (_ BitVec 64))
(declare-fun var80425 () (_ BitVec 64))
(declare-fun temp58_243 () (_ BitVec 64))
(assert (= temp58_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp58_1)))
(assert (= temp58_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp58_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_3 #x0000000000000000))
(assert (= var79869 temp58_3))
(assert (= temp58_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp58_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_5 #x0000000000000000))
(assert (= var79914 temp58_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp58_6 #x0000000000000000))
(assert (= temp58_7 temp58_6))
(assert (= temp58_8 (select ARGNAME_padding_NAMEEND_VAL temp58_7)))
(assert (= temp58_9 #x0000000000000001))
(assert (= temp58_10 temp58_9))
(assert (= temp58_11 (select ARGNAME_padding_NAMEEND_VAL temp58_10)))
(assert (= temp58_12 #x0000000000000002))
(assert (= temp58_13 temp58_12))
(assert (= temp58_14 (select ARGNAME_padding_NAMEEND_VAL temp58_13)))
(assert (= temp58_15 #x0000000000000003))
(assert (= temp58_16 temp58_15))
(assert (= temp58_17 (select ARGNAME_padding_NAMEEND_VAL temp58_16)))
(assert (= temp58_18 #x0000000000000004))
(assert (= temp58_19 temp58_18))
(assert (= temp58_20 (select ARGNAME_padding_NAMEEND_VAL temp58_19)))
(assert (= temp58_21 #x0000000000000005))
(assert (= temp58_22 temp58_21))
(assert (= temp58_23 (select ARGNAME_padding_NAMEEND_VAL temp58_22)))
(assert (= temp58_24 #x0000000000000000))
(assert (= temp58_25 #x0000000000000000))
(assert (= temp58_26 temp58_25))
(assert (= temp58_27 (select ARGNAME_padding_NAMEEND_VAL temp58_26)))
(assert (= temp58_28 #x0000000000000000))
(assert (= temp58_29 #x0000000000000001))
(assert (= temp58_30 temp58_29))
(assert (= temp58_31 (select ARGNAME_padding_NAMEEND_VAL temp58_30)))
(assert (= temp58_32 #x0000000000000000))
(assert (= temp58_33 #x0000000000000002))
(assert (= temp58_34 temp58_33))
(assert (= temp58_35 (select ARGNAME_padding_NAMEEND_VAL temp58_34)))
(assert (= temp58_36 #x0000000000000000))
(assert (= temp58_37 #x0000000000000003))
(assert (= temp58_38 temp58_37))
(assert (= temp58_39 (select ARGNAME_padding_NAMEEND_VAL temp58_38)))
(assert (= temp58_40 #x0000000000000000))
(assert (= temp58_41 #x0000000000000004))
(assert (= temp58_42 temp58_41))
(assert (= temp58_43 (select ARGNAME_padding_NAMEEND_VAL temp58_42)))
(assert (= temp58_44 #x0000000000000000))
(assert (= temp58_45 #x0000000000000005))
(assert (= temp58_46 temp58_45))
(assert (= temp58_47 (select ARGNAME_padding_NAMEEND_VAL temp58_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp58_27 temp58_24)
             (bvslt temp58_31 temp58_28)
             (bvslt temp58_35 temp58_32)
             (bvslt temp58_39 temp58_36)
             (bvslt temp58_43 temp58_40)
             (bvslt temp58_47 temp58_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_48 #x0000000000000000))
(assert (= var1322786 temp58_48))
(assert (= temp58_49 #x0000000000000000))
(assert (= temp58_50 temp58_49))
(assert (= temp58_51 (select ARGNAME_output_padding_NAMEEND_VAL temp58_50)))
(assert (= temp58_52 #x0000000000000001))
(assert (= temp58_53 temp58_52))
(assert (= temp58_54 (select ARGNAME_output_padding_NAMEEND_VAL temp58_53)))
(assert (= temp58_55 #x0000000000000002))
(assert (= temp58_56 temp58_55))
(assert (= temp58_57 (select ARGNAME_output_padding_NAMEEND_VAL temp58_56)))
(assert (= temp58_58 #x0000000000000003))
(assert (= temp58_59 temp58_58))
(assert (= temp58_60 (select ARGNAME_output_padding_NAMEEND_VAL temp58_59)))
(assert (= temp58_61 #x0000000000000004))
(assert (= temp58_62 temp58_61))
(assert (= temp58_63 (select ARGNAME_output_padding_NAMEEND_VAL temp58_62)))
(assert (= temp58_64 #x0000000000000005))
(assert (= temp58_65 temp58_64))
(assert (= temp58_66 (select ARGNAME_output_padding_NAMEEND_VAL temp58_65)))
(assert (= temp58_67 #x0000000000000000))
(assert (= temp58_68 #x0000000000000000))
(assert (= temp58_69 temp58_68))
(assert (= temp58_70 (select ARGNAME_output_padding_NAMEEND_VAL temp58_69)))
(assert (= temp58_71 #x0000000000000000))
(assert (= temp58_72 #x0000000000000001))
(assert (= temp58_73 temp58_72))
(assert (= temp58_74 (select ARGNAME_output_padding_NAMEEND_VAL temp58_73)))
(assert (= temp58_75 #x0000000000000000))
(assert (= temp58_76 #x0000000000000002))
(assert (= temp58_77 temp58_76))
(assert (= temp58_78 (select ARGNAME_output_padding_NAMEEND_VAL temp58_77)))
(assert (= temp58_79 #x0000000000000000))
(assert (= temp58_80 #x0000000000000003))
(assert (= temp58_81 temp58_80))
(assert (= temp58_82 (select ARGNAME_output_padding_NAMEEND_VAL temp58_81)))
(assert (= temp58_83 #x0000000000000000))
(assert (= temp58_84 #x0000000000000004))
(assert (= temp58_85 temp58_84))
(assert (= temp58_86 (select ARGNAME_output_padding_NAMEEND_VAL temp58_85)))
(assert (= temp58_87 #x0000000000000000))
(assert (= temp58_88 #x0000000000000005))
(assert (= temp58_89 temp58_88))
(assert (= temp58_90 (select ARGNAME_output_padding_NAMEEND_VAL temp58_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp58_70 temp58_67)
             (bvslt temp58_74 temp58_71)
             (bvslt temp58_78 temp58_75)
             (bvslt temp58_82 temp58_79)
             (bvslt temp58_86 temp58_83)
             (bvslt temp58_90 temp58_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_91 #x0000000000000000))
(assert (= var1322797 temp58_91))
(assert (= temp58_92 #x0000000000000000))
(assert (= temp58_93 temp58_92))
(assert (= temp58_94 (select ARGNAME_stride_NAMEEND_VAL temp58_93)))
(assert (= temp58_95 #x0000000000000001))
(assert (= temp58_96 temp58_95))
(assert (= temp58_97 (select ARGNAME_stride_NAMEEND_VAL temp58_96)))
(assert (= temp58_98 #x0000000000000002))
(assert (= temp58_99 temp58_98))
(assert (= temp58_100 (select ARGNAME_stride_NAMEEND_VAL temp58_99)))
(assert (= temp58_101 #x0000000000000003))
(assert (= temp58_102 temp58_101))
(assert (= temp58_103 (select ARGNAME_stride_NAMEEND_VAL temp58_102)))
(assert (= temp58_104 #x0000000000000004))
(assert (= temp58_105 temp58_104))
(assert (= temp58_106 (select ARGNAME_stride_NAMEEND_VAL temp58_105)))
(assert (= temp58_107 #x0000000000000005))
(assert (= temp58_108 temp58_107))
(assert (= temp58_109 (select ARGNAME_stride_NAMEEND_VAL temp58_108)))
(assert (= temp58_110 #x0000000000000000))
(assert (= temp58_111 #x0000000000000000))
(assert (= temp58_112 temp58_111))
(assert (= temp58_113 (select ARGNAME_stride_NAMEEND_VAL temp58_112)))
(assert (= temp58_114 #x0000000000000000))
(assert (= temp58_115 #x0000000000000001))
(assert (= temp58_116 temp58_115))
(assert (= temp58_117 (select ARGNAME_stride_NAMEEND_VAL temp58_116)))
(assert (= temp58_118 #x0000000000000000))
(assert (= temp58_119 #x0000000000000002))
(assert (= temp58_120 temp58_119))
(assert (= temp58_121 (select ARGNAME_stride_NAMEEND_VAL temp58_120)))
(assert (= temp58_122 #x0000000000000000))
(assert (= temp58_123 #x0000000000000003))
(assert (= temp58_124 temp58_123))
(assert (= temp58_125 (select ARGNAME_stride_NAMEEND_VAL temp58_124)))
(assert (= temp58_126 #x0000000000000000))
(assert (= temp58_127 #x0000000000000004))
(assert (= temp58_128 temp58_127))
(assert (= temp58_129 (select ARGNAME_stride_NAMEEND_VAL temp58_128)))
(assert (= temp58_130 #x0000000000000000))
(assert (= temp58_131 #x0000000000000005))
(assert (= temp58_132 temp58_131))
(assert (= temp58_133 (select ARGNAME_stride_NAMEEND_VAL temp58_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp58_113 temp58_110)
             (bvsle temp58_117 temp58_114)
             (bvsle temp58_121 temp58_118)
             (bvsle temp58_125 temp58_122)
             (bvsle temp58_129 temp58_126)
             (bvsle temp58_133 temp58_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_134 #x0000000000000000))
(assert (= var1322807 temp58_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_135 #x0000000000000001))
(assert (= var1322819 temp58_135))
(assert (= temp58_136 #x0000000000000000))
(assert (= var1310898 temp58_136))
(assert (= temp58_137 #x0000000000000000))
(assert (= temp58_138 temp58_137))
(assert (= temp58_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_138)))
(assert (= temp58_140 #x0000000000000001))
(assert (= temp58_141 temp58_140))
(assert (= temp58_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_141)))
(assert (= temp58_143 #x0000000000000002))
(assert (= temp58_144 temp58_143))
(assert (= temp58_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_144)))
(assert (= temp58_146 #x0000000000000003))
(assert (= temp58_147 temp58_146))
(assert (= temp58_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_147)))
(assert (= temp58_149 #x0000000000000004))
(assert (= temp58_150 temp58_149))
(assert (= temp58_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_150)))
(assert (= temp58_152 #x0000000000000005))
(assert (= temp58_153 temp58_152))
(assert (= temp58_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_153)))
(assert (= temp58_156 var1310898))
(assert (= temp58_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_156)))
(assert (= temp58_155 temp58_157))
(assert (= var1322852
   (ite (bvslt temp58_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_158 #x0000000000000000))
(assert (= var1322852 temp58_158))
(assert (= temp58_159 #x0000000000000000))
(assert (= var1310898 temp58_159))
(assert (= temp58_161 var1310898))
(assert (= temp58_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_161)))
(assert (= temp58_160 temp58_162))
(assert (= var1322874 (bvsmod temp58_160 ARGNAME_groups_NAMEEND)))
(assert (= temp58_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp58_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp58_164 #x0000000000000001))
(assert (= var1322875 temp58_164))
(assert (= temp58_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp58_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_166 #x0000000000000001))
(assert (= var1322895 temp58_166))
(assert (= temp58_167 #x0000000000000001))
(assert (= var1311786 temp58_167))
(assert (= temp58_168 #x0000000000000000))
(assert (= temp58_169 temp58_168))
(assert (= temp58_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp58_169)))
(assert (= temp58_171 #x0000000000000001))
(assert (= temp58_172 temp58_171))
(assert (= temp58_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp58_172)))
(assert (= temp58_174 #x0000000000000002))
(assert (= temp58_175 temp58_174))
(assert (= temp58_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp58_175)))
(assert (= temp58_177 #x0000000000000003))
(assert (= temp58_178 temp58_177))
(assert (= temp58_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp58_178)))
(assert (= temp58_180 #x0000000000000004))
(assert (= temp58_181 temp58_180))
(assert (= temp58_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp58_181)))
(assert (= temp58_183 #x0000000000000005))
(assert (= temp58_184 temp58_183))
(assert (= temp58_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp58_184)))
(assert (= temp58_186 #x0000000000000000))
(assert (= temp58_187
   (ite (bvslt var1311786 temp58_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp58_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp58_187)))
(assert (= var1322903 temp58_188))
(assert (bvslt (ite (bvslt var1311786 temp58_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp58_189 #x0000000000000001))
(assert (= var1311786 temp58_189))
(assert (= temp58_191 var1311786))
(assert (= temp58_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_191)))
(assert (= temp58_190 temp58_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp58_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp58_193 #x0000000000000001))
(assert (= var1322908 temp58_193))
(assert (= temp58_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp58_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_195 #x0000000000000001))
(assert (= var1322975 temp58_195))
(assert (= temp58_196 #x0000000000000000))
(assert (= var1310898 temp58_196))
(assert (= temp58_197 #x0000000000000000))
(assert (= temp58_198 temp58_197))
(assert (= temp58_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp58_198)))
(assert (= temp58_200 #x0000000000000001))
(assert (= temp58_201 temp58_200))
(assert (= temp58_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp58_201)))
(assert (= temp58_203 #x0000000000000002))
(assert (= temp58_204 temp58_203))
(assert (= temp58_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp58_204)))
(assert (= temp58_206 #x0000000000000003))
(assert (= temp58_207 temp58_206))
(assert (= temp58_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp58_207)))
(assert (= temp58_209 #x0000000000000004))
(assert (= temp58_210 temp58_209))
(assert (= temp58_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp58_210)))
(assert (= temp58_212 #x0000000000000005))
(assert (= temp58_213 temp58_212))
(assert (= temp58_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp58_213)))
(assert (= temp58_215 #x0000000000000000))
(assert (= temp58_216
   (ite (bvslt var1310898 temp58_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp58_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp58_216)))
(assert (= var1322977 temp58_217))
(assert (bvslt (ite (bvslt var1310898 temp58_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp58_218 #x0000000000000000))
(assert (= var1310898 temp58_218))
(assert (= temp58_220 var1310898))
(assert (= temp58_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp58_220)))
(assert (= temp58_219 temp58_221))
(assert (= var1322980
   (ite (= var1322977 temp58_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp58_222 #x0000000000000001))
(assert (= var1322980 temp58_222))
(assert (= temp58_223 #x0000000000000002))
(assert (= var1848169 temp58_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp58_225 #x0000000000000001))
(assert (= var1323065 temp58_225))
(assert (= temp58_226 #x0000000000000001))
(assert (= var3486735 temp58_226))
(assert (= temp58_227 #x0000000000000001))
(assert (= var3814415 temp58_227))
(assert (= temp58_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp58_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_229 #x0000000000000001))
(assert (= var79986 temp58_229))
(assert (= temp58_230 #x0000000000000001))
(assert (= var80116 temp58_230))
(assert (= var4796905 var80116))
(assert (= temp58_231 #x0000000000000000))
(assert (= var4784306 temp58_231))
(assert (= temp58_232 #x0000000000000000))
(assert (= temp58_233
   (ite (bvslt var4784306 temp58_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp58_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp58_233)))
(assert (= var4796924 temp58_234))
(assert (bvslt (ite (bvslt var4784306 temp58_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp58_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp58_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp58_236 #x0000000000000001))
(assert (= var4796925 temp58_236))
(assert (= temp58_237 #x0000000000000000))
(assert (= var4996927 temp58_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp58_238 #x0000000000000002))
(assert (= var5125763 temp58_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_239 #x0000000000000000))
(assert (= var5191324 temp58_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= var5910928 var80129))
(assert (= temp58_240 #x0000000000000000))
(assert (= var80421
   (ite (distinct ARGNAME_benchmark_NAMEEND temp58_240)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_241 #x0000000000000000))
(assert (= var80423
   (ite (distinct ARGNAME_deterministic_NAMEEND temp58_241)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_242 #x0000000000000000))
(assert (= var80425
   (ite (distinct ARGNAME_allow_tf32_NAMEEND temp58_242)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp58_243 #x0000000000000001))
(assert (= var79986 temp58_243))
(model-add temp58_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp58_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp58_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






