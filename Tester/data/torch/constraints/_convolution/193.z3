(declare-fun temp256_1 () (_ BitVec 64))
(declare-fun var79868 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp256_2 () (_ BitVec 64))
(declare-fun temp256_3 () (_ BitVec 64))
(declare-fun var79869 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp256_4 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var79914 () (_ BitVec 64))
(declare-fun temp256_5 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp256_6 () (_ BitVec 64))
(declare-fun temp256_7 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp256_8 () (_ BitVec 64))
(declare-fun temp256_9 () (_ BitVec 64))
(declare-fun temp256_10 () (_ BitVec 64))
(declare-fun temp256_11 () (_ BitVec 64))
(declare-fun temp256_12 () (_ BitVec 64))
(declare-fun temp256_13 () (_ BitVec 64))
(declare-fun temp256_14 () (_ BitVec 64))
(declare-fun temp256_15 () (_ BitVec 64))
(declare-fun temp256_16 () (_ BitVec 64))
(declare-fun temp256_17 () (_ BitVec 64))
(declare-fun temp256_18 () (_ BitVec 64))
(declare-fun temp256_19 () (_ BitVec 64))
(declare-fun temp256_20 () (_ BitVec 64))
(declare-fun temp256_21 () (_ BitVec 64))
(declare-fun temp256_22 () (_ BitVec 64))
(declare-fun temp256_23 () (_ BitVec 64))
(declare-fun temp256_24 () (_ BitVec 64))
(declare-fun temp256_25 () (_ BitVec 64))
(declare-fun temp256_26 () (_ BitVec 64))
(declare-fun temp256_27 () (_ BitVec 64))
(declare-fun temp256_28 () (_ BitVec 64))
(declare-fun temp256_29 () (_ BitVec 64))
(declare-fun temp256_30 () (_ BitVec 64))
(declare-fun temp256_31 () (_ BitVec 64))
(declare-fun temp256_32 () (_ BitVec 64))
(declare-fun temp256_33 () (_ BitVec 64))
(declare-fun temp256_34 () (_ BitVec 64))
(declare-fun temp256_35 () (_ BitVec 64))
(declare-fun temp256_36 () (_ BitVec 64))
(declare-fun temp256_37 () (_ BitVec 64))
(declare-fun temp256_38 () (_ BitVec 64))
(declare-fun temp256_39 () (_ BitVec 64))
(declare-fun temp256_40 () (_ BitVec 64))
(declare-fun temp256_41 () (_ BitVec 64))
(declare-fun temp256_42 () (_ BitVec 64))
(declare-fun temp256_43 () (_ BitVec 64))
(declare-fun temp256_44 () (_ BitVec 64))
(declare-fun temp256_45 () (_ BitVec 64))
(declare-fun temp256_46 () (_ BitVec 64))
(declare-fun temp256_47 () (_ BitVec 64))
(declare-fun var1322786 () (_ BitVec 64))
(declare-fun temp256_48 () (_ BitVec 64))
(declare-fun temp256_49 () (_ BitVec 64))
(declare-fun temp256_50 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp256_51 () (_ BitVec 64))
(declare-fun temp256_52 () (_ BitVec 64))
(declare-fun temp256_53 () (_ BitVec 64))
(declare-fun temp256_54 () (_ BitVec 64))
(declare-fun temp256_55 () (_ BitVec 64))
(declare-fun temp256_56 () (_ BitVec 64))
(declare-fun temp256_57 () (_ BitVec 64))
(declare-fun temp256_58 () (_ BitVec 64))
(declare-fun temp256_59 () (_ BitVec 64))
(declare-fun temp256_60 () (_ BitVec 64))
(declare-fun temp256_61 () (_ BitVec 64))
(declare-fun temp256_62 () (_ BitVec 64))
(declare-fun temp256_63 () (_ BitVec 64))
(declare-fun temp256_64 () (_ BitVec 64))
(declare-fun temp256_65 () (_ BitVec 64))
(declare-fun temp256_66 () (_ BitVec 64))
(declare-fun temp256_67 () (_ BitVec 64))
(declare-fun temp256_68 () (_ BitVec 64))
(declare-fun temp256_69 () (_ BitVec 64))
(declare-fun temp256_70 () (_ BitVec 64))
(declare-fun temp256_71 () (_ BitVec 64))
(declare-fun temp256_72 () (_ BitVec 64))
(declare-fun temp256_73 () (_ BitVec 64))
(declare-fun temp256_74 () (_ BitVec 64))
(declare-fun temp256_75 () (_ BitVec 64))
(declare-fun temp256_76 () (_ BitVec 64))
(declare-fun temp256_77 () (_ BitVec 64))
(declare-fun temp256_78 () (_ BitVec 64))
(declare-fun temp256_79 () (_ BitVec 64))
(declare-fun temp256_80 () (_ BitVec 64))
(declare-fun temp256_81 () (_ BitVec 64))
(declare-fun temp256_82 () (_ BitVec 64))
(declare-fun temp256_83 () (_ BitVec 64))
(declare-fun temp256_84 () (_ BitVec 64))
(declare-fun temp256_85 () (_ BitVec 64))
(declare-fun temp256_86 () (_ BitVec 64))
(declare-fun temp256_87 () (_ BitVec 64))
(declare-fun temp256_88 () (_ BitVec 64))
(declare-fun temp256_89 () (_ BitVec 64))
(declare-fun temp256_90 () (_ BitVec 64))
(declare-fun var1322797 () (_ BitVec 64))
(declare-fun temp256_91 () (_ BitVec 64))
(declare-fun temp256_92 () (_ BitVec 64))
(declare-fun temp256_93 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp256_94 () (_ BitVec 64))
(declare-fun temp256_95 () (_ BitVec 64))
(declare-fun temp256_96 () (_ BitVec 64))
(declare-fun temp256_97 () (_ BitVec 64))
(declare-fun temp256_98 () (_ BitVec 64))
(declare-fun temp256_99 () (_ BitVec 64))
(declare-fun temp256_100 () (_ BitVec 64))
(declare-fun temp256_101 () (_ BitVec 64))
(declare-fun temp256_102 () (_ BitVec 64))
(declare-fun temp256_103 () (_ BitVec 64))
(declare-fun temp256_104 () (_ BitVec 64))
(declare-fun temp256_105 () (_ BitVec 64))
(declare-fun temp256_106 () (_ BitVec 64))
(declare-fun temp256_107 () (_ BitVec 64))
(declare-fun temp256_108 () (_ BitVec 64))
(declare-fun temp256_109 () (_ BitVec 64))
(declare-fun temp256_110 () (_ BitVec 64))
(declare-fun temp256_111 () (_ BitVec 64))
(declare-fun temp256_112 () (_ BitVec 64))
(declare-fun temp256_113 () (_ BitVec 64))
(declare-fun temp256_114 () (_ BitVec 64))
(declare-fun temp256_115 () (_ BitVec 64))
(declare-fun temp256_116 () (_ BitVec 64))
(declare-fun temp256_117 () (_ BitVec 64))
(declare-fun temp256_118 () (_ BitVec 64))
(declare-fun temp256_119 () (_ BitVec 64))
(declare-fun temp256_120 () (_ BitVec 64))
(declare-fun temp256_121 () (_ BitVec 64))
(declare-fun temp256_122 () (_ BitVec 64))
(declare-fun temp256_123 () (_ BitVec 64))
(declare-fun temp256_124 () (_ BitVec 64))
(declare-fun temp256_125 () (_ BitVec 64))
(declare-fun temp256_126 () (_ BitVec 64))
(declare-fun temp256_127 () (_ BitVec 64))
(declare-fun temp256_128 () (_ BitVec 64))
(declare-fun temp256_129 () (_ BitVec 64))
(declare-fun temp256_130 () (_ BitVec 64))
(declare-fun temp256_131 () (_ BitVec 64))
(declare-fun temp256_132 () (_ BitVec 64))
(declare-fun temp256_133 () (_ BitVec 64))
(declare-fun var1322807 () (_ BitVec 64))
(declare-fun temp256_134 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322819 () (_ BitVec 64))
(declare-fun temp256_135 () (_ BitVec 64))
(declare-fun temp256_136 () (_ BitVec 64))
(declare-fun var1310898 () (_ BitVec 64))
(declare-fun temp256_137 () (_ BitVec 64))
(declare-fun temp256_138 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp256_139 () (_ BitVec 64))
(declare-fun temp256_140 () (_ BitVec 64))
(declare-fun temp256_141 () (_ BitVec 64))
(declare-fun temp256_142 () (_ BitVec 64))
(declare-fun temp256_143 () (_ BitVec 64))
(declare-fun temp256_144 () (_ BitVec 64))
(declare-fun temp256_145 () (_ BitVec 64))
(declare-fun temp256_146 () (_ BitVec 64))
(declare-fun temp256_147 () (_ BitVec 64))
(declare-fun temp256_148 () (_ BitVec 64))
(declare-fun temp256_149 () (_ BitVec 64))
(declare-fun temp256_150 () (_ BitVec 64))
(declare-fun temp256_151 () (_ BitVec 64))
(declare-fun temp256_152 () (_ BitVec 64))
(declare-fun temp256_153 () (_ BitVec 64))
(declare-fun temp256_154 () (_ BitVec 64))
(declare-fun temp256_156 () (_ BitVec 64))
(declare-fun temp256_157 () (_ BitVec 64))
(declare-fun temp256_155 () (_ BitVec 64))
(declare-fun var1322852 () (_ BitVec 64))
(declare-fun temp256_158 () (_ BitVec 64))
(declare-fun temp256_159 () (_ BitVec 64))
(declare-fun temp256_161 () (_ BitVec 64))
(declare-fun temp256_162 () (_ BitVec 64))
(declare-fun temp256_160 () (_ BitVec 64))
(declare-fun var1322874 () (_ BitVec 64))
(declare-fun temp256_163 () (_ BitVec 64))
(declare-fun var1322875 () (_ BitVec 64))
(declare-fun temp256_164 () (_ BitVec 64))
(declare-fun temp256_165 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1322895 () (_ BitVec 64))
(declare-fun temp256_166 () (_ BitVec 64))
(declare-fun temp256_167 () (_ BitVec 64))
(declare-fun var1311786 () (_ BitVec 64))
(declare-fun temp256_168 () (_ BitVec 64))
(declare-fun temp256_169 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp256_170 () (_ BitVec 64))
(declare-fun temp256_171 () (_ BitVec 64))
(declare-fun temp256_172 () (_ BitVec 64))
(declare-fun temp256_173 () (_ BitVec 64))
(declare-fun temp256_174 () (_ BitVec 64))
(declare-fun temp256_175 () (_ BitVec 64))
(declare-fun temp256_176 () (_ BitVec 64))
(declare-fun temp256_177 () (_ BitVec 64))
(declare-fun temp256_178 () (_ BitVec 64))
(declare-fun temp256_179 () (_ BitVec 64))
(declare-fun temp256_180 () (_ BitVec 64))
(declare-fun temp256_181 () (_ BitVec 64))
(declare-fun temp256_182 () (_ BitVec 64))
(declare-fun temp256_183 () (_ BitVec 64))
(declare-fun temp256_184 () (_ BitVec 64))
(declare-fun temp256_185 () (_ BitVec 64))
(declare-fun temp256_186 () (_ BitVec 64))
(declare-fun temp256_187 () (_ BitVec 64))
(declare-fun temp256_188 () (_ BitVec 64))
(declare-fun var1322903 () (_ BitVec 64))
(declare-fun temp256_189 () (_ BitVec 64))
(declare-fun temp256_191 () (_ BitVec 64))
(declare-fun temp256_192 () (_ BitVec 64))
(declare-fun temp256_190 () (_ BitVec 64))
(declare-fun var1322907 () (_ BitVec 64))
(declare-fun var1322908 () (_ BitVec 64))
(declare-fun temp256_193 () (_ BitVec 64))
(declare-fun temp256_194 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1322975 () (_ BitVec 64))
(declare-fun temp256_195 () (_ BitVec 64))
(declare-fun temp256_196 () (_ BitVec 64))
(declare-fun temp256_197 () (_ BitVec 64))
(declare-fun temp256_198 () (_ BitVec 64))
(declare-fun ARGNAME_bias_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp256_199 () (_ BitVec 64))
(declare-fun temp256_200 () (_ BitVec 64))
(declare-fun temp256_201 () (_ BitVec 64))
(declare-fun temp256_202 () (_ BitVec 64))
(declare-fun temp256_203 () (_ BitVec 64))
(declare-fun temp256_204 () (_ BitVec 64))
(declare-fun temp256_205 () (_ BitVec 64))
(declare-fun temp256_206 () (_ BitVec 64))
(declare-fun temp256_207 () (_ BitVec 64))
(declare-fun temp256_208 () (_ BitVec 64))
(declare-fun temp256_209 () (_ BitVec 64))
(declare-fun temp256_210 () (_ BitVec 64))
(declare-fun temp256_211 () (_ BitVec 64))
(declare-fun temp256_212 () (_ BitVec 64))
(declare-fun temp256_213 () (_ BitVec 64))
(declare-fun temp256_214 () (_ BitVec 64))
(declare-fun temp256_215 () (_ BitVec 64))
(declare-fun temp256_216 () (_ BitVec 64))
(declare-fun temp256_217 () (_ BitVec 64))
(declare-fun var1322977 () (_ BitVec 64))
(declare-fun temp256_218 () (_ BitVec 64))
(declare-fun temp256_220 () (_ BitVec 64))
(declare-fun temp256_221 () (_ BitVec 64))
(declare-fun temp256_219 () (_ BitVec 64))
(declare-fun var1322980 () (_ BitVec 64))
(declare-fun temp256_222 () (_ BitVec 64))
(declare-fun temp256_223 () (_ BitVec 64))
(declare-fun var1848169 () (_ BitVec 64))
(declare-fun var1848178 () (_ BitVec 64))
(declare-fun var1913913 () (_ BitVec 64))
(declare-fun var1913915 () (_ BitVec 64))
(declare-fun temp256_224 () (_ BitVec 64))
(declare-fun var1979456 () (_ BitVec 64))
(declare-fun var2045003 () (_ BitVec 64))
(declare-fun temp256_225 () (_ BitVec 64))
(declare-fun var1323065 () (_ BitVec 64))
(declare-fun temp256_226 () (_ BitVec 64))
(declare-fun var3486735 () (_ BitVec 64))
(declare-fun temp256_227 () (_ BitVec 64))
(declare-fun var3814415 () (_ BitVec 64))
(declare-fun temp256_228 () (_ BitVec 64))
(declare-fun var79986 () (_ BitVec 64))
(declare-fun temp256_229 () (_ BitVec 64))
(declare-fun temp256_230 () (_ BitVec 64))
(declare-fun var80116 () (_ BitVec 64))
(declare-fun var4796905 () (_ BitVec 64))
(declare-fun temp256_231 () (_ BitVec 64))
(declare-fun var4784306 () (_ BitVec 64))
(declare-fun temp256_232 () (_ BitVec 64))
(declare-fun temp256_233 () (_ BitVec 64))
(declare-fun temp256_234 () (_ BitVec 64))
(declare-fun var4796924 () (_ BitVec 64))
(declare-fun temp256_235 () (_ BitVec 64))
(declare-fun var4796925 () (_ BitVec 64))
(declare-fun temp256_236 () (_ BitVec 64))
(declare-fun temp256_237 () (_ BitVec 64))
(declare-fun var4996927 () (_ BitVec 64))
(declare-fun var4996929 () (_ BitVec 64))
(declare-fun var4996886 () (_ BitVec 64))
(declare-fun var80129 () (_ BitVec 64))
(declare-fun temp256_238 () (_ BitVec 64))
(declare-fun var5125763 () (_ BitVec 64))
(declare-fun var5125765 () (_ BitVec 64))
(declare-fun var5191308 () (_ BitVec 64))
(declare-fun var5191309 () (_ BitVec 64))
(declare-fun var5191322 () (_ BitVec 64))
(declare-fun var5191324 () (_ BitVec 64))
(declare-fun temp256_239 () (_ BitVec 64))
(declare-fun var5191349 () (_ BitVec 64))
(declare-fun var5191351 () (_ BitVec 64))
(declare-fun var5312339 () (_ BitVec 64))
(declare-fun var5714320 () (_ BitVec 64))
(declare-fun temp256_240 () (_ BitVec 64))
(declare-fun ARGNAME_benchmark_NAMEEND () (_ BitVec 64))
(declare-fun var80889 () (_ BitVec 64))
(declare-fun temp256_241 () (_ BitVec 64))
(declare-fun ARGNAME_deterministic_NAMEEND () (_ BitVec 64))
(declare-fun var80891 () (_ BitVec 64))
(declare-fun temp256_242 () (_ BitVec 64))
(declare-fun temp256_243 () (_ BitVec 64))
(declare-fun var7353108 () (_ BitVec 64))
(declare-fun var7353075 () (_ BitVec 64))
(declare-fun var7221639 () (_ BitVec 64))
(declare-fun var7221635 () (_ BitVec 64))
(declare-fun var81597 () (_ BitVec 64))
(declare-fun temp256_244 () (_ BitVec 64))
(assert (= temp256_1 #xfffffffffffffffe))
(assert (= var79868 (bvadd ARGNAME_weight_NAMEEND_DIM temp256_1)))
(assert (= temp256_2 #x0000000000000003))
(assert (= var79869
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp256_2)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_3 #x0000000000000000))
(assert (= var79869 temp256_3))
(assert (= temp256_4 #x0000000000000001))
(assert (= var79914
   (ite (bvslt ARGNAME_groups_NAMEEND temp256_4)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_5 #x0000000000000000))
(assert (= var79914 temp256_5))
(assert (= ARGNAME_stride_NAMEEND_LEN var79868))
(assert (= ARGNAME_padding_NAMEEND_LEN var79868))
(assert (= ARGNAME_dilation_NAMEEND_LEN var79868))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var79868))
(assert (= temp256_6 #x0000000000000000))
(assert (= temp256_7 temp256_6))
(assert (= temp256_8 (select ARGNAME_padding_NAMEEND_VAL temp256_7)))
(assert (= temp256_9 #x0000000000000001))
(assert (= temp256_10 temp256_9))
(assert (= temp256_11 (select ARGNAME_padding_NAMEEND_VAL temp256_10)))
(assert (= temp256_12 #x0000000000000002))
(assert (= temp256_13 temp256_12))
(assert (= temp256_14 (select ARGNAME_padding_NAMEEND_VAL temp256_13)))
(assert (= temp256_15 #x0000000000000003))
(assert (= temp256_16 temp256_15))
(assert (= temp256_17 (select ARGNAME_padding_NAMEEND_VAL temp256_16)))
(assert (= temp256_18 #x0000000000000004))
(assert (= temp256_19 temp256_18))
(assert (= temp256_20 (select ARGNAME_padding_NAMEEND_VAL temp256_19)))
(assert (= temp256_21 #x0000000000000005))
(assert (= temp256_22 temp256_21))
(assert (= temp256_23 (select ARGNAME_padding_NAMEEND_VAL temp256_22)))
(assert (= temp256_24 #x0000000000000000))
(assert (= temp256_25 #x0000000000000000))
(assert (= temp256_26 temp256_25))
(assert (= temp256_27 (select ARGNAME_padding_NAMEEND_VAL temp256_26)))
(assert (= temp256_28 #x0000000000000000))
(assert (= temp256_29 #x0000000000000001))
(assert (= temp256_30 temp256_29))
(assert (= temp256_31 (select ARGNAME_padding_NAMEEND_VAL temp256_30)))
(assert (= temp256_32 #x0000000000000000))
(assert (= temp256_33 #x0000000000000002))
(assert (= temp256_34 temp256_33))
(assert (= temp256_35 (select ARGNAME_padding_NAMEEND_VAL temp256_34)))
(assert (= temp256_36 #x0000000000000000))
(assert (= temp256_37 #x0000000000000003))
(assert (= temp256_38 temp256_37))
(assert (= temp256_39 (select ARGNAME_padding_NAMEEND_VAL temp256_38)))
(assert (= temp256_40 #x0000000000000000))
(assert (= temp256_41 #x0000000000000004))
(assert (= temp256_42 temp256_41))
(assert (= temp256_43 (select ARGNAME_padding_NAMEEND_VAL temp256_42)))
(assert (= temp256_44 #x0000000000000000))
(assert (= temp256_45 #x0000000000000005))
(assert (= temp256_46 temp256_45))
(assert (= temp256_47 (select ARGNAME_padding_NAMEEND_VAL temp256_46)))
(assert (= var1322786
   (ite (and true
             (bvslt temp256_27 temp256_24)
             (bvslt temp256_31 temp256_28)
             (bvslt temp256_35 temp256_32)
             (bvslt temp256_39 temp256_36)
             (bvslt temp256_43 temp256_40)
             (bvslt temp256_47 temp256_44))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_48 #x0000000000000000))
(assert (= var1322786 temp256_48))
(assert (= temp256_49 #x0000000000000000))
(assert (= temp256_50 temp256_49))
(assert (= temp256_51 (select ARGNAME_output_padding_NAMEEND_VAL temp256_50)))
(assert (= temp256_52 #x0000000000000001))
(assert (= temp256_53 temp256_52))
(assert (= temp256_54 (select ARGNAME_output_padding_NAMEEND_VAL temp256_53)))
(assert (= temp256_55 #x0000000000000002))
(assert (= temp256_56 temp256_55))
(assert (= temp256_57 (select ARGNAME_output_padding_NAMEEND_VAL temp256_56)))
(assert (= temp256_58 #x0000000000000003))
(assert (= temp256_59 temp256_58))
(assert (= temp256_60 (select ARGNAME_output_padding_NAMEEND_VAL temp256_59)))
(assert (= temp256_61 #x0000000000000004))
(assert (= temp256_62 temp256_61))
(assert (= temp256_63 (select ARGNAME_output_padding_NAMEEND_VAL temp256_62)))
(assert (= temp256_64 #x0000000000000005))
(assert (= temp256_65 temp256_64))
(assert (= temp256_66 (select ARGNAME_output_padding_NAMEEND_VAL temp256_65)))
(assert (= temp256_67 #x0000000000000000))
(assert (= temp256_68 #x0000000000000000))
(assert (= temp256_69 temp256_68))
(assert (= temp256_70 (select ARGNAME_output_padding_NAMEEND_VAL temp256_69)))
(assert (= temp256_71 #x0000000000000000))
(assert (= temp256_72 #x0000000000000001))
(assert (= temp256_73 temp256_72))
(assert (= temp256_74 (select ARGNAME_output_padding_NAMEEND_VAL temp256_73)))
(assert (= temp256_75 #x0000000000000000))
(assert (= temp256_76 #x0000000000000002))
(assert (= temp256_77 temp256_76))
(assert (= temp256_78 (select ARGNAME_output_padding_NAMEEND_VAL temp256_77)))
(assert (= temp256_79 #x0000000000000000))
(assert (= temp256_80 #x0000000000000003))
(assert (= temp256_81 temp256_80))
(assert (= temp256_82 (select ARGNAME_output_padding_NAMEEND_VAL temp256_81)))
(assert (= temp256_83 #x0000000000000000))
(assert (= temp256_84 #x0000000000000004))
(assert (= temp256_85 temp256_84))
(assert (= temp256_86 (select ARGNAME_output_padding_NAMEEND_VAL temp256_85)))
(assert (= temp256_87 #x0000000000000000))
(assert (= temp256_88 #x0000000000000005))
(assert (= temp256_89 temp256_88))
(assert (= temp256_90 (select ARGNAME_output_padding_NAMEEND_VAL temp256_89)))
(assert (= var1322797
   (ite (and true
             (bvslt temp256_70 temp256_67)
             (bvslt temp256_74 temp256_71)
             (bvslt temp256_78 temp256_75)
             (bvslt temp256_82 temp256_79)
             (bvslt temp256_86 temp256_83)
             (bvslt temp256_90 temp256_87))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_91 #x0000000000000000))
(assert (= var1322797 temp256_91))
(assert (= temp256_92 #x0000000000000000))
(assert (= temp256_93 temp256_92))
(assert (= temp256_94 (select ARGNAME_stride_NAMEEND_VAL temp256_93)))
(assert (= temp256_95 #x0000000000000001))
(assert (= temp256_96 temp256_95))
(assert (= temp256_97 (select ARGNAME_stride_NAMEEND_VAL temp256_96)))
(assert (= temp256_98 #x0000000000000002))
(assert (= temp256_99 temp256_98))
(assert (= temp256_100 (select ARGNAME_stride_NAMEEND_VAL temp256_99)))
(assert (= temp256_101 #x0000000000000003))
(assert (= temp256_102 temp256_101))
(assert (= temp256_103 (select ARGNAME_stride_NAMEEND_VAL temp256_102)))
(assert (= temp256_104 #x0000000000000004))
(assert (= temp256_105 temp256_104))
(assert (= temp256_106 (select ARGNAME_stride_NAMEEND_VAL temp256_105)))
(assert (= temp256_107 #x0000000000000005))
(assert (= temp256_108 temp256_107))
(assert (= temp256_109 (select ARGNAME_stride_NAMEEND_VAL temp256_108)))
(assert (= temp256_110 #x0000000000000000))
(assert (= temp256_111 #x0000000000000000))
(assert (= temp256_112 temp256_111))
(assert (= temp256_113 (select ARGNAME_stride_NAMEEND_VAL temp256_112)))
(assert (= temp256_114 #x0000000000000000))
(assert (= temp256_115 #x0000000000000001))
(assert (= temp256_116 temp256_115))
(assert (= temp256_117 (select ARGNAME_stride_NAMEEND_VAL temp256_116)))
(assert (= temp256_118 #x0000000000000000))
(assert (= temp256_119 #x0000000000000002))
(assert (= temp256_120 temp256_119))
(assert (= temp256_121 (select ARGNAME_stride_NAMEEND_VAL temp256_120)))
(assert (= temp256_122 #x0000000000000000))
(assert (= temp256_123 #x0000000000000003))
(assert (= temp256_124 temp256_123))
(assert (= temp256_125 (select ARGNAME_stride_NAMEEND_VAL temp256_124)))
(assert (= temp256_126 #x0000000000000000))
(assert (= temp256_127 #x0000000000000004))
(assert (= temp256_128 temp256_127))
(assert (= temp256_129 (select ARGNAME_stride_NAMEEND_VAL temp256_128)))
(assert (= temp256_130 #x0000000000000000))
(assert (= temp256_131 #x0000000000000005))
(assert (= temp256_132 temp256_131))
(assert (= temp256_133 (select ARGNAME_stride_NAMEEND_VAL temp256_132)))
(assert (= var1322807
   (ite (and true
             (bvsle temp256_113 temp256_110)
             (bvsle temp256_117 temp256_114)
             (bvsle temp256_121 temp256_118)
             (bvsle temp256_125 temp256_122)
             (bvsle temp256_129 temp256_126)
             (bvsle temp256_133 temp256_130))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_134 #x0000000000000000))
(assert (= var1322807 temp256_134))
(assert (= var1322819
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_135 #x0000000000000001))
(assert (= var1322819 temp256_135))
(assert (= temp256_136 #x0000000000000000))
(assert (= var1310898 temp256_136))
(assert (= temp256_137 #x0000000000000000))
(assert (= temp256_138 temp256_137))
(assert (= temp256_139 (select ARGNAME_weight_NAMEEND_DIMSIZE temp256_138)))
(assert (= temp256_140 #x0000000000000001))
(assert (= temp256_141 temp256_140))
(assert (= temp256_142 (select ARGNAME_weight_NAMEEND_DIMSIZE temp256_141)))
(assert (= temp256_143 #x0000000000000002))
(assert (= temp256_144 temp256_143))
(assert (= temp256_145 (select ARGNAME_weight_NAMEEND_DIMSIZE temp256_144)))
(assert (= temp256_146 #x0000000000000003))
(assert (= temp256_147 temp256_146))
(assert (= temp256_148 (select ARGNAME_weight_NAMEEND_DIMSIZE temp256_147)))
(assert (= temp256_149 #x0000000000000004))
(assert (= temp256_150 temp256_149))
(assert (= temp256_151 (select ARGNAME_weight_NAMEEND_DIMSIZE temp256_150)))
(assert (= temp256_152 #x0000000000000005))
(assert (= temp256_153 temp256_152))
(assert (= temp256_154 (select ARGNAME_weight_NAMEEND_DIMSIZE temp256_153)))
(assert (= temp256_156 var1310898))
(assert (= temp256_157 (select ARGNAME_weight_NAMEEND_DIMSIZE temp256_156)))
(assert (= temp256_155 temp256_157))
(assert (= var1322852
   (ite (bvslt temp256_155 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_158 #x0000000000000000))
(assert (= var1322852 temp256_158))
(assert (= temp256_159 #x0000000000000000))
(assert (= var1310898 temp256_159))
(assert (= temp256_161 var1310898))
(assert (= temp256_162 (select ARGNAME_weight_NAMEEND_DIMSIZE temp256_161)))
(assert (= temp256_160 temp256_162))
(assert (= var1322874 (bvsmod temp256_160 ARGNAME_groups_NAMEEND)))
(assert (= temp256_163 #x0000000000000000))
(assert (= var1322875
   (ite (= var1322874 temp256_163) #x0000000000000001 #x0000000000000000)))
(assert (= temp256_164 #x0000000000000001))
(assert (= var1322875 temp256_164))
(assert (= temp256_165 #x0000000000000000))
(assert (= var1322895
   (ite (= ARGNAME_transposed_NAMEEND temp256_165)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_166 #x0000000000000001))
(assert (= var1322895 temp256_166))
(assert (= temp256_167 #x0000000000000001))
(assert (= var1311786 temp256_167))
(assert (= temp256_168 #x0000000000000000))
(assert (= temp256_169 temp256_168))
(assert (= temp256_170 (select ARGNAME_input_NAMEEND_DIMSIZE temp256_169)))
(assert (= temp256_171 #x0000000000000001))
(assert (= temp256_172 temp256_171))
(assert (= temp256_173 (select ARGNAME_input_NAMEEND_DIMSIZE temp256_172)))
(assert (= temp256_174 #x0000000000000002))
(assert (= temp256_175 temp256_174))
(assert (= temp256_176 (select ARGNAME_input_NAMEEND_DIMSIZE temp256_175)))
(assert (= temp256_177 #x0000000000000003))
(assert (= temp256_178 temp256_177))
(assert (= temp256_179 (select ARGNAME_input_NAMEEND_DIMSIZE temp256_178)))
(assert (= temp256_180 #x0000000000000004))
(assert (= temp256_181 temp256_180))
(assert (= temp256_182 (select ARGNAME_input_NAMEEND_DIMSIZE temp256_181)))
(assert (= temp256_183 #x0000000000000005))
(assert (= temp256_184 temp256_183))
(assert (= temp256_185 (select ARGNAME_input_NAMEEND_DIMSIZE temp256_184)))
(assert (= temp256_186 #x0000000000000000))
(assert (= temp256_187
   (ite (bvslt var1311786 temp256_186)
        (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
        var1311786)))
(assert (= temp256_188 (select ARGNAME_input_NAMEEND_DIMSIZE temp256_187)))
(assert (= var1322903 temp256_188))
(assert (bvslt (ite (bvslt var1311786 temp256_186)
            (bvadd ARGNAME_input_NAMEEND_DIM var1311786)
            var1311786)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp256_189 #x0000000000000001))
(assert (= var1311786 temp256_189))
(assert (= temp256_191 var1311786))
(assert (= temp256_192 (select ARGNAME_weight_NAMEEND_DIMSIZE temp256_191)))
(assert (= temp256_190 temp256_192))
(assert (= var1322907 (bvmul ARGNAME_groups_NAMEEND temp256_190)))
(assert (= var1322908
   (ite (= var1322903 var1322907) #x0000000000000001 #x0000000000000000)))
(assert (= temp256_193 #x0000000000000001))
(assert (= var1322908 temp256_193))
(assert (= temp256_194 #x0000000000000001))
(assert (= var1322975
   (ite (= ARGNAME_bias_NAMEEND_DIM temp256_194)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_195 #x0000000000000001))
(assert (= var1322975 temp256_195))
(assert (= temp256_196 #x0000000000000000))
(assert (= var1310898 temp256_196))
(assert (= temp256_197 #x0000000000000000))
(assert (= temp256_198 temp256_197))
(assert (= temp256_199 (select ARGNAME_bias_NAMEEND_DIMSIZE temp256_198)))
(assert (= temp256_200 #x0000000000000001))
(assert (= temp256_201 temp256_200))
(assert (= temp256_202 (select ARGNAME_bias_NAMEEND_DIMSIZE temp256_201)))
(assert (= temp256_203 #x0000000000000002))
(assert (= temp256_204 temp256_203))
(assert (= temp256_205 (select ARGNAME_bias_NAMEEND_DIMSIZE temp256_204)))
(assert (= temp256_206 #x0000000000000003))
(assert (= temp256_207 temp256_206))
(assert (= temp256_208 (select ARGNAME_bias_NAMEEND_DIMSIZE temp256_207)))
(assert (= temp256_209 #x0000000000000004))
(assert (= temp256_210 temp256_209))
(assert (= temp256_211 (select ARGNAME_bias_NAMEEND_DIMSIZE temp256_210)))
(assert (= temp256_212 #x0000000000000005))
(assert (= temp256_213 temp256_212))
(assert (= temp256_214 (select ARGNAME_bias_NAMEEND_DIMSIZE temp256_213)))
(assert (= temp256_215 #x0000000000000000))
(assert (= temp256_216
   (ite (bvslt var1310898 temp256_215)
        (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
        var1310898)))
(assert (= temp256_217 (select ARGNAME_bias_NAMEEND_DIMSIZE temp256_216)))
(assert (= var1322977 temp256_217))
(assert (bvslt (ite (bvslt var1310898 temp256_215)
            (bvadd ARGNAME_bias_NAMEEND_DIM var1310898)
            var1310898)
       ARGNAME_bias_NAMEEND_DIM))
(assert (= temp256_218 #x0000000000000000))
(assert (= var1310898 temp256_218))
(assert (= temp256_220 var1310898))
(assert (= temp256_221 (select ARGNAME_weight_NAMEEND_DIMSIZE temp256_220)))
(assert (= temp256_219 temp256_221))
(assert (= var1322980
   (ite (= var1322977 temp256_219) #x0000000000000001 #x0000000000000000)))
(assert (= temp256_222 #x0000000000000001))
(assert (= var1322980 temp256_222))
(assert (= temp256_223 #x0000000000000002))
(assert (= var1848169 temp256_223))
(assert (= var1848178 var1848169))
(assert (= var1913913 var1848178))
(assert (= var1913915
   (ite (bvslt var1913913 ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_224
   (ite (= var1913915 #x0000000000000001) ARGNAME_input_NAMEEND_DIM var1848178)))
(assert (= var1979456 var1848178))
(assert (= var2045003 var1979456))
(assert (= temp256_225 #x0000000000000001))
(assert (= var1323065 temp256_225))
(assert (= temp256_226 #x0000000000000001))
(assert (= var3486735 temp256_226))
(assert (= temp256_227 #x0000000000000001))
(assert (= var3814415 temp256_227))
(assert (= temp256_228 #x0000000000000003))
(assert (= var79986
   (ite (= ARGNAME_weight_NAMEEND_DIM temp256_228)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_229 #x0000000000000001))
(assert (= var79986 temp256_229))
(assert (= temp256_230 #x0000000000000001))
(assert (= var80116 temp256_230))
(assert (= var4796905 var80116))
(assert (= temp256_231 #x0000000000000000))
(assert (= var4784306 temp256_231))
(assert (= temp256_232 #x0000000000000000))
(assert (= temp256_233
   (ite (bvslt var4784306 temp256_232)
        (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
        var4784306)))
(assert (= temp256_234 (select ARGNAME_input_NAMEEND_DIMSIZE temp256_233)))
(assert (= var4796924 temp256_234))
(assert (bvslt (ite (bvslt var4784306 temp256_232)
            (bvadd ARGNAME_input_NAMEEND_DIM var4784306)
            var4784306)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp256_235 #x0000000000000000))
(assert (= var4796925
   (ite (= var4796924 temp256_235) #x0000000000000001 #x0000000000000000)))
(assert (= temp256_236 #x0000000000000001))
(assert (= var4796925 temp256_236))
(assert (= temp256_237 #x0000000000000000))
(assert (= var4996927 temp256_237))
(assert (= var4996929 var4996927))
(assert (= var4996886 var4996929))
(assert (= var80129 var4996886))
(assert (= temp256_238 #x0000000000000002))
(assert (= var5125763 temp256_238))
(assert (= var5125765 (bvsub ARGNAME_weight_NAMEEND_DIM var5125763)))
(assert (= var5191308 var5125763))
(assert (= var5191309 var5125765))
(assert (= var5191322 (bvadd var5191309 var5191308)))
(assert (= var5191324
   (ite (bvsgt var5191322 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_239 #x0000000000000000))
(assert (= var5191324 temp256_239))
(assert (= var5191349 var5191308))
(assert (= var5191351 var5191309))
(assert (= var5312339 var5191351))
(assert (= var5714320 var80129))
(assert (= temp256_240 #x0000000000000000))
(assert (= var80889
   (ite (distinct ARGNAME_benchmark_NAMEEND temp256_240)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_241 #x0000000000000000))
(assert (= var80891
   (ite (distinct ARGNAME_deterministic_NAMEEND temp256_241)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp256_242 #x0000000000000001))
(assert (= var79986 temp256_242))
(assert (= temp256_243 #x0000000000000000))
(assert (= var7353108 temp256_243))
(assert (= var7353075 var7353108))
(assert (= var7221639 var7353075))
(assert (= var7221635 var7221639))
(assert (= var81597 var7221635))
(assert (= temp256_244 #x0000000000000000))
(assert (= var81597 temp256_244))
(model-add temp256_1 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var79868
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp256_2 () (_ BitVec 64) #x0000000000000003)
(model-add temp256_3 () (_ BitVec 64) #x0000000000000000)
(model-add var79869 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))






