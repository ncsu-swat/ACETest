(declare-fun temp800_1 () (_ BitVec 64))
(declare-fun var77203 () (_ BitVec 64))
(declare-fun var210653 () (_ BitVec 64))
(declare-fun var210913 () (_ BitVec 64))
(declare-fun temp800_2 () (_ BitVec 64))
(declare-fun var210940 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp800_3 () (_ BitVec 64))
(declare-fun temp800_4 () (_ BitVec 64))
(declare-fun var210941 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp800_5 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var210986 () (_ BitVec 64))
(declare-fun temp800_6 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp800_7 () (_ BitVec 64))
(declare-fun temp800_8 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_9 () (_ BitVec 64))
(declare-fun temp800_10 () (_ BitVec 64))
(declare-fun temp800_11 () (_ BitVec 64))
(declare-fun temp800_12 () (_ BitVec 64))
(declare-fun temp800_13 () (_ BitVec 64))
(declare-fun temp800_14 () (_ BitVec 64))
(declare-fun temp800_15 () (_ BitVec 64))
(declare-fun temp800_16 () (_ BitVec 64))
(declare-fun temp800_17 () (_ BitVec 64))
(declare-fun temp800_18 () (_ BitVec 64))
(declare-fun temp800_19 () (_ BitVec 64))
(declare-fun temp800_20 () (_ BitVec 64))
(declare-fun temp800_21 () (_ BitVec 64))
(declare-fun temp800_22 () (_ BitVec 64))
(declare-fun temp800_23 () (_ BitVec 64))
(declare-fun temp800_24 () (_ BitVec 64))
(declare-fun temp800_25 () (_ BitVec 64))
(declare-fun temp800_26 () (_ BitVec 64))
(declare-fun temp800_27 () (_ BitVec 64))
(declare-fun temp800_28 () (_ BitVec 64))
(declare-fun temp800_29 () (_ BitVec 64))
(declare-fun temp800_30 () (_ BitVec 64))
(declare-fun temp800_31 () (_ BitVec 64))
(declare-fun temp800_32 () (_ BitVec 64))
(declare-fun temp800_33 () (_ BitVec 64))
(declare-fun temp800_34 () (_ BitVec 64))
(declare-fun temp800_35 () (_ BitVec 64))
(declare-fun temp800_36 () (_ BitVec 64))
(declare-fun temp800_37 () (_ BitVec 64))
(declare-fun temp800_38 () (_ BitVec 64))
(declare-fun temp800_39 () (_ BitVec 64))
(declare-fun temp800_40 () (_ BitVec 64))
(declare-fun temp800_41 () (_ BitVec 64))
(declare-fun temp800_42 () (_ BitVec 64))
(declare-fun temp800_43 () (_ BitVec 64))
(declare-fun temp800_44 () (_ BitVec 64))
(declare-fun temp800_45 () (_ BitVec 64))
(declare-fun temp800_46 () (_ BitVec 64))
(declare-fun temp800_47 () (_ BitVec 64))
(declare-fun temp800_48 () (_ BitVec 64))
(declare-fun var1191714 () (_ BitVec 64))
(declare-fun temp800_49 () (_ BitVec 64))
(declare-fun temp800_50 () (_ BitVec 64))
(declare-fun temp800_51 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_52 () (_ BitVec 64))
(declare-fun temp800_53 () (_ BitVec 64))
(declare-fun temp800_54 () (_ BitVec 64))
(declare-fun temp800_55 () (_ BitVec 64))
(declare-fun temp800_56 () (_ BitVec 64))
(declare-fun temp800_57 () (_ BitVec 64))
(declare-fun temp800_58 () (_ BitVec 64))
(declare-fun temp800_59 () (_ BitVec 64))
(declare-fun temp800_60 () (_ BitVec 64))
(declare-fun temp800_61 () (_ BitVec 64))
(declare-fun temp800_62 () (_ BitVec 64))
(declare-fun temp800_63 () (_ BitVec 64))
(declare-fun temp800_64 () (_ BitVec 64))
(declare-fun temp800_65 () (_ BitVec 64))
(declare-fun temp800_66 () (_ BitVec 64))
(declare-fun temp800_67 () (_ BitVec 64))
(declare-fun temp800_68 () (_ BitVec 64))
(declare-fun temp800_69 () (_ BitVec 64))
(declare-fun temp800_70 () (_ BitVec 64))
(declare-fun temp800_71 () (_ BitVec 64))
(declare-fun temp800_72 () (_ BitVec 64))
(declare-fun temp800_73 () (_ BitVec 64))
(declare-fun temp800_74 () (_ BitVec 64))
(declare-fun temp800_75 () (_ BitVec 64))
(declare-fun temp800_76 () (_ BitVec 64))
(declare-fun temp800_77 () (_ BitVec 64))
(declare-fun temp800_78 () (_ BitVec 64))
(declare-fun temp800_79 () (_ BitVec 64))
(declare-fun temp800_80 () (_ BitVec 64))
(declare-fun temp800_81 () (_ BitVec 64))
(declare-fun temp800_82 () (_ BitVec 64))
(declare-fun temp800_83 () (_ BitVec 64))
(declare-fun temp800_84 () (_ BitVec 64))
(declare-fun temp800_85 () (_ BitVec 64))
(declare-fun temp800_86 () (_ BitVec 64))
(declare-fun temp800_87 () (_ BitVec 64))
(declare-fun temp800_88 () (_ BitVec 64))
(declare-fun temp800_89 () (_ BitVec 64))
(declare-fun temp800_90 () (_ BitVec 64))
(declare-fun temp800_91 () (_ BitVec 64))
(declare-fun var1191725 () (_ BitVec 64))
(declare-fun temp800_92 () (_ BitVec 64))
(declare-fun temp800_93 () (_ BitVec 64))
(declare-fun temp800_94 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_95 () (_ BitVec 64))
(declare-fun temp800_96 () (_ BitVec 64))
(declare-fun temp800_97 () (_ BitVec 64))
(declare-fun temp800_98 () (_ BitVec 64))
(declare-fun temp800_99 () (_ BitVec 64))
(declare-fun temp800_100 () (_ BitVec 64))
(declare-fun temp800_101 () (_ BitVec 64))
(declare-fun temp800_102 () (_ BitVec 64))
(declare-fun temp800_103 () (_ BitVec 64))
(declare-fun temp800_104 () (_ BitVec 64))
(declare-fun temp800_105 () (_ BitVec 64))
(declare-fun temp800_106 () (_ BitVec 64))
(declare-fun temp800_107 () (_ BitVec 64))
(declare-fun temp800_108 () (_ BitVec 64))
(declare-fun temp800_109 () (_ BitVec 64))
(declare-fun temp800_110 () (_ BitVec 64))
(declare-fun temp800_111 () (_ BitVec 64))
(declare-fun temp800_112 () (_ BitVec 64))
(declare-fun temp800_113 () (_ BitVec 64))
(declare-fun temp800_114 () (_ BitVec 64))
(declare-fun temp800_115 () (_ BitVec 64))
(declare-fun temp800_116 () (_ BitVec 64))
(declare-fun temp800_117 () (_ BitVec 64))
(declare-fun temp800_118 () (_ BitVec 64))
(declare-fun temp800_119 () (_ BitVec 64))
(declare-fun temp800_120 () (_ BitVec 64))
(declare-fun temp800_121 () (_ BitVec 64))
(declare-fun temp800_122 () (_ BitVec 64))
(declare-fun temp800_123 () (_ BitVec 64))
(declare-fun temp800_124 () (_ BitVec 64))
(declare-fun temp800_125 () (_ BitVec 64))
(declare-fun temp800_126 () (_ BitVec 64))
(declare-fun temp800_127 () (_ BitVec 64))
(declare-fun temp800_128 () (_ BitVec 64))
(declare-fun temp800_129 () (_ BitVec 64))
(declare-fun temp800_130 () (_ BitVec 64))
(declare-fun temp800_131 () (_ BitVec 64))
(declare-fun temp800_132 () (_ BitVec 64))
(declare-fun temp800_133 () (_ BitVec 64))
(declare-fun temp800_134 () (_ BitVec 64))
(declare-fun var1191735 () (_ BitVec 64))
(declare-fun temp800_135 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1191747 () (_ BitVec 64))
(declare-fun temp800_136 () (_ BitVec 64))
(declare-fun temp800_137 () (_ BitVec 64))
(declare-fun var1179826 () (_ BitVec 64))
(declare-fun temp800_138 () (_ BitVec 64))
(declare-fun temp800_139 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_140 () (_ BitVec 64))
(declare-fun temp800_141 () (_ BitVec 64))
(declare-fun temp800_142 () (_ BitVec 64))
(declare-fun temp800_143 () (_ BitVec 64))
(declare-fun temp800_144 () (_ BitVec 64))
(declare-fun temp800_145 () (_ BitVec 64))
(declare-fun temp800_146 () (_ BitVec 64))
(declare-fun temp800_147 () (_ BitVec 64))
(declare-fun temp800_148 () (_ BitVec 64))
(declare-fun temp800_149 () (_ BitVec 64))
(declare-fun temp800_150 () (_ BitVec 64))
(declare-fun temp800_151 () (_ BitVec 64))
(declare-fun temp800_152 () (_ BitVec 64))
(declare-fun temp800_153 () (_ BitVec 64))
(declare-fun temp800_154 () (_ BitVec 64))
(declare-fun temp800_155 () (_ BitVec 64))
(declare-fun temp800_157 () (_ BitVec 64))
(declare-fun temp800_158 () (_ BitVec 64))
(declare-fun temp800_156 () (_ BitVec 64))
(declare-fun var1191780 () (_ BitVec 64))
(declare-fun temp800_159 () (_ BitVec 64))
(declare-fun temp800_160 () (_ BitVec 64))
(declare-fun temp800_162 () (_ BitVec 64))
(declare-fun temp800_163 () (_ BitVec 64))
(declare-fun temp800_161 () (_ BitVec 64))
(declare-fun var1191802 () (_ BitVec 64))
(declare-fun temp800_164 () (_ BitVec 64))
(declare-fun var1191803 () (_ BitVec 64))
(declare-fun temp800_165 () (_ BitVec 64))
(declare-fun temp800_166 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1191823 () (_ BitVec 64))
(declare-fun temp800_167 () (_ BitVec 64))
(declare-fun temp800_168 () (_ BitVec 64))
(declare-fun var1180714 () (_ BitVec 64))
(declare-fun temp800_169 () (_ BitVec 64))
(declare-fun temp800_170 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp800_171 () (_ BitVec 64))
(declare-fun temp800_172 () (_ BitVec 64))
(declare-fun temp800_173 () (_ BitVec 64))
(declare-fun temp800_174 () (_ BitVec 64))
(declare-fun temp800_175 () (_ BitVec 64))
(declare-fun temp800_176 () (_ BitVec 64))
(declare-fun temp800_177 () (_ BitVec 64))
(declare-fun temp800_178 () (_ BitVec 64))
(declare-fun temp800_179 () (_ BitVec 64))
(declare-fun temp800_180 () (_ BitVec 64))
(declare-fun temp800_181 () (_ BitVec 64))
(declare-fun temp800_182 () (_ BitVec 64))
(declare-fun temp800_183 () (_ BitVec 64))
(declare-fun temp800_184 () (_ BitVec 64))
(declare-fun temp800_185 () (_ BitVec 64))
(declare-fun temp800_186 () (_ BitVec 64))
(declare-fun temp800_187 () (_ BitVec 64))
(declare-fun temp800_188 () (_ BitVec 64))
(declare-fun temp800_189 () (_ BitVec 64))
(declare-fun var1191831 () (_ BitVec 64))
(declare-fun temp800_190 () (_ BitVec 64))
(declare-fun temp800_192 () (_ BitVec 64))
(declare-fun temp800_193 () (_ BitVec 64))
(declare-fun temp800_191 () (_ BitVec 64))
(declare-fun var1191835 () (_ BitVec 64))
(declare-fun var1191836 () (_ BitVec 64))
(declare-fun temp800_194 () (_ BitVec 64))
(declare-fun temp800_195 () (_ BitVec 64))
(declare-fun temp800_197 () (_ BitVec 64))
(declare-fun temp800_198 () (_ BitVec 64))
(declare-fun temp800_196 () (_ BitVec 64))
(declare-fun temp800_199 () (_ BitVec 64))
(declare-fun var1586025 () (_ BitVec 64))
(declare-fun var1586034 () (_ BitVec 64))
(declare-fun var1717312 () (_ BitVec 64))
(declare-fun temp800_200 () (_ BitVec 64))
(declare-fun var1191993 () (_ BitVec 64))
(declare-fun temp800_201 () (_ BitVec 64))
(declare-fun var2700303 () (_ BitVec 64))
(declare-fun temp800_202 () (_ BitVec 64))
(declare-fun var2962447 () (_ BitVec 64))
(declare-fun temp800_203 () (_ BitVec 64))
(declare-fun var211058 () (_ BitVec 64))
(declare-fun temp800_204 () (_ BitVec 64))
(declare-fun temp800_205 () (_ BitVec 64))
(declare-fun var211188 () (_ BitVec 64))
(declare-fun var3879401 () (_ BitVec 64))
(declare-fun temp800_206 () (_ BitVec 64))
(declare-fun var3866802 () (_ BitVec 64))
(declare-fun temp800_207 () (_ BitVec 64))
(declare-fun temp800_208 () (_ BitVec 64))
(declare-fun temp800_209 () (_ BitVec 64))
(declare-fun var3879420 () (_ BitVec 64))
(declare-fun temp800_210 () (_ BitVec 64))
(declare-fun var3879421 () (_ BitVec 64))
(declare-fun temp800_211 () (_ BitVec 64))
(declare-fun temp800_212 () (_ BitVec 64))
(declare-fun var4079423 () (_ BitVec 64))
(declare-fun var4079425 () (_ BitVec 64))
(declare-fun var4079382 () (_ BitVec 64))
(declare-fun var211201 () (_ BitVec 64))
(declare-fun temp800_213 () (_ BitVec 64))
(declare-fun var4208259 () (_ BitVec 64))
(declare-fun var4208261 () (_ BitVec 64))
(declare-fun var4273804 () (_ BitVec 64))
(declare-fun var4273805 () (_ BitVec 64))
(declare-fun var4273818 () (_ BitVec 64))
(declare-fun var4273820 () (_ BitVec 64))
(declare-fun temp800_214 () (_ BitVec 64))
(declare-fun var4273845 () (_ BitVec 64))
(declare-fun var4273847 () (_ BitVec 64))
(declare-fun var4394835 () (_ BitVec 64))
(declare-fun var4993424 () (_ BitVec 64))
(declare-fun var211820 () (_ BitVec 64))
(declare-fun temp800_215 () (_ BitVec 64))
(declare-fun var211821 () (_ BitVec 64))
(declare-fun temp800_216 () (_ BitVec 64))
(assert (= temp800_1 #x0000000000000001))
(assert (= var77203 temp800_1))
(assert (= var210653 var77203))
(assert (= var210913 var210653))
(assert (= temp800_2 #xfffffffffffffffe))
(assert (= var210940 (bvadd ARGNAME_weight_NAMEEND_DIM temp800_2)))
(assert (= temp800_3 #x0000000000000003))
(assert (= var210941
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp800_3)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_4 #x0000000000000000))
(assert (= var210941 temp800_4))
(assert (= temp800_5 #x0000000000000001))
(assert (= var210986
   (ite (bvslt ARGNAME_groups_NAMEEND temp800_5)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_6 #x0000000000000000))
(assert (= var210986 temp800_6))
(assert (= ARGNAME_stride_NAMEEND_LEN var210940))
(assert (= ARGNAME_padding_NAMEEND_LEN var210940))
(assert (= ARGNAME_dilation_NAMEEND_LEN var210940))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var210940))
(assert (= temp800_7 #x0000000000000000))
(assert (= temp800_8 temp800_7))
(assert (= temp800_9 (select ARGNAME_padding_NAMEEND_VAL temp800_8)))
(assert (= temp800_10 #x0000000000000001))
(assert (= temp800_11 temp800_10))
(assert (= temp800_12 (select ARGNAME_padding_NAMEEND_VAL temp800_11)))
(assert (= temp800_13 #x0000000000000002))
(assert (= temp800_14 temp800_13))
(assert (= temp800_15 (select ARGNAME_padding_NAMEEND_VAL temp800_14)))
(assert (= temp800_16 #x0000000000000003))
(assert (= temp800_17 temp800_16))
(assert (= temp800_18 (select ARGNAME_padding_NAMEEND_VAL temp800_17)))
(assert (= temp800_19 #x0000000000000004))
(assert (= temp800_20 temp800_19))
(assert (= temp800_21 (select ARGNAME_padding_NAMEEND_VAL temp800_20)))
(assert (= temp800_22 #x0000000000000005))
(assert (= temp800_23 temp800_22))
(assert (= temp800_24 (select ARGNAME_padding_NAMEEND_VAL temp800_23)))
(assert (= temp800_25 #x0000000000000000))
(assert (= temp800_26 #x0000000000000000))
(assert (= temp800_27 temp800_26))
(assert (= temp800_28 (select ARGNAME_padding_NAMEEND_VAL temp800_27)))
(assert (= temp800_29 #x0000000000000000))
(assert (= temp800_30 #x0000000000000001))
(assert (= temp800_31 temp800_30))
(assert (= temp800_32 (select ARGNAME_padding_NAMEEND_VAL temp800_31)))
(assert (= temp800_33 #x0000000000000000))
(assert (= temp800_34 #x0000000000000002))
(assert (= temp800_35 temp800_34))
(assert (= temp800_36 (select ARGNAME_padding_NAMEEND_VAL temp800_35)))
(assert (= temp800_37 #x0000000000000000))
(assert (= temp800_38 #x0000000000000003))
(assert (= temp800_39 temp800_38))
(assert (= temp800_40 (select ARGNAME_padding_NAMEEND_VAL temp800_39)))
(assert (= temp800_41 #x0000000000000000))
(assert (= temp800_42 #x0000000000000004))
(assert (= temp800_43 temp800_42))
(assert (= temp800_44 (select ARGNAME_padding_NAMEEND_VAL temp800_43)))
(assert (= temp800_45 #x0000000000000000))
(assert (= temp800_46 #x0000000000000005))
(assert (= temp800_47 temp800_46))
(assert (= temp800_48 (select ARGNAME_padding_NAMEEND_VAL temp800_47)))
(assert (= var1191714
   (ite (and true
             (bvslt temp800_28 temp800_25)
             (bvslt temp800_32 temp800_29)
             (bvslt temp800_36 temp800_33)
             (bvslt temp800_40 temp800_37)
             (bvslt temp800_44 temp800_41)
             (bvslt temp800_48 temp800_45))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_49 #x0000000000000000))
(assert (= var1191714 temp800_49))
(assert (= temp800_50 #x0000000000000000))
(assert (= temp800_51 temp800_50))
(assert (= temp800_52 (select ARGNAME_output_padding_NAMEEND_VAL temp800_51)))
(assert (= temp800_53 #x0000000000000001))
(assert (= temp800_54 temp800_53))
(assert (= temp800_55 (select ARGNAME_output_padding_NAMEEND_VAL temp800_54)))
(assert (= temp800_56 #x0000000000000002))
(assert (= temp800_57 temp800_56))
(assert (= temp800_58 (select ARGNAME_output_padding_NAMEEND_VAL temp800_57)))
(assert (= temp800_59 #x0000000000000003))
(assert (= temp800_60 temp800_59))
(assert (= temp800_61 (select ARGNAME_output_padding_NAMEEND_VAL temp800_60)))
(assert (= temp800_62 #x0000000000000004))
(assert (= temp800_63 temp800_62))
(assert (= temp800_64 (select ARGNAME_output_padding_NAMEEND_VAL temp800_63)))
(assert (= temp800_65 #x0000000000000005))
(assert (= temp800_66 temp800_65))
(assert (= temp800_67 (select ARGNAME_output_padding_NAMEEND_VAL temp800_66)))
(assert (= temp800_68 #x0000000000000000))
(assert (= temp800_69 #x0000000000000000))
(assert (= temp800_70 temp800_69))
(assert (= temp800_71 (select ARGNAME_output_padding_NAMEEND_VAL temp800_70)))
(assert (= temp800_72 #x0000000000000000))
(assert (= temp800_73 #x0000000000000001))
(assert (= temp800_74 temp800_73))
(assert (= temp800_75 (select ARGNAME_output_padding_NAMEEND_VAL temp800_74)))
(assert (= temp800_76 #x0000000000000000))
(assert (= temp800_77 #x0000000000000002))
(assert (= temp800_78 temp800_77))
(assert (= temp800_79 (select ARGNAME_output_padding_NAMEEND_VAL temp800_78)))
(assert (= temp800_80 #x0000000000000000))
(assert (= temp800_81 #x0000000000000003))
(assert (= temp800_82 temp800_81))
(assert (= temp800_83 (select ARGNAME_output_padding_NAMEEND_VAL temp800_82)))
(assert (= temp800_84 #x0000000000000000))
(assert (= temp800_85 #x0000000000000004))
(assert (= temp800_86 temp800_85))
(assert (= temp800_87 (select ARGNAME_output_padding_NAMEEND_VAL temp800_86)))
(assert (= temp800_88 #x0000000000000000))
(assert (= temp800_89 #x0000000000000005))
(assert (= temp800_90 temp800_89))
(assert (= temp800_91 (select ARGNAME_output_padding_NAMEEND_VAL temp800_90)))
(assert (= var1191725
   (ite (and true
             (bvslt temp800_71 temp800_68)
             (bvslt temp800_75 temp800_72)
             (bvslt temp800_79 temp800_76)
             (bvslt temp800_83 temp800_80)
             (bvslt temp800_87 temp800_84)
             (bvslt temp800_91 temp800_88))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_92 #x0000000000000000))
(assert (= var1191725 temp800_92))
(assert (= temp800_93 #x0000000000000000))
(assert (= temp800_94 temp800_93))
(assert (= temp800_95 (select ARGNAME_stride_NAMEEND_VAL temp800_94)))
(assert (= temp800_96 #x0000000000000001))
(assert (= temp800_97 temp800_96))
(assert (= temp800_98 (select ARGNAME_stride_NAMEEND_VAL temp800_97)))
(assert (= temp800_99 #x0000000000000002))
(assert (= temp800_100 temp800_99))
(assert (= temp800_101 (select ARGNAME_stride_NAMEEND_VAL temp800_100)))
(assert (= temp800_102 #x0000000000000003))
(assert (= temp800_103 temp800_102))
(assert (= temp800_104 (select ARGNAME_stride_NAMEEND_VAL temp800_103)))
(assert (= temp800_105 #x0000000000000004))
(assert (= temp800_106 temp800_105))
(assert (= temp800_107 (select ARGNAME_stride_NAMEEND_VAL temp800_106)))
(assert (= temp800_108 #x0000000000000005))
(assert (= temp800_109 temp800_108))
(assert (= temp800_110 (select ARGNAME_stride_NAMEEND_VAL temp800_109)))
(assert (= temp800_111 #x0000000000000000))
(assert (= temp800_112 #x0000000000000000))
(assert (= temp800_113 temp800_112))
(assert (= temp800_114 (select ARGNAME_stride_NAMEEND_VAL temp800_113)))
(assert (= temp800_115 #x0000000000000000))
(assert (= temp800_116 #x0000000000000001))
(assert (= temp800_117 temp800_116))
(assert (= temp800_118 (select ARGNAME_stride_NAMEEND_VAL temp800_117)))
(assert (= temp800_119 #x0000000000000000))
(assert (= temp800_120 #x0000000000000002))
(assert (= temp800_121 temp800_120))
(assert (= temp800_122 (select ARGNAME_stride_NAMEEND_VAL temp800_121)))
(assert (= temp800_123 #x0000000000000000))
(assert (= temp800_124 #x0000000000000003))
(assert (= temp800_125 temp800_124))
(assert (= temp800_126 (select ARGNAME_stride_NAMEEND_VAL temp800_125)))
(assert (= temp800_127 #x0000000000000000))
(assert (= temp800_128 #x0000000000000004))
(assert (= temp800_129 temp800_128))
(assert (= temp800_130 (select ARGNAME_stride_NAMEEND_VAL temp800_129)))
(assert (= temp800_131 #x0000000000000000))
(assert (= temp800_132 #x0000000000000005))
(assert (= temp800_133 temp800_132))
(assert (= temp800_134 (select ARGNAME_stride_NAMEEND_VAL temp800_133)))
(assert (= var1191735
   (ite (and true
             (bvsle temp800_114 temp800_111)
             (bvsle temp800_118 temp800_115)
             (bvsle temp800_122 temp800_119)
             (bvsle temp800_126 temp800_123)
             (bvsle temp800_130 temp800_127)
             (bvsle temp800_134 temp800_131))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_135 #x0000000000000000))
(assert (= var1191735 temp800_135))
(assert (= var1191747
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_136 #x0000000000000001))
(assert (= var1191747 temp800_136))
(assert (= temp800_137 #x0000000000000000))
(assert (= var1179826 temp800_137))
(assert (= temp800_138 #x0000000000000000))
(assert (= temp800_139 temp800_138))
(assert (= temp800_140 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_139)))
(assert (= temp800_141 #x0000000000000001))
(assert (= temp800_142 temp800_141))
(assert (= temp800_143 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_142)))
(assert (= temp800_144 #x0000000000000002))
(assert (= temp800_145 temp800_144))
(assert (= temp800_146 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_145)))
(assert (= temp800_147 #x0000000000000003))
(assert (= temp800_148 temp800_147))
(assert (= temp800_149 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_148)))
(assert (= temp800_150 #x0000000000000004))
(assert (= temp800_151 temp800_150))
(assert (= temp800_152 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_151)))
(assert (= temp800_153 #x0000000000000005))
(assert (= temp800_154 temp800_153))
(assert (= temp800_155 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_154)))
(assert (= temp800_157 var1179826))
(assert (= temp800_158 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_157)))
(assert (= temp800_156 temp800_158))
(assert (= var1191780
   (ite (bvslt temp800_156 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_159 #x0000000000000000))
(assert (= var1191780 temp800_159))
(assert (= temp800_160 #x0000000000000000))
(assert (= var1179826 temp800_160))
(assert (= temp800_162 var1179826))
(assert (= temp800_163 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_162)))
(assert (= temp800_161 temp800_163))
(assert (= var1191802 (bvsmod temp800_161 ARGNAME_groups_NAMEEND)))
(assert (= temp800_164 #x0000000000000000))
(assert (= var1191803
   (ite (= var1191802 temp800_164) #x0000000000000001 #x0000000000000000)))
(assert (= temp800_165 #x0000000000000001))
(assert (= var1191803 temp800_165))
(assert (= temp800_166 #x0000000000000000))
(assert (= var1191823
   (ite (= ARGNAME_transposed_NAMEEND temp800_166)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_167 #x0000000000000001))
(assert (= var1191823 temp800_167))
(assert (= temp800_168 #x0000000000000001))
(assert (= var1180714 temp800_168))
(assert (= temp800_169 #x0000000000000000))
(assert (= temp800_170 temp800_169))
(assert (= temp800_171 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_170)))
(assert (= temp800_172 #x0000000000000001))
(assert (= temp800_173 temp800_172))
(assert (= temp800_174 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_173)))
(assert (= temp800_175 #x0000000000000002))
(assert (= temp800_176 temp800_175))
(assert (= temp800_177 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_176)))
(assert (= temp800_178 #x0000000000000003))
(assert (= temp800_179 temp800_178))
(assert (= temp800_180 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_179)))
(assert (= temp800_181 #x0000000000000004))
(assert (= temp800_182 temp800_181))
(assert (= temp800_183 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_182)))
(assert (= temp800_184 #x0000000000000005))
(assert (= temp800_185 temp800_184))
(assert (= temp800_186 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_185)))
(assert (= temp800_187 #x0000000000000000))
(assert (= temp800_188
   (ite (bvslt var1180714 temp800_187)
        (bvadd ARGNAME_input_NAMEEND_DIM var1180714)
        var1180714)))
(assert (= temp800_189 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_188)))
(assert (= var1191831 temp800_189))
(assert (bvslt (ite (bvslt var1180714 temp800_187)
            (bvadd ARGNAME_input_NAMEEND_DIM var1180714)
            var1180714)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp800_190 #x0000000000000001))
(assert (= var1180714 temp800_190))
(assert (= temp800_192 var1180714))
(assert (= temp800_193 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_192)))
(assert (= temp800_191 temp800_193))
(assert (= var1191835 (bvmul ARGNAME_groups_NAMEEND temp800_191)))
(assert (= var1191836
   (ite (= var1191831 var1191835) #x0000000000000001 #x0000000000000000)))
(assert (= temp800_194 #x0000000000000001))
(assert (= var1191836 temp800_194))
(assert (= temp800_195 #x0000000000000000))
(assert (= var1179826 temp800_195))
(assert (= temp800_197 var1179826))
(assert (= temp800_198 (select ARGNAME_weight_NAMEEND_DIMSIZE temp800_197)))
(assert (= temp800_196 temp800_198))
(assert (= temp800_199 #x0000000000000002))
(assert (= var1586025 temp800_199))
(assert (= var1586034 var1586025))
(assert (= var1717312 var1586034))
(assert (= temp800_200 #x0000000000000001))
(assert (= var1191993 temp800_200))
(assert (= temp800_201 #x0000000000000001))
(assert (= var2700303 temp800_201))
(assert (= temp800_202 #x0000000000000001))
(assert (= var2962447 temp800_202))
(assert (= temp800_203 #x0000000000000003))
(assert (= var211058
   (ite (= ARGNAME_weight_NAMEEND_DIM temp800_203)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_204 #x0000000000000001))
(assert (= var211058 temp800_204))
(assert (= temp800_205 #x0000000000000001))
(assert (= var211188 temp800_205))
(assert (= var3879401 var211188))
(assert (= temp800_206 #x0000000000000000))
(assert (= var3866802 temp800_206))
(assert (= temp800_207 #x0000000000000000))
(assert (= temp800_208
   (ite (bvslt var3866802 temp800_207)
        (bvadd ARGNAME_input_NAMEEND_DIM var3866802)
        var3866802)))
(assert (= temp800_209 (select ARGNAME_input_NAMEEND_DIMSIZE temp800_208)))
(assert (= var3879420 temp800_209))
(assert (bvslt (ite (bvslt var3866802 temp800_207)
            (bvadd ARGNAME_input_NAMEEND_DIM var3866802)
            var3866802)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp800_210 #x0000000000000000))
(assert (= var3879421
   (ite (= var3879420 temp800_210) #x0000000000000001 #x0000000000000000)))
(assert (= temp800_211 #x0000000000000001))
(assert (= var3879421 temp800_211))
(assert (= temp800_212 #x0000000000000000))
(assert (= var4079423 temp800_212))
(assert (= var4079425 var4079423))
(assert (= var4079382 var4079425))
(assert (= var211201 var4079382))
(assert (= temp800_213 #x0000000000000002))
(assert (= var4208259 temp800_213))
(assert (= var4208261 (bvsub ARGNAME_weight_NAMEEND_DIM var4208259)))
(assert (= var4273804 var4208259))
(assert (= var4273805 var4208261))
(assert (= var4273818 (bvadd var4273805 var4273804)))
(assert (= var4273820
   (ite (bvsgt var4273818 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp800_214 #x0000000000000000))
(assert (= var4273820 temp800_214))
(assert (= var4273845 var4273804))
(assert (= var4273847 var4273805))
(assert (= var4394835 var4273847))
(assert (= var4993424 var211201))
(assert (= var211820 var210913))
(assert (= temp800_215 #x0000000000000000))
(assert (= var211821
   (ite (distinct var211820 temp800_215) #x0000000000000001 #x0000000000000000)))
(assert (= temp800_216 #x0000000000000001))
(assert (= var211058 temp800_216))
(model-add temp800_1 () (_ BitVec 64) #x0000000000000001)
(model-add var77203 () (_ BitVec 64) #x0000000000000001)
(model-add var210653 () (_ BitVec 64) #x0000000000000001)
(model-add var210913 () (_ BitVec 64) #x0000000000000001)
(model-add temp800_2 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var210940
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp800_3 () (_ BitVec 64) #x0000000000000003)
(model-add temp800_4 () (_ BitVec 64) #x0000000000000000)
(model-add var210941 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))





