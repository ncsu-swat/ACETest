(declare-fun temp28_1 () (_ BitVec 64))
(declare-fun var77203 () (_ BitVec 64))
(declare-fun var210653 () (_ BitVec 64))
(declare-fun var210913 () (_ BitVec 64))
(declare-fun temp28_2 () (_ BitVec 64))
(declare-fun var210940 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp28_3 () (_ BitVec 64))
(declare-fun temp28_4 () (_ BitVec 64))
(declare-fun var210941 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp28_5 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var210986 () (_ BitVec 64))
(declare-fun temp28_6 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp28_7 () (_ BitVec 64))
(declare-fun temp28_8 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_9 () (_ BitVec 64))
(declare-fun temp28_10 () (_ BitVec 64))
(declare-fun temp28_11 () (_ BitVec 64))
(declare-fun temp28_12 () (_ BitVec 64))
(declare-fun temp28_13 () (_ BitVec 64))
(declare-fun temp28_14 () (_ BitVec 64))
(declare-fun temp28_15 () (_ BitVec 64))
(declare-fun temp28_16 () (_ BitVec 64))
(declare-fun temp28_17 () (_ BitVec 64))
(declare-fun temp28_18 () (_ BitVec 64))
(declare-fun temp28_19 () (_ BitVec 64))
(declare-fun temp28_20 () (_ BitVec 64))
(declare-fun temp28_21 () (_ BitVec 64))
(declare-fun temp28_22 () (_ BitVec 64))
(declare-fun temp28_23 () (_ BitVec 64))
(declare-fun temp28_24 () (_ BitVec 64))
(declare-fun temp28_25 () (_ BitVec 64))
(declare-fun temp28_26 () (_ BitVec 64))
(declare-fun temp28_27 () (_ BitVec 64))
(declare-fun temp28_28 () (_ BitVec 64))
(declare-fun temp28_29 () (_ BitVec 64))
(declare-fun temp28_30 () (_ BitVec 64))
(declare-fun temp28_31 () (_ BitVec 64))
(declare-fun temp28_32 () (_ BitVec 64))
(declare-fun temp28_33 () (_ BitVec 64))
(declare-fun temp28_34 () (_ BitVec 64))
(declare-fun temp28_35 () (_ BitVec 64))
(declare-fun temp28_36 () (_ BitVec 64))
(declare-fun temp28_37 () (_ BitVec 64))
(declare-fun temp28_38 () (_ BitVec 64))
(declare-fun temp28_39 () (_ BitVec 64))
(declare-fun temp28_40 () (_ BitVec 64))
(declare-fun temp28_41 () (_ BitVec 64))
(declare-fun temp28_42 () (_ BitVec 64))
(declare-fun temp28_43 () (_ BitVec 64))
(declare-fun temp28_44 () (_ BitVec 64))
(declare-fun temp28_45 () (_ BitVec 64))
(declare-fun temp28_46 () (_ BitVec 64))
(declare-fun temp28_47 () (_ BitVec 64))
(declare-fun temp28_48 () (_ BitVec 64))
(declare-fun var1191714 () (_ BitVec 64))
(declare-fun temp28_49 () (_ BitVec 64))
(declare-fun temp28_50 () (_ BitVec 64))
(declare-fun temp28_51 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_52 () (_ BitVec 64))
(declare-fun temp28_53 () (_ BitVec 64))
(declare-fun temp28_54 () (_ BitVec 64))
(declare-fun temp28_55 () (_ BitVec 64))
(declare-fun temp28_56 () (_ BitVec 64))
(declare-fun temp28_57 () (_ BitVec 64))
(declare-fun temp28_58 () (_ BitVec 64))
(declare-fun temp28_59 () (_ BitVec 64))
(declare-fun temp28_60 () (_ BitVec 64))
(declare-fun temp28_61 () (_ BitVec 64))
(declare-fun temp28_62 () (_ BitVec 64))
(declare-fun temp28_63 () (_ BitVec 64))
(declare-fun temp28_64 () (_ BitVec 64))
(declare-fun temp28_65 () (_ BitVec 64))
(declare-fun temp28_66 () (_ BitVec 64))
(declare-fun temp28_67 () (_ BitVec 64))
(declare-fun temp28_68 () (_ BitVec 64))
(declare-fun temp28_69 () (_ BitVec 64))
(declare-fun temp28_70 () (_ BitVec 64))
(declare-fun temp28_71 () (_ BitVec 64))
(declare-fun temp28_72 () (_ BitVec 64))
(declare-fun temp28_73 () (_ BitVec 64))
(declare-fun temp28_74 () (_ BitVec 64))
(declare-fun temp28_75 () (_ BitVec 64))
(declare-fun temp28_76 () (_ BitVec 64))
(declare-fun temp28_77 () (_ BitVec 64))
(declare-fun temp28_78 () (_ BitVec 64))
(declare-fun temp28_79 () (_ BitVec 64))
(declare-fun temp28_80 () (_ BitVec 64))
(declare-fun temp28_81 () (_ BitVec 64))
(declare-fun temp28_82 () (_ BitVec 64))
(declare-fun temp28_83 () (_ BitVec 64))
(declare-fun temp28_84 () (_ BitVec 64))
(declare-fun temp28_85 () (_ BitVec 64))
(declare-fun temp28_86 () (_ BitVec 64))
(declare-fun temp28_87 () (_ BitVec 64))
(declare-fun temp28_88 () (_ BitVec 64))
(declare-fun temp28_89 () (_ BitVec 64))
(declare-fun temp28_90 () (_ BitVec 64))
(declare-fun temp28_91 () (_ BitVec 64))
(declare-fun var1191725 () (_ BitVec 64))
(declare-fun temp28_92 () (_ BitVec 64))
(declare-fun temp28_93 () (_ BitVec 64))
(declare-fun temp28_94 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_95 () (_ BitVec 64))
(declare-fun temp28_96 () (_ BitVec 64))
(declare-fun temp28_97 () (_ BitVec 64))
(declare-fun temp28_98 () (_ BitVec 64))
(declare-fun temp28_99 () (_ BitVec 64))
(declare-fun temp28_100 () (_ BitVec 64))
(declare-fun temp28_101 () (_ BitVec 64))
(declare-fun temp28_102 () (_ BitVec 64))
(declare-fun temp28_103 () (_ BitVec 64))
(declare-fun temp28_104 () (_ BitVec 64))
(declare-fun temp28_105 () (_ BitVec 64))
(declare-fun temp28_106 () (_ BitVec 64))
(declare-fun temp28_107 () (_ BitVec 64))
(declare-fun temp28_108 () (_ BitVec 64))
(declare-fun temp28_109 () (_ BitVec 64))
(declare-fun temp28_110 () (_ BitVec 64))
(declare-fun temp28_111 () (_ BitVec 64))
(declare-fun temp28_112 () (_ BitVec 64))
(declare-fun temp28_113 () (_ BitVec 64))
(declare-fun temp28_114 () (_ BitVec 64))
(declare-fun temp28_115 () (_ BitVec 64))
(declare-fun temp28_116 () (_ BitVec 64))
(declare-fun temp28_117 () (_ BitVec 64))
(declare-fun temp28_118 () (_ BitVec 64))
(declare-fun temp28_119 () (_ BitVec 64))
(declare-fun temp28_120 () (_ BitVec 64))
(declare-fun temp28_121 () (_ BitVec 64))
(declare-fun temp28_122 () (_ BitVec 64))
(declare-fun temp28_123 () (_ BitVec 64))
(declare-fun temp28_124 () (_ BitVec 64))
(declare-fun temp28_125 () (_ BitVec 64))
(declare-fun temp28_126 () (_ BitVec 64))
(declare-fun temp28_127 () (_ BitVec 64))
(declare-fun temp28_128 () (_ BitVec 64))
(declare-fun temp28_129 () (_ BitVec 64))
(declare-fun temp28_130 () (_ BitVec 64))
(declare-fun temp28_131 () (_ BitVec 64))
(declare-fun temp28_132 () (_ BitVec 64))
(declare-fun temp28_133 () (_ BitVec 64))
(declare-fun temp28_134 () (_ BitVec 64))
(declare-fun var1191735 () (_ BitVec 64))
(declare-fun temp28_135 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1191747 () (_ BitVec 64))
(declare-fun temp28_136 () (_ BitVec 64))
(declare-fun temp28_137 () (_ BitVec 64))
(declare-fun var1179826 () (_ BitVec 64))
(declare-fun temp28_138 () (_ BitVec 64))
(declare-fun temp28_139 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_140 () (_ BitVec 64))
(declare-fun temp28_141 () (_ BitVec 64))
(declare-fun temp28_142 () (_ BitVec 64))
(declare-fun temp28_143 () (_ BitVec 64))
(declare-fun temp28_144 () (_ BitVec 64))
(declare-fun temp28_145 () (_ BitVec 64))
(declare-fun temp28_146 () (_ BitVec 64))
(declare-fun temp28_147 () (_ BitVec 64))
(declare-fun temp28_148 () (_ BitVec 64))
(declare-fun temp28_149 () (_ BitVec 64))
(declare-fun temp28_150 () (_ BitVec 64))
(declare-fun temp28_151 () (_ BitVec 64))
(declare-fun temp28_152 () (_ BitVec 64))
(declare-fun temp28_153 () (_ BitVec 64))
(declare-fun temp28_154 () (_ BitVec 64))
(declare-fun temp28_155 () (_ BitVec 64))
(declare-fun temp28_157 () (_ BitVec 64))
(declare-fun temp28_158 () (_ BitVec 64))
(declare-fun temp28_156 () (_ BitVec 64))
(declare-fun var1191780 () (_ BitVec 64))
(declare-fun temp28_159 () (_ BitVec 64))
(declare-fun temp28_160 () (_ BitVec 64))
(declare-fun temp28_162 () (_ BitVec 64))
(declare-fun temp28_163 () (_ BitVec 64))
(declare-fun temp28_161 () (_ BitVec 64))
(declare-fun var1191802 () (_ BitVec 64))
(declare-fun temp28_164 () (_ BitVec 64))
(declare-fun var1191803 () (_ BitVec 64))
(declare-fun temp28_165 () (_ BitVec 64))
(declare-fun temp28_166 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1191823 () (_ BitVec 64))
(declare-fun temp28_167 () (_ BitVec 64))
(declare-fun temp28_168 () (_ BitVec 64))
(declare-fun var1180714 () (_ BitVec 64))
(declare-fun temp28_169 () (_ BitVec 64))
(declare-fun temp28_170 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp28_171 () (_ BitVec 64))
(declare-fun temp28_172 () (_ BitVec 64))
(declare-fun temp28_173 () (_ BitVec 64))
(declare-fun temp28_174 () (_ BitVec 64))
(declare-fun temp28_175 () (_ BitVec 64))
(declare-fun temp28_176 () (_ BitVec 64))
(declare-fun temp28_177 () (_ BitVec 64))
(declare-fun temp28_178 () (_ BitVec 64))
(declare-fun temp28_179 () (_ BitVec 64))
(declare-fun temp28_180 () (_ BitVec 64))
(declare-fun temp28_181 () (_ BitVec 64))
(declare-fun temp28_182 () (_ BitVec 64))
(declare-fun temp28_183 () (_ BitVec 64))
(declare-fun temp28_184 () (_ BitVec 64))
(declare-fun temp28_185 () (_ BitVec 64))
(declare-fun temp28_186 () (_ BitVec 64))
(declare-fun temp28_187 () (_ BitVec 64))
(declare-fun temp28_188 () (_ BitVec 64))
(declare-fun temp28_189 () (_ BitVec 64))
(declare-fun var1191831 () (_ BitVec 64))
(declare-fun temp28_190 () (_ BitVec 64))
(declare-fun temp28_192 () (_ BitVec 64))
(declare-fun temp28_193 () (_ BitVec 64))
(declare-fun temp28_191 () (_ BitVec 64))
(declare-fun var1191835 () (_ BitVec 64))
(declare-fun var1191836 () (_ BitVec 64))
(declare-fun temp28_194 () (_ BitVec 64))
(declare-fun temp28_195 () (_ BitVec 64))
(declare-fun temp28_197 () (_ BitVec 64))
(declare-fun temp28_198 () (_ BitVec 64))
(declare-fun temp28_196 () (_ BitVec 64))
(declare-fun temp28_199 () (_ BitVec 64))
(declare-fun var1586025 () (_ BitVec 64))
(declare-fun var1586034 () (_ BitVec 64))
(declare-fun var1717312 () (_ BitVec 64))
(declare-fun temp28_200 () (_ BitVec 64))
(declare-fun var1191993 () (_ BitVec 64))
(declare-fun temp28_201 () (_ BitVec 64))
(declare-fun var2700303 () (_ BitVec 64))
(declare-fun temp28_202 () (_ BitVec 64))
(declare-fun var2962447 () (_ BitVec 64))
(declare-fun temp28_203 () (_ BitVec 64))
(declare-fun var211058 () (_ BitVec 64))
(declare-fun temp28_204 () (_ BitVec 64))
(declare-fun temp28_205 () (_ BitVec 64))
(declare-fun var211188 () (_ BitVec 64))
(declare-fun var3879401 () (_ BitVec 64))
(declare-fun temp28_206 () (_ BitVec 64))
(declare-fun var3866802 () (_ BitVec 64))
(declare-fun temp28_207 () (_ BitVec 64))
(declare-fun temp28_208 () (_ BitVec 64))
(declare-fun temp28_209 () (_ BitVec 64))
(declare-fun var3879420 () (_ BitVec 64))
(declare-fun temp28_210 () (_ BitVec 64))
(declare-fun var3879421 () (_ BitVec 64))
(declare-fun temp28_211 () (_ BitVec 64))
(declare-fun temp28_212 () (_ BitVec 64))
(declare-fun var4079423 () (_ BitVec 64))
(declare-fun var4079425 () (_ BitVec 64))
(declare-fun var4079382 () (_ BitVec 64))
(declare-fun var211201 () (_ BitVec 64))
(declare-fun temp28_213 () (_ BitVec 64))
(declare-fun var4208259 () (_ BitVec 64))
(declare-fun var4208261 () (_ BitVec 64))
(declare-fun var4273804 () (_ BitVec 64))
(declare-fun var4273805 () (_ BitVec 64))
(declare-fun var4273818 () (_ BitVec 64))
(declare-fun var4273820 () (_ BitVec 64))
(declare-fun temp28_214 () (_ BitVec 64))
(declare-fun var4273845 () (_ BitVec 64))
(declare-fun var4273847 () (_ BitVec 64))
(declare-fun var4394835 () (_ BitVec 64))
(declare-fun var4993424 () (_ BitVec 64))
(declare-fun var211388 () (_ BitVec 64))
(declare-fun temp28_215 () (_ BitVec 64))
(declare-fun var211389 () (_ BitVec 64))
(declare-fun var5914445 () (_ BitVec 64))
(declare-fun temp28_216 () (_ BitVec 64))
(declare-fun temp28_217 () (_ BitVec 64))
(declare-fun var6435604 () (_ BitVec 64))
(declare-fun var6435571 () (_ BitVec 64))
(declare-fun var6304135 () (_ BitVec 64))
(declare-fun var6304131 () (_ BitVec 64))
(declare-fun var212669 () (_ BitVec 64))
(declare-fun temp28_218 () (_ BitVec 64))
(assert (= temp28_1 #x0000000000000001))
(assert (= var77203 temp28_1))
(assert (= var210653 var77203))
(assert (= var210913 var210653))
(assert (= temp28_2 #xfffffffffffffffe))
(assert (= var210940 (bvadd ARGNAME_weight_NAMEEND_DIM temp28_2)))
(assert (= temp28_3 #x0000000000000003))
(assert (= var210941
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp28_3)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_4 #x0000000000000000))
(assert (= var210941 temp28_4))
(assert (= temp28_5 #x0000000000000001))
(assert (= var210986
   (ite (bvslt ARGNAME_groups_NAMEEND temp28_5)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_6 #x0000000000000000))
(assert (= var210986 temp28_6))
(assert (= ARGNAME_stride_NAMEEND_LEN var210940))
(assert (= ARGNAME_padding_NAMEEND_LEN var210940))
(assert (= ARGNAME_dilation_NAMEEND_LEN var210940))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var210940))
(assert (= temp28_7 #x0000000000000000))
(assert (= temp28_8 temp28_7))
(assert (= temp28_9 (select ARGNAME_padding_NAMEEND_VAL temp28_8)))
(assert (= temp28_10 #x0000000000000001))
(assert (= temp28_11 temp28_10))
(assert (= temp28_12 (select ARGNAME_padding_NAMEEND_VAL temp28_11)))
(assert (= temp28_13 #x0000000000000002))
(assert (= temp28_14 temp28_13))
(assert (= temp28_15 (select ARGNAME_padding_NAMEEND_VAL temp28_14)))
(assert (= temp28_16 #x0000000000000003))
(assert (= temp28_17 temp28_16))
(assert (= temp28_18 (select ARGNAME_padding_NAMEEND_VAL temp28_17)))
(assert (= temp28_19 #x0000000000000004))
(assert (= temp28_20 temp28_19))
(assert (= temp28_21 (select ARGNAME_padding_NAMEEND_VAL temp28_20)))
(assert (= temp28_22 #x0000000000000005))
(assert (= temp28_23 temp28_22))
(assert (= temp28_24 (select ARGNAME_padding_NAMEEND_VAL temp28_23)))
(assert (= temp28_25 #x0000000000000000))
(assert (= temp28_26 #x0000000000000000))
(assert (= temp28_27 temp28_26))
(assert (= temp28_28 (select ARGNAME_padding_NAMEEND_VAL temp28_27)))
(assert (= temp28_29 #x0000000000000000))
(assert (= temp28_30 #x0000000000000001))
(assert (= temp28_31 temp28_30))
(assert (= temp28_32 (select ARGNAME_padding_NAMEEND_VAL temp28_31)))
(assert (= temp28_33 #x0000000000000000))
(assert (= temp28_34 #x0000000000000002))
(assert (= temp28_35 temp28_34))
(assert (= temp28_36 (select ARGNAME_padding_NAMEEND_VAL temp28_35)))
(assert (= temp28_37 #x0000000000000000))
(assert (= temp28_38 #x0000000000000003))
(assert (= temp28_39 temp28_38))
(assert (= temp28_40 (select ARGNAME_padding_NAMEEND_VAL temp28_39)))
(assert (= temp28_41 #x0000000000000000))
(assert (= temp28_42 #x0000000000000004))
(assert (= temp28_43 temp28_42))
(assert (= temp28_44 (select ARGNAME_padding_NAMEEND_VAL temp28_43)))
(assert (= temp28_45 #x0000000000000000))
(assert (= temp28_46 #x0000000000000005))
(assert (= temp28_47 temp28_46))
(assert (= temp28_48 (select ARGNAME_padding_NAMEEND_VAL temp28_47)))
(assert (= var1191714
   (ite (and true
             (bvslt temp28_28 temp28_25)
             (bvslt temp28_32 temp28_29)
             (bvslt temp28_36 temp28_33)
             (bvslt temp28_40 temp28_37)
             (bvslt temp28_44 temp28_41)
             (bvslt temp28_48 temp28_45))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_49 #x0000000000000000))
(assert (= var1191714 temp28_49))
(assert (= temp28_50 #x0000000000000000))
(assert (= temp28_51 temp28_50))
(assert (= temp28_52 (select ARGNAME_output_padding_NAMEEND_VAL temp28_51)))
(assert (= temp28_53 #x0000000000000001))
(assert (= temp28_54 temp28_53))
(assert (= temp28_55 (select ARGNAME_output_padding_NAMEEND_VAL temp28_54)))
(assert (= temp28_56 #x0000000000000002))
(assert (= temp28_57 temp28_56))
(assert (= temp28_58 (select ARGNAME_output_padding_NAMEEND_VAL temp28_57)))
(assert (= temp28_59 #x0000000000000003))
(assert (= temp28_60 temp28_59))
(assert (= temp28_61 (select ARGNAME_output_padding_NAMEEND_VAL temp28_60)))
(assert (= temp28_62 #x0000000000000004))
(assert (= temp28_63 temp28_62))
(assert (= temp28_64 (select ARGNAME_output_padding_NAMEEND_VAL temp28_63)))
(assert (= temp28_65 #x0000000000000005))
(assert (= temp28_66 temp28_65))
(assert (= temp28_67 (select ARGNAME_output_padding_NAMEEND_VAL temp28_66)))
(assert (= temp28_68 #x0000000000000000))
(assert (= temp28_69 #x0000000000000000))
(assert (= temp28_70 temp28_69))
(assert (= temp28_71 (select ARGNAME_output_padding_NAMEEND_VAL temp28_70)))
(assert (= temp28_72 #x0000000000000000))
(assert (= temp28_73 #x0000000000000001))
(assert (= temp28_74 temp28_73))
(assert (= temp28_75 (select ARGNAME_output_padding_NAMEEND_VAL temp28_74)))
(assert (= temp28_76 #x0000000000000000))
(assert (= temp28_77 #x0000000000000002))
(assert (= temp28_78 temp28_77))
(assert (= temp28_79 (select ARGNAME_output_padding_NAMEEND_VAL temp28_78)))
(assert (= temp28_80 #x0000000000000000))
(assert (= temp28_81 #x0000000000000003))
(assert (= temp28_82 temp28_81))
(assert (= temp28_83 (select ARGNAME_output_padding_NAMEEND_VAL temp28_82)))
(assert (= temp28_84 #x0000000000000000))
(assert (= temp28_85 #x0000000000000004))
(assert (= temp28_86 temp28_85))
(assert (= temp28_87 (select ARGNAME_output_padding_NAMEEND_VAL temp28_86)))
(assert (= temp28_88 #x0000000000000000))
(assert (= temp28_89 #x0000000000000005))
(assert (= temp28_90 temp28_89))
(assert (= temp28_91 (select ARGNAME_output_padding_NAMEEND_VAL temp28_90)))
(assert (= var1191725
   (ite (and true
             (bvslt temp28_71 temp28_68)
             (bvslt temp28_75 temp28_72)
             (bvslt temp28_79 temp28_76)
             (bvslt temp28_83 temp28_80)
             (bvslt temp28_87 temp28_84)
             (bvslt temp28_91 temp28_88))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_92 #x0000000000000000))
(assert (= var1191725 temp28_92))
(assert (= temp28_93 #x0000000000000000))
(assert (= temp28_94 temp28_93))
(assert (= temp28_95 (select ARGNAME_stride_NAMEEND_VAL temp28_94)))
(assert (= temp28_96 #x0000000000000001))
(assert (= temp28_97 temp28_96))
(assert (= temp28_98 (select ARGNAME_stride_NAMEEND_VAL temp28_97)))
(assert (= temp28_99 #x0000000000000002))
(assert (= temp28_100 temp28_99))
(assert (= temp28_101 (select ARGNAME_stride_NAMEEND_VAL temp28_100)))
(assert (= temp28_102 #x0000000000000003))
(assert (= temp28_103 temp28_102))
(assert (= temp28_104 (select ARGNAME_stride_NAMEEND_VAL temp28_103)))
(assert (= temp28_105 #x0000000000000004))
(assert (= temp28_106 temp28_105))
(assert (= temp28_107 (select ARGNAME_stride_NAMEEND_VAL temp28_106)))
(assert (= temp28_108 #x0000000000000005))
(assert (= temp28_109 temp28_108))
(assert (= temp28_110 (select ARGNAME_stride_NAMEEND_VAL temp28_109)))
(assert (= temp28_111 #x0000000000000000))
(assert (= temp28_112 #x0000000000000000))
(assert (= temp28_113 temp28_112))
(assert (= temp28_114 (select ARGNAME_stride_NAMEEND_VAL temp28_113)))
(assert (= temp28_115 #x0000000000000000))
(assert (= temp28_116 #x0000000000000001))
(assert (= temp28_117 temp28_116))
(assert (= temp28_118 (select ARGNAME_stride_NAMEEND_VAL temp28_117)))
(assert (= temp28_119 #x0000000000000000))
(assert (= temp28_120 #x0000000000000002))
(assert (= temp28_121 temp28_120))
(assert (= temp28_122 (select ARGNAME_stride_NAMEEND_VAL temp28_121)))
(assert (= temp28_123 #x0000000000000000))
(assert (= temp28_124 #x0000000000000003))
(assert (= temp28_125 temp28_124))
(assert (= temp28_126 (select ARGNAME_stride_NAMEEND_VAL temp28_125)))
(assert (= temp28_127 #x0000000000000000))
(assert (= temp28_128 #x0000000000000004))
(assert (= temp28_129 temp28_128))
(assert (= temp28_130 (select ARGNAME_stride_NAMEEND_VAL temp28_129)))
(assert (= temp28_131 #x0000000000000000))
(assert (= temp28_132 #x0000000000000005))
(assert (= temp28_133 temp28_132))
(assert (= temp28_134 (select ARGNAME_stride_NAMEEND_VAL temp28_133)))
(assert (= var1191735
   (ite (and true
             (bvsle temp28_114 temp28_111)
             (bvsle temp28_118 temp28_115)
             (bvsle temp28_122 temp28_119)
             (bvsle temp28_126 temp28_123)
             (bvsle temp28_130 temp28_127)
             (bvsle temp28_134 temp28_131))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_135 #x0000000000000000))
(assert (= var1191735 temp28_135))
(assert (= var1191747
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_136 #x0000000000000001))
(assert (= var1191747 temp28_136))
(assert (= temp28_137 #x0000000000000000))
(assert (= var1179826 temp28_137))
(assert (= temp28_138 #x0000000000000000))
(assert (= temp28_139 temp28_138))
(assert (= temp28_140 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_139)))
(assert (= temp28_141 #x0000000000000001))
(assert (= temp28_142 temp28_141))
(assert (= temp28_143 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_142)))
(assert (= temp28_144 #x0000000000000002))
(assert (= temp28_145 temp28_144))
(assert (= temp28_146 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_145)))
(assert (= temp28_147 #x0000000000000003))
(assert (= temp28_148 temp28_147))
(assert (= temp28_149 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_148)))
(assert (= temp28_150 #x0000000000000004))
(assert (= temp28_151 temp28_150))
(assert (= temp28_152 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_151)))
(assert (= temp28_153 #x0000000000000005))
(assert (= temp28_154 temp28_153))
(assert (= temp28_155 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_154)))
(assert (= temp28_157 var1179826))
(assert (= temp28_158 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_157)))
(assert (= temp28_156 temp28_158))
(assert (= var1191780
   (ite (bvslt temp28_156 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_159 #x0000000000000000))
(assert (= var1191780 temp28_159))
(assert (= temp28_160 #x0000000000000000))
(assert (= var1179826 temp28_160))
(assert (= temp28_162 var1179826))
(assert (= temp28_163 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_162)))
(assert (= temp28_161 temp28_163))
(assert (= var1191802 (bvsmod temp28_161 ARGNAME_groups_NAMEEND)))
(assert (= temp28_164 #x0000000000000000))
(assert (= var1191803
   (ite (= var1191802 temp28_164) #x0000000000000001 #x0000000000000000)))
(assert (= temp28_165 #x0000000000000001))
(assert (= var1191803 temp28_165))
(assert (= temp28_166 #x0000000000000000))
(assert (= var1191823
   (ite (= ARGNAME_transposed_NAMEEND temp28_166)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_167 #x0000000000000001))
(assert (= var1191823 temp28_167))
(assert (= temp28_168 #x0000000000000001))
(assert (= var1180714 temp28_168))
(assert (= temp28_169 #x0000000000000000))
(assert (= temp28_170 temp28_169))
(assert (= temp28_171 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_170)))
(assert (= temp28_172 #x0000000000000001))
(assert (= temp28_173 temp28_172))
(assert (= temp28_174 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_173)))
(assert (= temp28_175 #x0000000000000002))
(assert (= temp28_176 temp28_175))
(assert (= temp28_177 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_176)))
(assert (= temp28_178 #x0000000000000003))
(assert (= temp28_179 temp28_178))
(assert (= temp28_180 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_179)))
(assert (= temp28_181 #x0000000000000004))
(assert (= temp28_182 temp28_181))
(assert (= temp28_183 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_182)))
(assert (= temp28_184 #x0000000000000005))
(assert (= temp28_185 temp28_184))
(assert (= temp28_186 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_185)))
(assert (= temp28_187 #x0000000000000000))
(assert (= temp28_188
   (ite (bvslt var1180714 temp28_187)
        (bvadd ARGNAME_input_NAMEEND_DIM var1180714)
        var1180714)))
(assert (= temp28_189 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_188)))
(assert (= var1191831 temp28_189))
(assert (bvslt (ite (bvslt var1180714 temp28_187)
            (bvadd ARGNAME_input_NAMEEND_DIM var1180714)
            var1180714)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp28_190 #x0000000000000001))
(assert (= var1180714 temp28_190))
(assert (= temp28_192 var1180714))
(assert (= temp28_193 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_192)))
(assert (= temp28_191 temp28_193))
(assert (= var1191835 (bvmul ARGNAME_groups_NAMEEND temp28_191)))
(assert (= var1191836
   (ite (= var1191831 var1191835) #x0000000000000001 #x0000000000000000)))
(assert (= temp28_194 #x0000000000000001))
(assert (= var1191836 temp28_194))
(assert (= temp28_195 #x0000000000000000))
(assert (= var1179826 temp28_195))
(assert (= temp28_197 var1179826))
(assert (= temp28_198 (select ARGNAME_weight_NAMEEND_DIMSIZE temp28_197)))
(assert (= temp28_196 temp28_198))
(assert (= temp28_199 #x0000000000000002))
(assert (= var1586025 temp28_199))
(assert (= var1586034 var1586025))
(assert (= var1717312 var1586034))
(assert (= temp28_200 #x0000000000000001))
(assert (= var1191993 temp28_200))
(assert (= temp28_201 #x0000000000000001))
(assert (= var2700303 temp28_201))
(assert (= temp28_202 #x0000000000000001))
(assert (= var2962447 temp28_202))
(assert (= temp28_203 #x0000000000000003))
(assert (= var211058
   (ite (= ARGNAME_weight_NAMEEND_DIM temp28_203)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_204 #x0000000000000001))
(assert (= var211058 temp28_204))
(assert (= temp28_205 #x0000000000000001))
(assert (= var211188 temp28_205))
(assert (= var3879401 var211188))
(assert (= temp28_206 #x0000000000000000))
(assert (= var3866802 temp28_206))
(assert (= temp28_207 #x0000000000000000))
(assert (= temp28_208
   (ite (bvslt var3866802 temp28_207)
        (bvadd ARGNAME_input_NAMEEND_DIM var3866802)
        var3866802)))
(assert (= temp28_209 (select ARGNAME_input_NAMEEND_DIMSIZE temp28_208)))
(assert (= var3879420 temp28_209))
(assert (bvslt (ite (bvslt var3866802 temp28_207)
            (bvadd ARGNAME_input_NAMEEND_DIM var3866802)
            var3866802)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp28_210 #x0000000000000000))
(assert (= var3879421
   (ite (= var3879420 temp28_210) #x0000000000000001 #x0000000000000000)))
(assert (= temp28_211 #x0000000000000001))
(assert (= var3879421 temp28_211))
(assert (= temp28_212 #x0000000000000000))
(assert (= var4079423 temp28_212))
(assert (= var4079425 var4079423))
(assert (= var4079382 var4079425))
(assert (= var211201 var4079382))
(assert (= temp28_213 #x0000000000000002))
(assert (= var4208259 temp28_213))
(assert (= var4208261 (bvsub ARGNAME_weight_NAMEEND_DIM var4208259)))
(assert (= var4273804 var4208259))
(assert (= var4273805 var4208261))
(assert (= var4273818 (bvadd var4273805 var4273804)))
(assert (= var4273820
   (ite (bvsgt var4273818 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp28_214 #x0000000000000000))
(assert (= var4273820 temp28_214))
(assert (= var4273845 var4273804))
(assert (= var4273847 var4273805))
(assert (= var4394835 var4273847))
(assert (= var4993424 var211201))
(assert (= var211388 var210913))
(assert (= temp28_215 #x0000000000000000))
(assert (= var211389
   (ite (distinct var211388 temp28_215) #x0000000000000001 #x0000000000000000)))
(assert (= var5914445 var211389))
(assert (= temp28_216 #x0000000000000001))
(assert (= var211058 temp28_216))
(assert (= temp28_217 #x0000000000000000))
(assert (= var6435604 temp28_217))
(assert (= var6435571 var6435604))
(assert (= var6304135 var6435571))
(assert (= var6304131 var6304135))
(assert (= var212669 var6304131))
(assert (= temp28_218 #x0000000000000000))
(assert (= var212669 temp28_218))
(model-add temp28_1 () (_ BitVec 64) #x0000000000000001)
(model-add var77203 () (_ BitVec 64) #x0000000000000001)
(model-add var210653 () (_ BitVec 64) #x0000000000000001)
(model-add var210913 () (_ BitVec 64) #x0000000000000001)
(model-add temp28_2 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var210940
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp28_3 () (_ BitVec 64) #x0000000000000003)
(model-add temp28_4 () (_ BitVec 64) #x0000000000000000)
(model-add var210941 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))





