(declare-fun temp642_1 () (_ BitVec 64))
(declare-fun var77203 () (_ BitVec 64))
(declare-fun var210653 () (_ BitVec 64))
(declare-fun var210913 () (_ BitVec 64))
(declare-fun temp642_2 () (_ BitVec 64))
(declare-fun var210940 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp642_3 () (_ BitVec 64))
(declare-fun temp642_4 () (_ BitVec 64))
(declare-fun var210941 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp642_5 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var210986 () (_ BitVec 64))
(declare-fun temp642_6 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp642_7 () (_ BitVec 64))
(declare-fun temp642_8 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp642_9 () (_ BitVec 64))
(declare-fun temp642_10 () (_ BitVec 64))
(declare-fun temp642_11 () (_ BitVec 64))
(declare-fun temp642_12 () (_ BitVec 64))
(declare-fun temp642_13 () (_ BitVec 64))
(declare-fun temp642_14 () (_ BitVec 64))
(declare-fun temp642_15 () (_ BitVec 64))
(declare-fun temp642_16 () (_ BitVec 64))
(declare-fun temp642_17 () (_ BitVec 64))
(declare-fun temp642_18 () (_ BitVec 64))
(declare-fun temp642_19 () (_ BitVec 64))
(declare-fun temp642_20 () (_ BitVec 64))
(declare-fun temp642_21 () (_ BitVec 64))
(declare-fun temp642_22 () (_ BitVec 64))
(declare-fun temp642_23 () (_ BitVec 64))
(declare-fun temp642_24 () (_ BitVec 64))
(declare-fun temp642_25 () (_ BitVec 64))
(declare-fun temp642_26 () (_ BitVec 64))
(declare-fun temp642_27 () (_ BitVec 64))
(declare-fun temp642_28 () (_ BitVec 64))
(declare-fun temp642_29 () (_ BitVec 64))
(declare-fun temp642_30 () (_ BitVec 64))
(declare-fun temp642_31 () (_ BitVec 64))
(declare-fun temp642_32 () (_ BitVec 64))
(declare-fun temp642_33 () (_ BitVec 64))
(declare-fun temp642_34 () (_ BitVec 64))
(declare-fun temp642_35 () (_ BitVec 64))
(declare-fun temp642_36 () (_ BitVec 64))
(declare-fun temp642_37 () (_ BitVec 64))
(declare-fun temp642_38 () (_ BitVec 64))
(declare-fun temp642_39 () (_ BitVec 64))
(declare-fun temp642_40 () (_ BitVec 64))
(declare-fun temp642_41 () (_ BitVec 64))
(declare-fun temp642_42 () (_ BitVec 64))
(declare-fun temp642_43 () (_ BitVec 64))
(declare-fun temp642_44 () (_ BitVec 64))
(declare-fun temp642_45 () (_ BitVec 64))
(declare-fun temp642_46 () (_ BitVec 64))
(declare-fun temp642_47 () (_ BitVec 64))
(declare-fun temp642_48 () (_ BitVec 64))
(declare-fun var1191714 () (_ BitVec 64))
(declare-fun temp642_49 () (_ BitVec 64))
(declare-fun temp642_50 () (_ BitVec 64))
(declare-fun temp642_51 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp642_52 () (_ BitVec 64))
(declare-fun temp642_53 () (_ BitVec 64))
(declare-fun temp642_54 () (_ BitVec 64))
(declare-fun temp642_55 () (_ BitVec 64))
(declare-fun temp642_56 () (_ BitVec 64))
(declare-fun temp642_57 () (_ BitVec 64))
(declare-fun temp642_58 () (_ BitVec 64))
(declare-fun temp642_59 () (_ BitVec 64))
(declare-fun temp642_60 () (_ BitVec 64))
(declare-fun temp642_61 () (_ BitVec 64))
(declare-fun temp642_62 () (_ BitVec 64))
(declare-fun temp642_63 () (_ BitVec 64))
(declare-fun temp642_64 () (_ BitVec 64))
(declare-fun temp642_65 () (_ BitVec 64))
(declare-fun temp642_66 () (_ BitVec 64))
(declare-fun temp642_67 () (_ BitVec 64))
(declare-fun temp642_68 () (_ BitVec 64))
(declare-fun temp642_69 () (_ BitVec 64))
(declare-fun temp642_70 () (_ BitVec 64))
(declare-fun temp642_71 () (_ BitVec 64))
(declare-fun temp642_72 () (_ BitVec 64))
(declare-fun temp642_73 () (_ BitVec 64))
(declare-fun temp642_74 () (_ BitVec 64))
(declare-fun temp642_75 () (_ BitVec 64))
(declare-fun temp642_76 () (_ BitVec 64))
(declare-fun temp642_77 () (_ BitVec 64))
(declare-fun temp642_78 () (_ BitVec 64))
(declare-fun temp642_79 () (_ BitVec 64))
(declare-fun temp642_80 () (_ BitVec 64))
(declare-fun temp642_81 () (_ BitVec 64))
(declare-fun temp642_82 () (_ BitVec 64))
(declare-fun temp642_83 () (_ BitVec 64))
(declare-fun temp642_84 () (_ BitVec 64))
(declare-fun temp642_85 () (_ BitVec 64))
(declare-fun temp642_86 () (_ BitVec 64))
(declare-fun temp642_87 () (_ BitVec 64))
(declare-fun temp642_88 () (_ BitVec 64))
(declare-fun temp642_89 () (_ BitVec 64))
(declare-fun temp642_90 () (_ BitVec 64))
(declare-fun temp642_91 () (_ BitVec 64))
(declare-fun var1191725 () (_ BitVec 64))
(declare-fun temp642_92 () (_ BitVec 64))
(declare-fun temp642_93 () (_ BitVec 64))
(declare-fun temp642_94 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp642_95 () (_ BitVec 64))
(declare-fun temp642_96 () (_ BitVec 64))
(declare-fun temp642_97 () (_ BitVec 64))
(declare-fun temp642_98 () (_ BitVec 64))
(declare-fun temp642_99 () (_ BitVec 64))
(declare-fun temp642_100 () (_ BitVec 64))
(declare-fun temp642_101 () (_ BitVec 64))
(declare-fun temp642_102 () (_ BitVec 64))
(declare-fun temp642_103 () (_ BitVec 64))
(declare-fun temp642_104 () (_ BitVec 64))
(declare-fun temp642_105 () (_ BitVec 64))
(declare-fun temp642_106 () (_ BitVec 64))
(declare-fun temp642_107 () (_ BitVec 64))
(declare-fun temp642_108 () (_ BitVec 64))
(declare-fun temp642_109 () (_ BitVec 64))
(declare-fun temp642_110 () (_ BitVec 64))
(declare-fun temp642_111 () (_ BitVec 64))
(declare-fun temp642_112 () (_ BitVec 64))
(declare-fun temp642_113 () (_ BitVec 64))
(declare-fun temp642_114 () (_ BitVec 64))
(declare-fun temp642_115 () (_ BitVec 64))
(declare-fun temp642_116 () (_ BitVec 64))
(declare-fun temp642_117 () (_ BitVec 64))
(declare-fun temp642_118 () (_ BitVec 64))
(declare-fun temp642_119 () (_ BitVec 64))
(declare-fun temp642_120 () (_ BitVec 64))
(declare-fun temp642_121 () (_ BitVec 64))
(declare-fun temp642_122 () (_ BitVec 64))
(declare-fun temp642_123 () (_ BitVec 64))
(declare-fun temp642_124 () (_ BitVec 64))
(declare-fun temp642_125 () (_ BitVec 64))
(declare-fun temp642_126 () (_ BitVec 64))
(declare-fun temp642_127 () (_ BitVec 64))
(declare-fun temp642_128 () (_ BitVec 64))
(declare-fun temp642_129 () (_ BitVec 64))
(declare-fun temp642_130 () (_ BitVec 64))
(declare-fun temp642_131 () (_ BitVec 64))
(declare-fun temp642_132 () (_ BitVec 64))
(declare-fun temp642_133 () (_ BitVec 64))
(declare-fun temp642_134 () (_ BitVec 64))
(declare-fun var1191735 () (_ BitVec 64))
(declare-fun temp642_135 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1191747 () (_ BitVec 64))
(declare-fun temp642_136 () (_ BitVec 64))
(declare-fun temp642_137 () (_ BitVec 64))
(declare-fun var1179826 () (_ BitVec 64))
(declare-fun temp642_138 () (_ BitVec 64))
(declare-fun temp642_139 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp642_140 () (_ BitVec 64))
(declare-fun temp642_141 () (_ BitVec 64))
(declare-fun temp642_142 () (_ BitVec 64))
(declare-fun temp642_143 () (_ BitVec 64))
(declare-fun temp642_144 () (_ BitVec 64))
(declare-fun temp642_145 () (_ BitVec 64))
(declare-fun temp642_146 () (_ BitVec 64))
(declare-fun temp642_147 () (_ BitVec 64))
(declare-fun temp642_148 () (_ BitVec 64))
(declare-fun temp642_149 () (_ BitVec 64))
(declare-fun temp642_150 () (_ BitVec 64))
(declare-fun temp642_151 () (_ BitVec 64))
(declare-fun temp642_152 () (_ BitVec 64))
(declare-fun temp642_153 () (_ BitVec 64))
(declare-fun temp642_154 () (_ BitVec 64))
(declare-fun temp642_155 () (_ BitVec 64))
(declare-fun temp642_157 () (_ BitVec 64))
(declare-fun temp642_158 () (_ BitVec 64))
(declare-fun temp642_156 () (_ BitVec 64))
(declare-fun var1191780 () (_ BitVec 64))
(declare-fun temp642_159 () (_ BitVec 64))
(declare-fun temp642_160 () (_ BitVec 64))
(declare-fun temp642_162 () (_ BitVec 64))
(declare-fun temp642_163 () (_ BitVec 64))
(declare-fun temp642_161 () (_ BitVec 64))
(declare-fun var1191802 () (_ BitVec 64))
(declare-fun temp642_164 () (_ BitVec 64))
(declare-fun var1191803 () (_ BitVec 64))
(declare-fun temp642_165 () (_ BitVec 64))
(declare-fun temp642_166 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1191823 () (_ BitVec 64))
(declare-fun temp642_167 () (_ BitVec 64))
(declare-fun temp642_168 () (_ BitVec 64))
(declare-fun var1180714 () (_ BitVec 64))
(declare-fun temp642_169 () (_ BitVec 64))
(declare-fun temp642_170 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp642_171 () (_ BitVec 64))
(declare-fun temp642_172 () (_ BitVec 64))
(declare-fun temp642_173 () (_ BitVec 64))
(declare-fun temp642_174 () (_ BitVec 64))
(declare-fun temp642_175 () (_ BitVec 64))
(declare-fun temp642_176 () (_ BitVec 64))
(declare-fun temp642_177 () (_ BitVec 64))
(declare-fun temp642_178 () (_ BitVec 64))
(declare-fun temp642_179 () (_ BitVec 64))
(declare-fun temp642_180 () (_ BitVec 64))
(declare-fun temp642_181 () (_ BitVec 64))
(declare-fun temp642_182 () (_ BitVec 64))
(declare-fun temp642_183 () (_ BitVec 64))
(declare-fun temp642_184 () (_ BitVec 64))
(declare-fun temp642_185 () (_ BitVec 64))
(declare-fun temp642_186 () (_ BitVec 64))
(declare-fun temp642_187 () (_ BitVec 64))
(declare-fun temp642_188 () (_ BitVec 64))
(declare-fun temp642_189 () (_ BitVec 64))
(declare-fun var1191831 () (_ BitVec 64))
(declare-fun temp642_190 () (_ BitVec 64))
(declare-fun temp642_192 () (_ BitVec 64))
(declare-fun temp642_193 () (_ BitVec 64))
(declare-fun temp642_191 () (_ BitVec 64))
(declare-fun var1191835 () (_ BitVec 64))
(declare-fun var1191836 () (_ BitVec 64))
(declare-fun temp642_194 () (_ BitVec 64))
(declare-fun temp642_195 () (_ BitVec 64))
(declare-fun temp642_197 () (_ BitVec 64))
(declare-fun temp642_198 () (_ BitVec 64))
(declare-fun temp642_196 () (_ BitVec 64))
(declare-fun temp642_199 () (_ BitVec 64))
(declare-fun var1586025 () (_ BitVec 64))
(declare-fun var1586034 () (_ BitVec 64))
(declare-fun var1717312 () (_ BitVec 64))
(declare-fun temp642_200 () (_ BitVec 64))
(declare-fun var1191993 () (_ BitVec 64))
(declare-fun temp642_201 () (_ BitVec 64))
(declare-fun var2700303 () (_ BitVec 64))
(declare-fun temp642_202 () (_ BitVec 64))
(declare-fun var2962447 () (_ BitVec 64))
(declare-fun temp642_203 () (_ BitVec 64))
(declare-fun var211058 () (_ BitVec 64))
(declare-fun temp642_204 () (_ BitVec 64))
(declare-fun temp642_205 () (_ BitVec 64))
(declare-fun var211188 () (_ BitVec 64))
(declare-fun var3879401 () (_ BitVec 64))
(declare-fun temp642_206 () (_ BitVec 64))
(declare-fun var3866802 () (_ BitVec 64))
(declare-fun temp642_207 () (_ BitVec 64))
(declare-fun temp642_208 () (_ BitVec 64))
(declare-fun temp642_209 () (_ BitVec 64))
(declare-fun var3879420 () (_ BitVec 64))
(declare-fun temp642_210 () (_ BitVec 64))
(declare-fun var3879421 () (_ BitVec 64))
(declare-fun temp642_211 () (_ BitVec 64))
(declare-fun temp642_212 () (_ BitVec 64))
(declare-fun var4079423 () (_ BitVec 64))
(declare-fun var4079425 () (_ BitVec 64))
(declare-fun var4079382 () (_ BitVec 64))
(declare-fun var211201 () (_ BitVec 64))
(declare-fun temp642_213 () (_ BitVec 64))
(declare-fun var4208259 () (_ BitVec 64))
(declare-fun var4208261 () (_ BitVec 64))
(declare-fun var4273804 () (_ BitVec 64))
(declare-fun var4273805 () (_ BitVec 64))
(declare-fun var4273818 () (_ BitVec 64))
(declare-fun var4273820 () (_ BitVec 64))
(declare-fun temp642_214 () (_ BitVec 64))
(declare-fun var4273845 () (_ BitVec 64))
(declare-fun var4273847 () (_ BitVec 64))
(declare-fun var4394835 () (_ BitVec 64))
(declare-fun var4993424 () (_ BitVec 64))
(declare-fun var211494 () (_ BitVec 64))
(declare-fun temp642_215 () (_ BitVec 64))
(declare-fun var211495 () (_ BitVec 64))
(declare-fun temp642_216 () (_ BitVec 64))
(assert (= temp642_1 #x0000000000000001))
(assert (= var77203 temp642_1))
(assert (= var210653 var77203))
(assert (= var210913 var210653))
(assert (= temp642_2 #xfffffffffffffffe))
(assert (= var210940 (bvadd ARGNAME_weight_NAMEEND_DIM temp642_2)))
(assert (= temp642_3 #x0000000000000003))
(assert (= var210941
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp642_3)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp642_4 #x0000000000000000))
(assert (= var210941 temp642_4))
(assert (= temp642_5 #x0000000000000001))
(assert (= var210986
   (ite (bvslt ARGNAME_groups_NAMEEND temp642_5)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp642_6 #x0000000000000000))
(assert (= var210986 temp642_6))
(assert (= ARGNAME_stride_NAMEEND_LEN var210940))
(assert (= ARGNAME_padding_NAMEEND_LEN var210940))
(assert (= ARGNAME_dilation_NAMEEND_LEN var210940))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var210940))
(assert (= temp642_7 #x0000000000000000))
(assert (= temp642_8 temp642_7))
(assert (= temp642_9 (select ARGNAME_padding_NAMEEND_VAL temp642_8)))
(assert (= temp642_10 #x0000000000000001))
(assert (= temp642_11 temp642_10))
(assert (= temp642_12 (select ARGNAME_padding_NAMEEND_VAL temp642_11)))
(assert (= temp642_13 #x0000000000000002))
(assert (= temp642_14 temp642_13))
(assert (= temp642_15 (select ARGNAME_padding_NAMEEND_VAL temp642_14)))
(assert (= temp642_16 #x0000000000000003))
(assert (= temp642_17 temp642_16))
(assert (= temp642_18 (select ARGNAME_padding_NAMEEND_VAL temp642_17)))
(assert (= temp642_19 #x0000000000000004))
(assert (= temp642_20 temp642_19))
(assert (= temp642_21 (select ARGNAME_padding_NAMEEND_VAL temp642_20)))
(assert (= temp642_22 #x0000000000000005))
(assert (= temp642_23 temp642_22))
(assert (= temp642_24 (select ARGNAME_padding_NAMEEND_VAL temp642_23)))
(assert (= temp642_25 #x0000000000000000))
(assert (= temp642_26 #x0000000000000000))
(assert (= temp642_27 temp642_26))
(assert (= temp642_28 (select ARGNAME_padding_NAMEEND_VAL temp642_27)))
(assert (= temp642_29 #x0000000000000000))
(assert (= temp642_30 #x0000000000000001))
(assert (= temp642_31 temp642_30))
(assert (= temp642_32 (select ARGNAME_padding_NAMEEND_VAL temp642_31)))
(assert (= temp642_33 #x0000000000000000))
(assert (= temp642_34 #x0000000000000002))
(assert (= temp642_35 temp642_34))
(assert (= temp642_36 (select ARGNAME_padding_NAMEEND_VAL temp642_35)))
(assert (= temp642_37 #x0000000000000000))
(assert (= temp642_38 #x0000000000000003))
(assert (= temp642_39 temp642_38))
(assert (= temp642_40 (select ARGNAME_padding_NAMEEND_VAL temp642_39)))
(assert (= temp642_41 #x0000000000000000))
(assert (= temp642_42 #x0000000000000004))
(assert (= temp642_43 temp642_42))
(assert (= temp642_44 (select ARGNAME_padding_NAMEEND_VAL temp642_43)))
(assert (= temp642_45 #x0000000000000000))
(assert (= temp642_46 #x0000000000000005))
(assert (= temp642_47 temp642_46))
(assert (= temp642_48 (select ARGNAME_padding_NAMEEND_VAL temp642_47)))
(assert (= var1191714
   (ite (and true
             (bvslt temp642_28 temp642_25)
             (bvslt temp642_32 temp642_29)
             (bvslt temp642_36 temp642_33)
             (bvslt temp642_40 temp642_37)
             (bvslt temp642_44 temp642_41)
             (bvslt temp642_48 temp642_45))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp642_49 #x0000000000000000))
(assert (= var1191714 temp642_49))
(assert (= temp642_50 #x0000000000000000))
(assert (= temp642_51 temp642_50))
(assert (= temp642_52 (select ARGNAME_output_padding_NAMEEND_VAL temp642_51)))
(assert (= temp642_53 #x0000000000000001))
(assert (= temp642_54 temp642_53))
(assert (= temp642_55 (select ARGNAME_output_padding_NAMEEND_VAL temp642_54)))
(assert (= temp642_56 #x0000000000000002))
(assert (= temp642_57 temp642_56))
(assert (= temp642_58 (select ARGNAME_output_padding_NAMEEND_VAL temp642_57)))
(assert (= temp642_59 #x0000000000000003))
(assert (= temp642_60 temp642_59))
(assert (= temp642_61 (select ARGNAME_output_padding_NAMEEND_VAL temp642_60)))
(assert (= temp642_62 #x0000000000000004))
(assert (= temp642_63 temp642_62))
(assert (= temp642_64 (select ARGNAME_output_padding_NAMEEND_VAL temp642_63)))
(assert (= temp642_65 #x0000000000000005))
(assert (= temp642_66 temp642_65))
(assert (= temp642_67 (select ARGNAME_output_padding_NAMEEND_VAL temp642_66)))
(assert (= temp642_68 #x0000000000000000))
(assert (= temp642_69 #x0000000000000000))
(assert (= temp642_70 temp642_69))
(assert (= temp642_71 (select ARGNAME_output_padding_NAMEEND_VAL temp642_70)))
(assert (= temp642_72 #x0000000000000000))
(assert (= temp642_73 #x0000000000000001))
(assert (= temp642_74 temp642_73))
(assert (= temp642_75 (select ARGNAME_output_padding_NAMEEND_VAL temp642_74)))
(assert (= temp642_76 #x0000000000000000))
(assert (= temp642_77 #x0000000000000002))
(assert (= temp642_78 temp642_77))
(assert (= temp642_79 (select ARGNAME_output_padding_NAMEEND_VAL temp642_78)))
(assert (= temp642_80 #x0000000000000000))
(assert (= temp642_81 #x0000000000000003))
(assert (= temp642_82 temp642_81))
(assert (= temp642_83 (select ARGNAME_output_padding_NAMEEND_VAL temp642_82)))
(assert (= temp642_84 #x0000000000000000))
(assert (= temp642_85 #x0000000000000004))
(assert (= temp642_86 temp642_85))
(assert (= temp642_87 (select ARGNAME_output_padding_NAMEEND_VAL temp642_86)))
(assert (= temp642_88 #x0000000000000000))
(assert (= temp642_89 #x0000000000000005))
(assert (= temp642_90 temp642_89))
(assert (= temp642_91 (select ARGNAME_output_padding_NAMEEND_VAL temp642_90)))
(assert (= var1191725
   (ite (and true
             (bvslt temp642_71 temp642_68)
             (bvslt temp642_75 temp642_72)
             (bvslt temp642_79 temp642_76)
             (bvslt temp642_83 temp642_80)
             (bvslt temp642_87 temp642_84)
             (bvslt temp642_91 temp642_88))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp642_92 #x0000000000000000))
(assert (= var1191725 temp642_92))
(assert (= temp642_93 #x0000000000000000))
(assert (= temp642_94 temp642_93))
(assert (= temp642_95 (select ARGNAME_stride_NAMEEND_VAL temp642_94)))
(assert (= temp642_96 #x0000000000000001))
(assert (= temp642_97 temp642_96))
(assert (= temp642_98 (select ARGNAME_stride_NAMEEND_VAL temp642_97)))
(assert (= temp642_99 #x0000000000000002))
(assert (= temp642_100 temp642_99))
(assert (= temp642_101 (select ARGNAME_stride_NAMEEND_VAL temp642_100)))
(assert (= temp642_102 #x0000000000000003))
(assert (= temp642_103 temp642_102))
(assert (= temp642_104 (select ARGNAME_stride_NAMEEND_VAL temp642_103)))
(assert (= temp642_105 #x0000000000000004))
(assert (= temp642_106 temp642_105))
(assert (= temp642_107 (select ARGNAME_stride_NAMEEND_VAL temp642_106)))
(assert (= temp642_108 #x0000000000000005))
(assert (= temp642_109 temp642_108))
(assert (= temp642_110 (select ARGNAME_stride_NAMEEND_VAL temp642_109)))
(assert (= temp642_111 #x0000000000000000))
(assert (= temp642_112 #x0000000000000000))
(assert (= temp642_113 temp642_112))
(assert (= temp642_114 (select ARGNAME_stride_NAMEEND_VAL temp642_113)))
(assert (= temp642_115 #x0000000000000000))
(assert (= temp642_116 #x0000000000000001))
(assert (= temp642_117 temp642_116))
(assert (= temp642_118 (select ARGNAME_stride_NAMEEND_VAL temp642_117)))
(assert (= temp642_119 #x0000000000000000))
(assert (= temp642_120 #x0000000000000002))
(assert (= temp642_121 temp642_120))
(assert (= temp642_122 (select ARGNAME_stride_NAMEEND_VAL temp642_121)))
(assert (= temp642_123 #x0000000000000000))
(assert (= temp642_124 #x0000000000000003))
(assert (= temp642_125 temp642_124))
(assert (= temp642_126 (select ARGNAME_stride_NAMEEND_VAL temp642_125)))
(assert (= temp642_127 #x0000000000000000))
(assert (= temp642_128 #x0000000000000004))
(assert (= temp642_129 temp642_128))
(assert (= temp642_130 (select ARGNAME_stride_NAMEEND_VAL temp642_129)))
(assert (= temp642_131 #x0000000000000000))
(assert (= temp642_132 #x0000000000000005))
(assert (= temp642_133 temp642_132))
(assert (= temp642_134 (select ARGNAME_stride_NAMEEND_VAL temp642_133)))
(assert (= var1191735
   (ite (and true
             (bvsle temp642_114 temp642_111)
             (bvsle temp642_118 temp642_115)
             (bvsle temp642_122 temp642_119)
             (bvsle temp642_126 temp642_123)
             (bvsle temp642_130 temp642_127)
             (bvsle temp642_134 temp642_131))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp642_135 #x0000000000000000))
(assert (= var1191735 temp642_135))
(assert (= var1191747
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp642_136 #x0000000000000001))
(assert (= var1191747 temp642_136))
(assert (= temp642_137 #x0000000000000000))
(assert (= var1179826 temp642_137))
(assert (= temp642_138 #x0000000000000000))
(assert (= temp642_139 temp642_138))
(assert (= temp642_140 (select ARGNAME_weight_NAMEEND_DIMSIZE temp642_139)))
(assert (= temp642_141 #x0000000000000001))
(assert (= temp642_142 temp642_141))
(assert (= temp642_143 (select ARGNAME_weight_NAMEEND_DIMSIZE temp642_142)))
(assert (= temp642_144 #x0000000000000002))
(assert (= temp642_145 temp642_144))
(assert (= temp642_146 (select ARGNAME_weight_NAMEEND_DIMSIZE temp642_145)))
(assert (= temp642_147 #x0000000000000003))
(assert (= temp642_148 temp642_147))
(assert (= temp642_149 (select ARGNAME_weight_NAMEEND_DIMSIZE temp642_148)))
(assert (= temp642_150 #x0000000000000004))
(assert (= temp642_151 temp642_150))
(assert (= temp642_152 (select ARGNAME_weight_NAMEEND_DIMSIZE temp642_151)))
(assert (= temp642_153 #x0000000000000005))
(assert (= temp642_154 temp642_153))
(assert (= temp642_155 (select ARGNAME_weight_NAMEEND_DIMSIZE temp642_154)))
(assert (= temp642_157 var1179826))
(assert (= temp642_158 (select ARGNAME_weight_NAMEEND_DIMSIZE temp642_157)))
(assert (= temp642_156 temp642_158))
(assert (= var1191780
   (ite (bvslt temp642_156 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp642_159 #x0000000000000000))
(assert (= var1191780 temp642_159))
(assert (= temp642_160 #x0000000000000000))
(assert (= var1179826 temp642_160))
(assert (= temp642_162 var1179826))
(assert (= temp642_163 (select ARGNAME_weight_NAMEEND_DIMSIZE temp642_162)))
(assert (= temp642_161 temp642_163))
(assert (= var1191802 (bvsmod temp642_161 ARGNAME_groups_NAMEEND)))
(assert (= temp642_164 #x0000000000000000))
(assert (= var1191803
   (ite (= var1191802 temp642_164) #x0000000000000001 #x0000000000000000)))
(assert (= temp642_165 #x0000000000000001))
(assert (= var1191803 temp642_165))
(assert (= temp642_166 #x0000000000000000))
(assert (= var1191823
   (ite (= ARGNAME_transposed_NAMEEND temp642_166)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp642_167 #x0000000000000001))
(assert (= var1191823 temp642_167))
(assert (= temp642_168 #x0000000000000001))
(assert (= var1180714 temp642_168))
(assert (= temp642_169 #x0000000000000000))
(assert (= temp642_170 temp642_169))
(assert (= temp642_171 (select ARGNAME_input_NAMEEND_DIMSIZE temp642_170)))
(assert (= temp642_172 #x0000000000000001))
(assert (= temp642_173 temp642_172))
(assert (= temp642_174 (select ARGNAME_input_NAMEEND_DIMSIZE temp642_173)))
(assert (= temp642_175 #x0000000000000002))
(assert (= temp642_176 temp642_175))
(assert (= temp642_177 (select ARGNAME_input_NAMEEND_DIMSIZE temp642_176)))
(assert (= temp642_178 #x0000000000000003))
(assert (= temp642_179 temp642_178))
(assert (= temp642_180 (select ARGNAME_input_NAMEEND_DIMSIZE temp642_179)))
(assert (= temp642_181 #x0000000000000004))
(assert (= temp642_182 temp642_181))
(assert (= temp642_183 (select ARGNAME_input_NAMEEND_DIMSIZE temp642_182)))
(assert (= temp642_184 #x0000000000000005))
(assert (= temp642_185 temp642_184))
(assert (= temp642_186 (select ARGNAME_input_NAMEEND_DIMSIZE temp642_185)))
(assert (= temp642_187 #x0000000000000000))
(assert (= temp642_188
   (ite (bvslt var1180714 temp642_187)
        (bvadd ARGNAME_input_NAMEEND_DIM var1180714)
        var1180714)))
(assert (= temp642_189 (select ARGNAME_input_NAMEEND_DIMSIZE temp642_188)))
(assert (= var1191831 temp642_189))
(assert (bvslt (ite (bvslt var1180714 temp642_187)
            (bvadd ARGNAME_input_NAMEEND_DIM var1180714)
            var1180714)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp642_190 #x0000000000000001))
(assert (= var1180714 temp642_190))
(assert (= temp642_192 var1180714))
(assert (= temp642_193 (select ARGNAME_weight_NAMEEND_DIMSIZE temp642_192)))
(assert (= temp642_191 temp642_193))
(assert (= var1191835 (bvmul ARGNAME_groups_NAMEEND temp642_191)))
(assert (= var1191836
   (ite (= var1191831 var1191835) #x0000000000000001 #x0000000000000000)))
(assert (= temp642_194 #x0000000000000001))
(assert (= var1191836 temp642_194))
(assert (= temp642_195 #x0000000000000000))
(assert (= var1179826 temp642_195))
(assert (= temp642_197 var1179826))
(assert (= temp642_198 (select ARGNAME_weight_NAMEEND_DIMSIZE temp642_197)))
(assert (= temp642_196 temp642_198))
(assert (= temp642_199 #x0000000000000002))
(assert (= var1586025 temp642_199))
(assert (= var1586034 var1586025))
(assert (= var1717312 var1586034))
(assert (= temp642_200 #x0000000000000001))
(assert (= var1191993 temp642_200))
(assert (= temp642_201 #x0000000000000001))
(assert (= var2700303 temp642_201))
(assert (= temp642_202 #x0000000000000001))
(assert (= var2962447 temp642_202))
(assert (= temp642_203 #x0000000000000003))
(assert (= var211058
   (ite (= ARGNAME_weight_NAMEEND_DIM temp642_203)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp642_204 #x0000000000000001))
(assert (= var211058 temp642_204))
(assert (= temp642_205 #x0000000000000001))
(assert (= var211188 temp642_205))
(assert (= var3879401 var211188))
(assert (= temp642_206 #x0000000000000000))
(assert (= var3866802 temp642_206))
(assert (= temp642_207 #x0000000000000000))
(assert (= temp642_208
   (ite (bvslt var3866802 temp642_207)
        (bvadd ARGNAME_input_NAMEEND_DIM var3866802)
        var3866802)))
(assert (= temp642_209 (select ARGNAME_input_NAMEEND_DIMSIZE temp642_208)))
(assert (= var3879420 temp642_209))
(assert (bvslt (ite (bvslt var3866802 temp642_207)
            (bvadd ARGNAME_input_NAMEEND_DIM var3866802)
            var3866802)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp642_210 #x0000000000000000))
(assert (= var3879421
   (ite (= var3879420 temp642_210) #x0000000000000001 #x0000000000000000)))
(assert (= temp642_211 #x0000000000000001))
(assert (= var3879421 temp642_211))
(assert (= temp642_212 #x0000000000000000))
(assert (= var4079423 temp642_212))
(assert (= var4079425 var4079423))
(assert (= var4079382 var4079425))
(assert (= var211201 var4079382))
(assert (= temp642_213 #x0000000000000002))
(assert (= var4208259 temp642_213))
(assert (= var4208261 (bvsub ARGNAME_weight_NAMEEND_DIM var4208259)))
(assert (= var4273804 var4208259))
(assert (= var4273805 var4208261))
(assert (= var4273818 (bvadd var4273805 var4273804)))
(assert (= var4273820
   (ite (bvsgt var4273818 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp642_214 #x0000000000000000))
(assert (= var4273820 temp642_214))
(assert (= var4273845 var4273804))
(assert (= var4273847 var4273805))
(assert (= var4394835 var4273847))
(assert (= var4993424 var211201))
(assert (= var211494 var210913))
(assert (= temp642_215 #x0000000000000000))
(assert (= var211495
   (ite (distinct var211494 temp642_215) #x0000000000000001 #x0000000000000000)))
(assert (= temp642_216 #x0000000000000001))
(assert (= var211058 temp642_216))
(model-add temp642_1 () (_ BitVec 64) #x0000000000000001)
(model-add var77203 () (_ BitVec 64) #x0000000000000001)
(model-add var210653 () (_ BitVec 64) #x0000000000000001)
(model-add var210913 () (_ BitVec 64) #x0000000000000001)
(model-add temp642_2 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var210940
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp642_3 () (_ BitVec 64) #x0000000000000003)
(model-add temp642_4 () (_ BitVec 64) #x0000000000000000)
(model-add var210941 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))



