(declare-fun temp10028_1 () (_ BitVec 64))
(declare-fun var77203 () (_ BitVec 64))
(declare-fun var210653 () (_ BitVec 64))
(declare-fun var210913 () (_ BitVec 64))
(declare-fun temp10028_2 () (_ BitVec 64))
(declare-fun var210940 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp10028_3 () (_ BitVec 64))
(declare-fun temp10028_4 () (_ BitVec 64))
(declare-fun var210941 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun temp10028_5 () (_ BitVec 64))
(declare-fun ARGNAME_groups_NAMEEND () (_ BitVec 64))
(declare-fun var210986 () (_ BitVec 64))
(declare-fun temp10028_6 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_dilation_NAMEEND_LEN () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp10028_7 () (_ BitVec 64))
(declare-fun temp10028_8 () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp10028_9 () (_ BitVec 64))
(declare-fun temp10028_10 () (_ BitVec 64))
(declare-fun temp10028_11 () (_ BitVec 64))
(declare-fun temp10028_12 () (_ BitVec 64))
(declare-fun temp10028_13 () (_ BitVec 64))
(declare-fun temp10028_14 () (_ BitVec 64))
(declare-fun temp10028_15 () (_ BitVec 64))
(declare-fun temp10028_16 () (_ BitVec 64))
(declare-fun temp10028_17 () (_ BitVec 64))
(declare-fun temp10028_18 () (_ BitVec 64))
(declare-fun temp10028_19 () (_ BitVec 64))
(declare-fun temp10028_20 () (_ BitVec 64))
(declare-fun temp10028_21 () (_ BitVec 64))
(declare-fun temp10028_22 () (_ BitVec 64))
(declare-fun temp10028_23 () (_ BitVec 64))
(declare-fun temp10028_24 () (_ BitVec 64))
(declare-fun temp10028_25 () (_ BitVec 64))
(declare-fun temp10028_26 () (_ BitVec 64))
(declare-fun temp10028_27 () (_ BitVec 64))
(declare-fun temp10028_28 () (_ BitVec 64))
(declare-fun temp10028_29 () (_ BitVec 64))
(declare-fun temp10028_30 () (_ BitVec 64))
(declare-fun temp10028_31 () (_ BitVec 64))
(declare-fun temp10028_32 () (_ BitVec 64))
(declare-fun temp10028_33 () (_ BitVec 64))
(declare-fun temp10028_34 () (_ BitVec 64))
(declare-fun temp10028_35 () (_ BitVec 64))
(declare-fun temp10028_36 () (_ BitVec 64))
(declare-fun temp10028_37 () (_ BitVec 64))
(declare-fun temp10028_38 () (_ BitVec 64))
(declare-fun temp10028_39 () (_ BitVec 64))
(declare-fun temp10028_40 () (_ BitVec 64))
(declare-fun temp10028_41 () (_ BitVec 64))
(declare-fun temp10028_42 () (_ BitVec 64))
(declare-fun temp10028_43 () (_ BitVec 64))
(declare-fun temp10028_44 () (_ BitVec 64))
(declare-fun temp10028_45 () (_ BitVec 64))
(declare-fun temp10028_46 () (_ BitVec 64))
(declare-fun temp10028_47 () (_ BitVec 64))
(declare-fun temp10028_48 () (_ BitVec 64))
(declare-fun var1191714 () (_ BitVec 64))
(declare-fun temp10028_49 () (_ BitVec 64))
(declare-fun temp10028_50 () (_ BitVec 64))
(declare-fun temp10028_51 () (_ BitVec 64))
(declare-fun ARGNAME_output_padding_NAMEEND_VAL
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp10028_52 () (_ BitVec 64))
(declare-fun temp10028_53 () (_ BitVec 64))
(declare-fun temp10028_54 () (_ BitVec 64))
(declare-fun temp10028_55 () (_ BitVec 64))
(declare-fun temp10028_56 () (_ BitVec 64))
(declare-fun temp10028_57 () (_ BitVec 64))
(declare-fun temp10028_58 () (_ BitVec 64))
(declare-fun temp10028_59 () (_ BitVec 64))
(declare-fun temp10028_60 () (_ BitVec 64))
(declare-fun temp10028_61 () (_ BitVec 64))
(declare-fun temp10028_62 () (_ BitVec 64))
(declare-fun temp10028_63 () (_ BitVec 64))
(declare-fun temp10028_64 () (_ BitVec 64))
(declare-fun temp10028_65 () (_ BitVec 64))
(declare-fun temp10028_66 () (_ BitVec 64))
(declare-fun temp10028_67 () (_ BitVec 64))
(declare-fun temp10028_68 () (_ BitVec 64))
(declare-fun temp10028_69 () (_ BitVec 64))
(declare-fun temp10028_70 () (_ BitVec 64))
(declare-fun temp10028_71 () (_ BitVec 64))
(declare-fun temp10028_72 () (_ BitVec 64))
(declare-fun temp10028_73 () (_ BitVec 64))
(declare-fun temp10028_74 () (_ BitVec 64))
(declare-fun temp10028_75 () (_ BitVec 64))
(declare-fun temp10028_76 () (_ BitVec 64))
(declare-fun temp10028_77 () (_ BitVec 64))
(declare-fun temp10028_78 () (_ BitVec 64))
(declare-fun temp10028_79 () (_ BitVec 64))
(declare-fun temp10028_80 () (_ BitVec 64))
(declare-fun temp10028_81 () (_ BitVec 64))
(declare-fun temp10028_82 () (_ BitVec 64))
(declare-fun temp10028_83 () (_ BitVec 64))
(declare-fun temp10028_84 () (_ BitVec 64))
(declare-fun temp10028_85 () (_ BitVec 64))
(declare-fun temp10028_86 () (_ BitVec 64))
(declare-fun temp10028_87 () (_ BitVec 64))
(declare-fun temp10028_88 () (_ BitVec 64))
(declare-fun temp10028_89 () (_ BitVec 64))
(declare-fun temp10028_90 () (_ BitVec 64))
(declare-fun temp10028_91 () (_ BitVec 64))
(declare-fun var1191725 () (_ BitVec 64))
(declare-fun temp10028_92 () (_ BitVec 64))
(declare-fun temp10028_93 () (_ BitVec 64))
(declare-fun temp10028_94 () (_ BitVec 64))
(declare-fun ARGNAME_stride_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp10028_95 () (_ BitVec 64))
(declare-fun temp10028_96 () (_ BitVec 64))
(declare-fun temp10028_97 () (_ BitVec 64))
(declare-fun temp10028_98 () (_ BitVec 64))
(declare-fun temp10028_99 () (_ BitVec 64))
(declare-fun temp10028_100 () (_ BitVec 64))
(declare-fun temp10028_101 () (_ BitVec 64))
(declare-fun temp10028_102 () (_ BitVec 64))
(declare-fun temp10028_103 () (_ BitVec 64))
(declare-fun temp10028_104 () (_ BitVec 64))
(declare-fun temp10028_105 () (_ BitVec 64))
(declare-fun temp10028_106 () (_ BitVec 64))
(declare-fun temp10028_107 () (_ BitVec 64))
(declare-fun temp10028_108 () (_ BitVec 64))
(declare-fun temp10028_109 () (_ BitVec 64))
(declare-fun temp10028_110 () (_ BitVec 64))
(declare-fun temp10028_111 () (_ BitVec 64))
(declare-fun temp10028_112 () (_ BitVec 64))
(declare-fun temp10028_113 () (_ BitVec 64))
(declare-fun temp10028_114 () (_ BitVec 64))
(declare-fun temp10028_115 () (_ BitVec 64))
(declare-fun temp10028_116 () (_ BitVec 64))
(declare-fun temp10028_117 () (_ BitVec 64))
(declare-fun temp10028_118 () (_ BitVec 64))
(declare-fun temp10028_119 () (_ BitVec 64))
(declare-fun temp10028_120 () (_ BitVec 64))
(declare-fun temp10028_121 () (_ BitVec 64))
(declare-fun temp10028_122 () (_ BitVec 64))
(declare-fun temp10028_123 () (_ BitVec 64))
(declare-fun temp10028_124 () (_ BitVec 64))
(declare-fun temp10028_125 () (_ BitVec 64))
(declare-fun temp10028_126 () (_ BitVec 64))
(declare-fun temp10028_127 () (_ BitVec 64))
(declare-fun temp10028_128 () (_ BitVec 64))
(declare-fun temp10028_129 () (_ BitVec 64))
(declare-fun temp10028_130 () (_ BitVec 64))
(declare-fun temp10028_131 () (_ BitVec 64))
(declare-fun temp10028_132 () (_ BitVec 64))
(declare-fun temp10028_133 () (_ BitVec 64))
(declare-fun temp10028_134 () (_ BitVec 64))
(declare-fun var1191735 () (_ BitVec 64))
(declare-fun temp10028_135 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var1191747 () (_ BitVec 64))
(declare-fun temp10028_136 () (_ BitVec 64))
(declare-fun temp10028_137 () (_ BitVec 64))
(declare-fun var1179826 () (_ BitVec 64))
(declare-fun temp10028_138 () (_ BitVec 64))
(declare-fun temp10028_139 () (_ BitVec 64))
(declare-fun ARGNAME_weight_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp10028_140 () (_ BitVec 64))
(declare-fun temp10028_141 () (_ BitVec 64))
(declare-fun temp10028_142 () (_ BitVec 64))
(declare-fun temp10028_143 () (_ BitVec 64))
(declare-fun temp10028_144 () (_ BitVec 64))
(declare-fun temp10028_145 () (_ BitVec 64))
(declare-fun temp10028_146 () (_ BitVec 64))
(declare-fun temp10028_147 () (_ BitVec 64))
(declare-fun temp10028_148 () (_ BitVec 64))
(declare-fun temp10028_149 () (_ BitVec 64))
(declare-fun temp10028_150 () (_ BitVec 64))
(declare-fun temp10028_151 () (_ BitVec 64))
(declare-fun temp10028_152 () (_ BitVec 64))
(declare-fun temp10028_153 () (_ BitVec 64))
(declare-fun temp10028_154 () (_ BitVec 64))
(declare-fun temp10028_155 () (_ BitVec 64))
(declare-fun temp10028_157 () (_ BitVec 64))
(declare-fun temp10028_158 () (_ BitVec 64))
(declare-fun temp10028_156 () (_ BitVec 64))
(declare-fun var1191780 () (_ BitVec 64))
(declare-fun temp10028_159 () (_ BitVec 64))
(declare-fun temp10028_160 () (_ BitVec 64))
(declare-fun temp10028_162 () (_ BitVec 64))
(declare-fun temp10028_163 () (_ BitVec 64))
(declare-fun temp10028_161 () (_ BitVec 64))
(declare-fun var1191802 () (_ BitVec 64))
(declare-fun temp10028_164 () (_ BitVec 64))
(declare-fun var1191803 () (_ BitVec 64))
(declare-fun temp10028_165 () (_ BitVec 64))
(declare-fun temp10028_166 () (_ BitVec 64))
(declare-fun ARGNAME_transposed_NAMEEND () (_ BitVec 64))
(declare-fun var1191823 () (_ BitVec 64))
(declare-fun temp10028_167 () (_ BitVec 64))
(declare-fun temp10028_168 () (_ BitVec 64))
(declare-fun var1180714 () (_ BitVec 64))
(declare-fun temp10028_169 () (_ BitVec 64))
(declare-fun temp10028_170 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp10028_171 () (_ BitVec 64))
(declare-fun temp10028_172 () (_ BitVec 64))
(declare-fun temp10028_173 () (_ BitVec 64))
(declare-fun temp10028_174 () (_ BitVec 64))
(declare-fun temp10028_175 () (_ BitVec 64))
(declare-fun temp10028_176 () (_ BitVec 64))
(declare-fun temp10028_177 () (_ BitVec 64))
(declare-fun temp10028_178 () (_ BitVec 64))
(declare-fun temp10028_179 () (_ BitVec 64))
(declare-fun temp10028_180 () (_ BitVec 64))
(declare-fun temp10028_181 () (_ BitVec 64))
(declare-fun temp10028_182 () (_ BitVec 64))
(declare-fun temp10028_183 () (_ BitVec 64))
(declare-fun temp10028_184 () (_ BitVec 64))
(declare-fun temp10028_185 () (_ BitVec 64))
(declare-fun temp10028_186 () (_ BitVec 64))
(declare-fun temp10028_187 () (_ BitVec 64))
(declare-fun temp10028_188 () (_ BitVec 64))
(declare-fun temp10028_189 () (_ BitVec 64))
(declare-fun var1191831 () (_ BitVec 64))
(declare-fun temp10028_190 () (_ BitVec 64))
(declare-fun temp10028_192 () (_ BitVec 64))
(declare-fun temp10028_193 () (_ BitVec 64))
(declare-fun temp10028_191 () (_ BitVec 64))
(declare-fun var1191835 () (_ BitVec 64))
(declare-fun var1191836 () (_ BitVec 64))
(declare-fun temp10028_194 () (_ BitVec 64))
(declare-fun temp10028_195 () (_ BitVec 64))
(declare-fun temp10028_197 () (_ BitVec 64))
(declare-fun temp10028_198 () (_ BitVec 64))
(declare-fun temp10028_196 () (_ BitVec 64))
(declare-fun temp10028_199 () (_ BitVec 64))
(declare-fun var1586025 () (_ BitVec 64))
(declare-fun var1586034 () (_ BitVec 64))
(declare-fun var1717312 () (_ BitVec 64))
(declare-fun temp10028_200 () (_ BitVec 64))
(declare-fun var1191993 () (_ BitVec 64))
(declare-fun temp10028_201 () (_ BitVec 64))
(declare-fun var2700303 () (_ BitVec 64))
(declare-fun temp10028_202 () (_ BitVec 64))
(declare-fun var2962447 () (_ BitVec 64))
(declare-fun temp10028_203 () (_ BitVec 64))
(declare-fun var211058 () (_ BitVec 64))
(declare-fun temp10028_204 () (_ BitVec 64))
(declare-fun temp10028_205 () (_ BitVec 64))
(declare-fun var211188 () (_ BitVec 64))
(declare-fun var3879401 () (_ BitVec 64))
(declare-fun temp10028_206 () (_ BitVec 64))
(declare-fun var3866802 () (_ BitVec 64))
(declare-fun temp10028_207 () (_ BitVec 64))
(declare-fun temp10028_208 () (_ BitVec 64))
(declare-fun temp10028_209 () (_ BitVec 64))
(declare-fun var3879420 () (_ BitVec 64))
(declare-fun temp10028_210 () (_ BitVec 64))
(declare-fun var3879421 () (_ BitVec 64))
(declare-fun temp10028_211 () (_ BitVec 64))
(declare-fun temp10028_212 () (_ BitVec 64))
(declare-fun var3867690 () (_ BitVec 64))
(declare-fun temp10028_213 () (_ BitVec 64))
(declare-fun temp10028_214 () (_ BitVec 64))
(declare-fun temp10028_215 () (_ BitVec 64))
(declare-fun var3879423 () (_ BitVec 64))
(declare-fun temp10028_216 () (_ BitVec 64))
(declare-fun var3879424 () (_ BitVec 64))
(declare-fun temp10028_217 () (_ BitVec 64))
(declare-fun temp10028_218 () (_ BitVec 64))
(declare-fun var4079423 () (_ BitVec 64))
(declare-fun var4079425 () (_ BitVec 64))
(declare-fun var4079382 () (_ BitVec 64))
(declare-fun var211201 () (_ BitVec 64))
(declare-fun temp10028_219 () (_ BitVec 64))
(declare-fun var4208259 () (_ BitVec 64))
(declare-fun var4208261 () (_ BitVec 64))
(declare-fun var4273804 () (_ BitVec 64))
(declare-fun var4273805 () (_ BitVec 64))
(declare-fun var4273818 () (_ BitVec 64))
(declare-fun var4273820 () (_ BitVec 64))
(declare-fun temp10028_220 () (_ BitVec 64))
(declare-fun var4273845 () (_ BitVec 64))
(declare-fun var4273847 () (_ BitVec 64))
(declare-fun var4394835 () (_ BitVec 64))
(declare-fun temp10028_222 () (_ BitVec 64))
(declare-fun temp10028_221 () (_ BitVec 64))
(declare-fun temp10028_223 () (_ BitVec 64))
(declare-fun var197674 () (_ BitVec 64))
(declare-fun temp10028_224 () (_ BitVec 64))
(declare-fun temp10028_225 () (_ BitVec 64))
(declare-fun temp10028_226 () (_ BitVec 64))
(declare-fun var211595 () (_ BitVec 64))
(declare-fun temp10028_227 () (_ BitVec 64))
(declare-fun var211596 () (_ BitVec 64))
(declare-fun temp10028_228 () (_ BitVec 64))
(declare-fun temp10028_230 () (_ BitVec 64))
(declare-fun temp10028_229 () (_ BitVec 64))
(declare-fun temp10028_231 () (_ BitVec 64))
(declare-fun temp10028_232 () (_ BitVec 64))
(declare-fun var5518100 () (_ BitVec 64))
(declare-fun var5518067 () (_ BitVec 64))
(declare-fun var5386631 () (_ BitVec 64))
(declare-fun var5386627 () (_ BitVec 64))
(declare-fun var212669 () (_ BitVec 64))
(declare-fun temp10028_233 () (_ BitVec 64))
(assert (= temp10028_1 #x0000000000000001))
(assert (= var77203 temp10028_1))
(assert (= var210653 var77203))
(assert (= var210913 var210653))
(assert (= temp10028_2 #xfffffffffffffffe))
(assert (= var210940 (bvadd ARGNAME_weight_NAMEEND_DIM temp10028_2)))
(assert (= temp10028_3 #x0000000000000003))
(assert (= var210941
   (ite (bvslt ARGNAME_weight_NAMEEND_DIM temp10028_3)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp10028_4 #x0000000000000000))
(assert (= var210941 temp10028_4))
(assert (= temp10028_5 #x0000000000000001))
(assert (= var210986
   (ite (bvslt ARGNAME_groups_NAMEEND temp10028_5)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp10028_6 #x0000000000000000))
(assert (= var210986 temp10028_6))
(assert (= ARGNAME_stride_NAMEEND_LEN var210940))
(assert (= ARGNAME_padding_NAMEEND_LEN var210940))
(assert (= ARGNAME_dilation_NAMEEND_LEN var210940))
(assert (= ARGNAME_output_padding_NAMEEND_LEN var210940))
(assert (= temp10028_7 #x0000000000000000))
(assert (= temp10028_8 temp10028_7))
(assert (= temp10028_9 (select ARGNAME_padding_NAMEEND_VAL temp10028_8)))
(assert (= temp10028_10 #x0000000000000001))
(assert (= temp10028_11 temp10028_10))
(assert (= temp10028_12 (select ARGNAME_padding_NAMEEND_VAL temp10028_11)))
(assert (= temp10028_13 #x0000000000000002))
(assert (= temp10028_14 temp10028_13))
(assert (= temp10028_15 (select ARGNAME_padding_NAMEEND_VAL temp10028_14)))
(assert (= temp10028_16 #x0000000000000003))
(assert (= temp10028_17 temp10028_16))
(assert (= temp10028_18 (select ARGNAME_padding_NAMEEND_VAL temp10028_17)))
(assert (= temp10028_19 #x0000000000000004))
(assert (= temp10028_20 temp10028_19))
(assert (= temp10028_21 (select ARGNAME_padding_NAMEEND_VAL temp10028_20)))
(assert (= temp10028_22 #x0000000000000005))
(assert (= temp10028_23 temp10028_22))
(assert (= temp10028_24 (select ARGNAME_padding_NAMEEND_VAL temp10028_23)))
(assert (= temp10028_25 #x0000000000000000))
(assert (= temp10028_26 #x0000000000000000))
(assert (= temp10028_27 temp10028_26))
(assert (= temp10028_28 (select ARGNAME_padding_NAMEEND_VAL temp10028_27)))
(assert (= temp10028_29 #x0000000000000000))
(assert (= temp10028_30 #x0000000000000001))
(assert (= temp10028_31 temp10028_30))
(assert (= temp10028_32 (select ARGNAME_padding_NAMEEND_VAL temp10028_31)))
(assert (= temp10028_33 #x0000000000000000))
(assert (= temp10028_34 #x0000000000000002))
(assert (= temp10028_35 temp10028_34))
(assert (= temp10028_36 (select ARGNAME_padding_NAMEEND_VAL temp10028_35)))
(assert (= temp10028_37 #x0000000000000000))
(assert (= temp10028_38 #x0000000000000003))
(assert (= temp10028_39 temp10028_38))
(assert (= temp10028_40 (select ARGNAME_padding_NAMEEND_VAL temp10028_39)))
(assert (= temp10028_41 #x0000000000000000))
(assert (= temp10028_42 #x0000000000000004))
(assert (= temp10028_43 temp10028_42))
(assert (= temp10028_44 (select ARGNAME_padding_NAMEEND_VAL temp10028_43)))
(assert (= temp10028_45 #x0000000000000000))
(assert (= temp10028_46 #x0000000000000005))
(assert (= temp10028_47 temp10028_46))
(assert (= temp10028_48 (select ARGNAME_padding_NAMEEND_VAL temp10028_47)))
(assert (= var1191714
   (ite (and true
             (bvslt temp10028_28 temp10028_25)
             (bvslt temp10028_32 temp10028_29)
             (bvslt temp10028_36 temp10028_33)
             (bvslt temp10028_40 temp10028_37)
             (bvslt temp10028_44 temp10028_41)
             (bvslt temp10028_48 temp10028_45))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp10028_49 #x0000000000000000))
(assert (= var1191714 temp10028_49))
(assert (= temp10028_50 #x0000000000000000))
(assert (= temp10028_51 temp10028_50))
(assert (= temp10028_52 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_51)))
(assert (= temp10028_53 #x0000000000000001))
(assert (= temp10028_54 temp10028_53))
(assert (= temp10028_55 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_54)))
(assert (= temp10028_56 #x0000000000000002))
(assert (= temp10028_57 temp10028_56))
(assert (= temp10028_58 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_57)))
(assert (= temp10028_59 #x0000000000000003))
(assert (= temp10028_60 temp10028_59))
(assert (= temp10028_61 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_60)))
(assert (= temp10028_62 #x0000000000000004))
(assert (= temp10028_63 temp10028_62))
(assert (= temp10028_64 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_63)))
(assert (= temp10028_65 #x0000000000000005))
(assert (= temp10028_66 temp10028_65))
(assert (= temp10028_67 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_66)))
(assert (= temp10028_68 #x0000000000000000))
(assert (= temp10028_69 #x0000000000000000))
(assert (= temp10028_70 temp10028_69))
(assert (= temp10028_71 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_70)))
(assert (= temp10028_72 #x0000000000000000))
(assert (= temp10028_73 #x0000000000000001))
(assert (= temp10028_74 temp10028_73))
(assert (= temp10028_75 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_74)))
(assert (= temp10028_76 #x0000000000000000))
(assert (= temp10028_77 #x0000000000000002))
(assert (= temp10028_78 temp10028_77))
(assert (= temp10028_79 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_78)))
(assert (= temp10028_80 #x0000000000000000))
(assert (= temp10028_81 #x0000000000000003))
(assert (= temp10028_82 temp10028_81))
(assert (= temp10028_83 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_82)))
(assert (= temp10028_84 #x0000000000000000))
(assert (= temp10028_85 #x0000000000000004))
(assert (= temp10028_86 temp10028_85))
(assert (= temp10028_87 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_86)))
(assert (= temp10028_88 #x0000000000000000))
(assert (= temp10028_89 #x0000000000000005))
(assert (= temp10028_90 temp10028_89))
(assert (= temp10028_91 (select ARGNAME_output_padding_NAMEEND_VAL temp10028_90)))
(assert (= var1191725
   (ite (and true
             (bvslt temp10028_71 temp10028_68)
             (bvslt temp10028_75 temp10028_72)
             (bvslt temp10028_79 temp10028_76)
             (bvslt temp10028_83 temp10028_80)
             (bvslt temp10028_87 temp10028_84)
             (bvslt temp10028_91 temp10028_88))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp10028_92 #x0000000000000000))
(assert (= var1191725 temp10028_92))
(assert (= temp10028_93 #x0000000000000000))
(assert (= temp10028_94 temp10028_93))
(assert (= temp10028_95 (select ARGNAME_stride_NAMEEND_VAL temp10028_94)))
(assert (= temp10028_96 #x0000000000000001))
(assert (= temp10028_97 temp10028_96))
(assert (= temp10028_98 (select ARGNAME_stride_NAMEEND_VAL temp10028_97)))
(assert (= temp10028_99 #x0000000000000002))
(assert (= temp10028_100 temp10028_99))
(assert (= temp10028_101 (select ARGNAME_stride_NAMEEND_VAL temp10028_100)))
(assert (= temp10028_102 #x0000000000000003))
(assert (= temp10028_103 temp10028_102))
(assert (= temp10028_104 (select ARGNAME_stride_NAMEEND_VAL temp10028_103)))
(assert (= temp10028_105 #x0000000000000004))
(assert (= temp10028_106 temp10028_105))
(assert (= temp10028_107 (select ARGNAME_stride_NAMEEND_VAL temp10028_106)))
(assert (= temp10028_108 #x0000000000000005))
(assert (= temp10028_109 temp10028_108))
(assert (= temp10028_110 (select ARGNAME_stride_NAMEEND_VAL temp10028_109)))
(assert (= temp10028_111 #x0000000000000000))
(assert (= temp10028_112 #x0000000000000000))
(assert (= temp10028_113 temp10028_112))
(assert (= temp10028_114 (select ARGNAME_stride_NAMEEND_VAL temp10028_113)))
(assert (= temp10028_115 #x0000000000000000))
(assert (= temp10028_116 #x0000000000000001))
(assert (= temp10028_117 temp10028_116))
(assert (= temp10028_118 (select ARGNAME_stride_NAMEEND_VAL temp10028_117)))
(assert (= temp10028_119 #x0000000000000000))
(assert (= temp10028_120 #x0000000000000002))
(assert (= temp10028_121 temp10028_120))
(assert (= temp10028_122 (select ARGNAME_stride_NAMEEND_VAL temp10028_121)))
(assert (= temp10028_123 #x0000000000000000))
(assert (= temp10028_124 #x0000000000000003))
(assert (= temp10028_125 temp10028_124))
(assert (= temp10028_126 (select ARGNAME_stride_NAMEEND_VAL temp10028_125)))
(assert (= temp10028_127 #x0000000000000000))
(assert (= temp10028_128 #x0000000000000004))
(assert (= temp10028_129 temp10028_128))
(assert (= temp10028_130 (select ARGNAME_stride_NAMEEND_VAL temp10028_129)))
(assert (= temp10028_131 #x0000000000000000))
(assert (= temp10028_132 #x0000000000000005))
(assert (= temp10028_133 temp10028_132))
(assert (= temp10028_134 (select ARGNAME_stride_NAMEEND_VAL temp10028_133)))
(assert (= var1191735
   (ite (and true
             (bvsle temp10028_114 temp10028_111)
             (bvsle temp10028_118 temp10028_115)
             (bvsle temp10028_122 temp10028_119)
             (bvsle temp10028_126 temp10028_123)
             (bvsle temp10028_130 temp10028_127)
             (bvsle temp10028_134 temp10028_131))
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp10028_135 #x0000000000000000))
(assert (= var1191735 temp10028_135))
(assert (= var1191747
   (ite (= ARGNAME_weight_NAMEEND_DIM ARGNAME_input_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp10028_136 #x0000000000000001))
(assert (= var1191747 temp10028_136))
(assert (= temp10028_137 #x0000000000000000))
(assert (= var1179826 temp10028_137))
(assert (= temp10028_138 #x0000000000000000))
(assert (= temp10028_139 temp10028_138))
(assert (= temp10028_140 (select ARGNAME_weight_NAMEEND_DIMSIZE temp10028_139)))
(assert (= temp10028_141 #x0000000000000001))
(assert (= temp10028_142 temp10028_141))
(assert (= temp10028_143 (select ARGNAME_weight_NAMEEND_DIMSIZE temp10028_142)))
(assert (= temp10028_144 #x0000000000000002))
(assert (= temp10028_145 temp10028_144))
(assert (= temp10028_146 (select ARGNAME_weight_NAMEEND_DIMSIZE temp10028_145)))
(assert (= temp10028_147 #x0000000000000003))
(assert (= temp10028_148 temp10028_147))
(assert (= temp10028_149 (select ARGNAME_weight_NAMEEND_DIMSIZE temp10028_148)))
(assert (= temp10028_150 #x0000000000000004))
(assert (= temp10028_151 temp10028_150))
(assert (= temp10028_152 (select ARGNAME_weight_NAMEEND_DIMSIZE temp10028_151)))
(assert (= temp10028_153 #x0000000000000005))
(assert (= temp10028_154 temp10028_153))
(assert (= temp10028_155 (select ARGNAME_weight_NAMEEND_DIMSIZE temp10028_154)))
(assert (= temp10028_157 var1179826))
(assert (= temp10028_158 (select ARGNAME_weight_NAMEEND_DIMSIZE temp10028_157)))
(assert (= temp10028_156 temp10028_158))
(assert (= var1191780
   (ite (bvslt temp10028_156 ARGNAME_groups_NAMEEND)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp10028_159 #x0000000000000000))
(assert (= var1191780 temp10028_159))
(assert (= temp10028_160 #x0000000000000000))
(assert (= var1179826 temp10028_160))
(assert (= temp10028_162 var1179826))
(assert (= temp10028_163 (select ARGNAME_weight_NAMEEND_DIMSIZE temp10028_162)))
(assert (= temp10028_161 temp10028_163))
(assert (= var1191802 (bvsmod temp10028_161 ARGNAME_groups_NAMEEND)))
(assert (= temp10028_164 #x0000000000000000))
(assert (= var1191803
   (ite (= var1191802 temp10028_164) #x0000000000000001 #x0000000000000000)))
(assert (= temp10028_165 #x0000000000000001))
(assert (= var1191803 temp10028_165))
(assert (= temp10028_166 #x0000000000000000))
(assert (= var1191823
   (ite (= ARGNAME_transposed_NAMEEND temp10028_166)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp10028_167 #x0000000000000001))
(assert (= var1191823 temp10028_167))
(assert (= temp10028_168 #x0000000000000001))
(assert (= var1180714 temp10028_168))
(assert (= temp10028_169 #x0000000000000000))
(assert (= temp10028_170 temp10028_169))
(assert (= temp10028_171 (select ARGNAME_input_NAMEEND_DIMSIZE temp10028_170)))
(assert (= temp10028_172 #x0000000000000001))
(assert (= temp10028_173 temp10028_172))
(assert (= temp10028_174 (select ARGNAME_input_NAMEEND_DIMSIZE temp10028_173)))
(assert (= temp10028_175 #x0000000000000002))
(assert (= temp10028_176 temp10028_175))
(assert (= temp10028_177 (select ARGNAME_input_NAMEEND_DIMSIZE temp10028_176)))
(assert (= temp10028_178 #x0000000000000003))
(assert (= temp10028_179 temp10028_178))
(assert (= temp10028_180 (select ARGNAME_input_NAMEEND_DIMSIZE temp10028_179)))
(assert (= temp10028_181 #x0000000000000004))
(assert (= temp10028_182 temp10028_181))
(assert (= temp10028_183 (select ARGNAME_input_NAMEEND_DIMSIZE temp10028_182)))
(assert (= temp10028_184 #x0000000000000005))
(assert (= temp10028_185 temp10028_184))
(assert (= temp10028_186 (select ARGNAME_input_NAMEEND_DIMSIZE temp10028_185)))
(assert (= temp10028_187 #x0000000000000000))
(assert (= temp10028_188
   (ite (bvslt var1180714 temp10028_187)
        (bvadd ARGNAME_input_NAMEEND_DIM var1180714)
        var1180714)))
(assert (= temp10028_189 (select ARGNAME_input_NAMEEND_DIMSIZE temp10028_188)))
(assert (= var1191831 temp10028_189))
(assert (bvslt (ite (bvslt var1180714 temp10028_187)
            (bvadd ARGNAME_input_NAMEEND_DIM var1180714)
            var1180714)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp10028_190 #x0000000000000001))
(assert (= var1180714 temp10028_190))
(assert (= temp10028_192 var1180714))
(assert (= temp10028_193 (select ARGNAME_weight_NAMEEND_DIMSIZE temp10028_192)))
(assert (= temp10028_191 temp10028_193))
(assert (= var1191835 (bvmul ARGNAME_groups_NAMEEND temp10028_191)))
(assert (= var1191836
   (ite (= var1191831 var1191835) #x0000000000000001 #x0000000000000000)))
(assert (= temp10028_194 #x0000000000000001))
(assert (= var1191836 temp10028_194))
(assert (= temp10028_195 #x0000000000000000))
(assert (= var1179826 temp10028_195))
(assert (= temp10028_197 var1179826))
(assert (= temp10028_198 (select ARGNAME_weight_NAMEEND_DIMSIZE temp10028_197)))
(assert (= temp10028_196 temp10028_198))
(assert (= temp10028_199 #x0000000000000002))
(assert (= var1586025 temp10028_199))
(assert (= var1586034 var1586025))
(assert (= var1717312 var1586034))
(assert (= temp10028_200 #x0000000000000001))
(assert (= var1191993 temp10028_200))
(assert (= temp10028_201 #x0000000000000001))
(assert (= var2700303 temp10028_201))
(assert (= temp10028_202 #x0000000000000001))
(assert (= var2962447 temp10028_202))
(assert (= temp10028_203 #x0000000000000003))
(assert (= var211058
   (ite (= ARGNAME_weight_NAMEEND_DIM temp10028_203)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp10028_204 #x0000000000000001))
(assert (= var211058 temp10028_204))
(assert (= temp10028_205 #x0000000000000001))
(assert (= var211188 temp10028_205))
(assert (= var3879401 var211188))
(assert (= temp10028_206 #x0000000000000000))
(assert (= var3866802 temp10028_206))
(assert (= temp10028_207 #x0000000000000000))
(assert (= temp10028_208
   (ite (bvslt var3866802 temp10028_207)
        (bvadd ARGNAME_input_NAMEEND_DIM var3866802)
        var3866802)))
(assert (= temp10028_209 (select ARGNAME_input_NAMEEND_DIMSIZE temp10028_208)))
(assert (= var3879420 temp10028_209))
(assert (bvslt (ite (bvslt var3866802 temp10028_207)
            (bvadd ARGNAME_input_NAMEEND_DIM var3866802)
            var3866802)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp10028_210 #x0000000000000000))
(assert (= var3879421
   (ite (= var3879420 temp10028_210) #x0000000000000001 #x0000000000000000)))
(assert (= temp10028_211 #x0000000000000000))
(assert (= var3879421 temp10028_211))
(assert (= temp10028_212 #x0000000000000001))
(assert (= var3867690 temp10028_212))
(assert (= temp10028_213 #x0000000000000000))
(assert (= temp10028_214
   (ite (bvslt var3867690 temp10028_213)
        (bvadd ARGNAME_input_NAMEEND_DIM var3867690)
        var3867690)))
(assert (= temp10028_215 (select ARGNAME_input_NAMEEND_DIMSIZE temp10028_214)))
(assert (= var3879423 temp10028_215))
(assert (bvslt (ite (bvslt var3867690 temp10028_213)
            (bvadd ARGNAME_input_NAMEEND_DIM var3867690)
            var3867690)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp10028_216 #x0000000000000000))
(assert (= var3879424
   (ite (= var3879423 temp10028_216) #x0000000000000001 #x0000000000000000)))
(assert (= temp10028_217 #x0000000000000001))
(assert (= var3879424 temp10028_217))
(assert (= temp10028_218 #x0000000000000000))
(assert (= var4079423 temp10028_218))
(assert (= var4079425 var4079423))
(assert (= var4079382 var4079425))
(assert (= var211201 var4079382))
(assert (= temp10028_219 #x0000000000000002))
(assert (= var4208259 temp10028_219))
(assert (= var4208261 (bvsub ARGNAME_weight_NAMEEND_DIM var4208259)))
(assert (= var4273804 var4208259))
(assert (= var4273805 var4208261))
(assert (= var4273818 (bvadd var4273805 var4273804)))
(assert (= var4273820
   (ite (bvsgt var4273818 ARGNAME_weight_NAMEEND_DIM)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp10028_220 #x0000000000000000))
(assert (= var4273820 temp10028_220))
(assert (= var4273845 var4273804))
(assert (= var4273847 var4273805))
(assert (= var4394835 var4273847))
(assert (= temp10028_222 #xffffffffffffffff))
(assert (= temp10028_221 temp10028_222))
(assert (= temp10028_223 #x0000000000000001))
(assert (= var197674 temp10028_223))
(assert (= temp10028_224 #x0000000000000000))
(assert (= temp10028_225
   (ite (bvslt var197674 temp10028_224)
        (bvadd ARGNAME_input_NAMEEND_DIM var197674)
        var197674)))
(assert (= temp10028_226 (select ARGNAME_input_NAMEEND_DIMSIZE temp10028_225)))
(assert (= var211595 temp10028_226))
(assert (bvslt (ite (bvslt var197674 temp10028_224)
            (bvadd ARGNAME_input_NAMEEND_DIM var197674)
            var197674)
       ARGNAME_input_NAMEEND_DIM))
(assert (= temp10028_227 #x0000000000000000))
(assert (= var211596
   (ite (= var211595 temp10028_227) #x0000000000000001 #x0000000000000000)))
(assert (= temp10028_228 #x0000000000000001))
(assert (= var211596 temp10028_228))
(assert (= temp10028_230 #xffffffffffffffff))
(assert (= temp10028_229 temp10028_230))
(assert (= temp10028_231 #x0000000000000001))
(assert (= var211058 temp10028_231))
(assert (= temp10028_232 #x0000000000000000))
(assert (= var5518100 temp10028_232))
(assert (= var5518067 var5518100))
(assert (= var5386631 var5518067))
(assert (= var5386627 var5386631))
(assert (= var212669 var5386627))
(assert (= temp10028_233 #x0000000000000000))
(assert (= var212669 temp10028_233))
(model-add temp10028_1 () (_ BitVec 64) #x0000000000000001)
(model-add var77203 () (_ BitVec 64) #x0000000000000001)
(model-add var210653 () (_ BitVec 64) #x0000000000000001)
(model-add var210913 () (_ BitVec 64) #x0000000000000001)
(model-add temp10028_2 () (_ BitVec 64) #xfffffffffffffffe)
(model-add var210940
           ()
           (_ BitVec 64)
           (bvadd #xfffffffffffffffe ARGNAME_weight_NAMEEND_DIM))
(model-add temp10028_3 () (_ BitVec 64) #x0000000000000003)
(model-add temp10028_4 () (_ BitVec 64) #x0000000000000000)
(model-add var210941 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_weight_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000003 #x8000000000000000))
                #x0000000000000003
                (bvsub #x0000000000000003 #x0000000000000001)))




