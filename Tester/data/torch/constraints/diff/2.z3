(declare-fun temp2_1 () (_ BitVec 64))
(declare-fun temp2_2 () (_ BitVec 64))
(declare-fun var137781 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp2_3 () (_ BitVec 64))
(declare-fun var198400 () (_ BitVec 64))
(declare-fun temp2_4 () (_ BitVec 64))
(declare-fun temp2_5 () (_ BitVec 64))
(declare-fun temp2_6 () (_ BitVec 64))
(declare-fun temp2_7 () (_ BitVec 64))
(declare-fun temp2_8 () (_ BitVec 64))
(declare-fun temp2_9 () (_ BitVec 64))
(declare-fun var203378 () (_ BitVec 64))
(declare-fun var203396 () (_ BitVec 64))
(declare-fun temp2_11 () (_ BitVec 64))
(declare-fun temp2_10 () (_ BitVec 64))
(declare-fun temp2_12 () (_ BitVec 64))
(declare-fun var594485 () (_ BitVec 64))
(declare-fun temp2_13 () (_ BitVec 64))
(declare-fun var1115904 () (_ BitVec 64))
(declare-fun temp2_14 () (_ BitVec 64))
(declare-fun temp2_15 () (_ BitVec 64))
(declare-fun temp2_16 () (_ BitVec 64))
(declare-fun temp2_17 () (_ BitVec 64))
(declare-fun temp2_18 () (_ BitVec 64))
(declare-fun temp2_19 () (_ BitVec 64))
(declare-fun var1120882 () (_ BitVec 64))
(declare-fun var1120900 () (_ BitVec 64))
(declare-fun temp2_21 () (_ BitVec 64))
(declare-fun temp2_20 () (_ BitVec 64))
(declare-fun temp2_22 () (_ BitVec 64))
(declare-fun var1511989 () (_ BitVec 64))
(declare-fun temp2_23 () (_ BitVec 64))
(declare-fun ARGNAME_n_NAMEEND () (_ BitVec 64))
(declare-fun var72216 () (_ BitVec 64))
(assert (= temp2_1 #x0000000000000001))
(assert (= var137781
   (ite (bvslt ARGNAME_input_NAMEEND_DIM temp2_1)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp2_2 #x0000000000000000))
(assert (= var137781 temp2_2))
(assert (= temp2_3 #x0000000000000000))
(assert (= var198400 temp2_3))
(assert (= temp2_4 #x0000000000000000))
(assert (= temp2_5 #x0000000000000000))
(assert (= temp2_6 #x0000000000000000))
(assert (= temp2_7 #x0000000000000000))
(assert (= temp2_8 #x0000000000000000))
(assert (= temp2_9 #xffffffffffffffff))
(assert (let ((a!1 (or (= (ite (bvslt var203378 temp2_4)
                       (bvadd var203396 var203378)
                       var203378)
                  temp2_8)
               (= (ite (bvslt var203378 temp2_4)
                       (bvadd var203396 var203378)
                       var203378)
                  temp2_9))))
  (or (and (bvsgt var203396 temp2_5) (bvslt var203378 var203396))
      (and (= var203396 temp2_6) (distinct var198400 temp2_7) a!1))))
(assert (= temp2_11 #x0000000000000000))
(assert (= temp2_10 temp2_11))
(assert (= temp2_12 #x0000000000000000))
(assert (= var594485 temp2_12))
(assert (= temp2_13 #x0000000000000000))
(assert (= var1115904 temp2_13))
(assert (= temp2_14 #x0000000000000000))
(assert (= temp2_15 #x0000000000000000))
(assert (= temp2_16 #x0000000000000000))
(assert (= temp2_17 #x0000000000000000))
(assert (= temp2_18 #x0000000000000000))
(assert (= temp2_19 #xffffffffffffffff))
(assert (let ((a!1 (or (= (ite (bvslt var1120882 temp2_14)
                       (bvadd var1120900 var1120882)
                       var1120882)
                  temp2_18)
               (= (ite (bvslt var1120882 temp2_14)
                       (bvadd var1120900 var1120882)
                       var1120882)
                  temp2_19))))
  (or (and (bvsgt var1120900 temp2_15) (bvslt var1120882 var1120900))
      (and (= var1120900 temp2_16) (distinct var1115904 temp2_17) a!1))))
(assert (= temp2_21 #x0000000000000000))
(assert (= temp2_20 temp2_21))
(assert (= temp2_22 #x0000000000000000))
(assert (= var1511989 temp2_22))
(assert (= temp2_23 #x0000000000000000))
(assert (= var72216
   (ite (= ARGNAME_n_NAMEEND temp2_23) #x0000000000000001 #x0000000000000000)))
(model-add temp2_1 () (_ BitVec 64) #x0000000000000001)
(model-add temp2_2 () (_ BitVec 64) #x0000000000000000)
(model-add var137781 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_input_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000001 #x8000000000000000))
                #x0000000000000001
                (bvsub #x0000000000000001 #x0000000000000001)))






