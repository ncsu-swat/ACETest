(declare-fun temp6_1 () (_ BitVec 64))
(declare-fun temp6_2 () (_ BitVec 64))
(declare-fun var137781 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp6_3 () (_ BitVec 64))
(declare-fun var198400 () (_ BitVec 64))
(declare-fun temp6_4 () (_ BitVec 64))
(declare-fun temp6_5 () (_ BitVec 64))
(declare-fun temp6_6 () (_ BitVec 64))
(declare-fun temp6_7 () (_ BitVec 64))
(declare-fun temp6_8 () (_ BitVec 64))
(declare-fun temp6_9 () (_ BitVec 64))
(declare-fun var203378 () (_ BitVec 64))
(declare-fun var203396 () (_ BitVec 64))
(declare-fun temp6_11 () (_ BitVec 64))
(declare-fun temp6_10 () (_ BitVec 64))
(declare-fun temp6_12 () (_ BitVec 64))
(declare-fun var594485 () (_ BitVec 64))
(declare-fun temp6_13 () (_ BitVec 64))
(declare-fun var1115904 () (_ BitVec 64))
(declare-fun temp6_14 () (_ BitVec 64))
(declare-fun temp6_15 () (_ BitVec 64))
(declare-fun temp6_16 () (_ BitVec 64))
(declare-fun temp6_17 () (_ BitVec 64))
(declare-fun temp6_18 () (_ BitVec 64))
(declare-fun temp6_19 () (_ BitVec 64))
(declare-fun var1120882 () (_ BitVec 64))
(declare-fun var1120900 () (_ BitVec 64))
(declare-fun temp6_21 () (_ BitVec 64))
(declare-fun temp6_20 () (_ BitVec 64))
(declare-fun temp6_22 () (_ BitVec 64))
(declare-fun var1511989 () (_ BitVec 64))
(declare-fun temp6_23 () (_ BitVec 64))
(declare-fun ARGNAME_n_NAMEEND () (_ BitVec 64))
(declare-fun var72216 () (_ BitVec 64))
(assert (= temp6_1 #x0000000000000001))
(assert (= var137781
   (ite (bvslt ARGNAME_input_NAMEEND_DIM temp6_1)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp6_2 #x0000000000000000))
(assert (= var137781 temp6_2))
(assert (= temp6_3 #x0000000000000000))
(assert (= var198400 temp6_3))
(assert (= temp6_4 #x0000000000000000))
(assert (= temp6_5 #x0000000000000000))
(assert (= temp6_6 #x0000000000000000))
(assert (= temp6_7 #x0000000000000000))
(assert (= temp6_8 #x0000000000000000))
(assert (= temp6_9 #xffffffffffffffff))
(assert (let ((a!1 (or (= (ite (bvslt var203378 temp6_4)
                       (bvadd var203396 var203378)
                       var203378)
                  temp6_8)
               (= (ite (bvslt var203378 temp6_4)
                       (bvadd var203396 var203378)
                       var203378)
                  temp6_9))))
  (or (and (bvsgt var203396 temp6_5) (bvslt var203378 var203396))
      (and (= var203396 temp6_6) (distinct var198400 temp6_7) a!1))))
(assert (= temp6_11 #x0000000000000000))
(assert (= temp6_10 temp6_11))
(assert (= temp6_12 #x0000000000000000))
(assert (= var594485 temp6_12))
(assert (= temp6_13 #x0000000000000000))
(assert (= var1115904 temp6_13))
(assert (= temp6_14 #x0000000000000000))
(assert (= temp6_15 #x0000000000000000))
(assert (= temp6_16 #x0000000000000000))
(assert (= temp6_17 #x0000000000000000))
(assert (= temp6_18 #x0000000000000000))
(assert (= temp6_19 #xffffffffffffffff))
(assert (let ((a!1 (or (= (ite (bvslt var1120882 temp6_14)
                       (bvadd var1120900 var1120882)
                       var1120882)
                  temp6_18)
               (= (ite (bvslt var1120882 temp6_14)
                       (bvadd var1120900 var1120882)
                       var1120882)
                  temp6_19))))
  (or (and (bvsgt var1120900 temp6_15) (bvslt var1120882 var1120900))
      (and (= var1120900 temp6_16) (distinct var1115904 temp6_17) a!1))))
(assert (= temp6_21 #x0000000000000000))
(assert (= temp6_20 temp6_21))
(assert (= temp6_22 #x0000000000000000))
(assert (= var1511989 temp6_22))
(assert (= temp6_23 #x0000000000000000))
(assert (= var72216
   (ite (= ARGNAME_n_NAMEEND temp6_23) #x0000000000000001 #x0000000000000000)))
(model-add temp6_1 () (_ BitVec 64) #x0000000000000001)
(model-add temp6_2 () (_ BitVec 64) #x0000000000000000)
(model-add var137781 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_input_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000001 #x8000000000000000))
                #x0000000000000001
                (bvsub #x0000000000000001 #x0000000000000001)))






