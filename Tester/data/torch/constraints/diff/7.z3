(declare-fun temp7_1 () (_ BitVec 64))
(declare-fun temp7_2 () (_ BitVec 64))
(declare-fun var137781 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun temp7_3 () (_ BitVec 64))
(declare-fun var198400 () (_ BitVec 64))
(declare-fun temp7_4 () (_ BitVec 64))
(declare-fun temp7_5 () (_ BitVec 64))
(declare-fun temp7_6 () (_ BitVec 64))
(declare-fun temp7_7 () (_ BitVec 64))
(declare-fun temp7_8 () (_ BitVec 64))
(declare-fun temp7_9 () (_ BitVec 64))
(declare-fun var203378 () (_ BitVec 64))
(declare-fun var203396 () (_ BitVec 64))
(declare-fun temp7_11 () (_ BitVec 64))
(declare-fun temp7_10 () (_ BitVec 64))
(declare-fun temp7_12 () (_ BitVec 64))
(declare-fun var594485 () (_ BitVec 64))
(declare-fun temp7_13 () (_ BitVec 64))
(declare-fun var1115904 () (_ BitVec 64))
(declare-fun temp7_14 () (_ BitVec 64))
(declare-fun temp7_15 () (_ BitVec 64))
(declare-fun temp7_16 () (_ BitVec 64))
(declare-fun temp7_17 () (_ BitVec 64))
(declare-fun temp7_18 () (_ BitVec 64))
(declare-fun temp7_19 () (_ BitVec 64))
(declare-fun var1120882 () (_ BitVec 64))
(declare-fun var1120900 () (_ BitVec 64))
(declare-fun temp7_21 () (_ BitVec 64))
(declare-fun temp7_20 () (_ BitVec 64))
(declare-fun temp7_22 () (_ BitVec 64))
(declare-fun var1511989 () (_ BitVec 64))
(declare-fun temp7_23 () (_ BitVec 64))
(declare-fun ARGNAME_n_NAMEEND () (_ BitVec 64))
(declare-fun var72216 () (_ BitVec 64))
(assert (= temp7_1 #x0000000000000001))
(assert (= var137781
   (ite (bvslt ARGNAME_input_NAMEEND_DIM temp7_1)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp7_2 #x0000000000000000))
(assert (= var137781 temp7_2))
(assert (= temp7_3 #x0000000000000000))
(assert (= var198400 temp7_3))
(assert (= temp7_4 #x0000000000000000))
(assert (= temp7_5 #x0000000000000000))
(assert (= temp7_6 #x0000000000000000))
(assert (= temp7_7 #x0000000000000000))
(assert (= temp7_8 #x0000000000000000))
(assert (= temp7_9 #xffffffffffffffff))
(assert (let ((a!1 (or (= (ite (bvslt var203378 temp7_4)
                       (bvadd var203396 var203378)
                       var203378)
                  temp7_8)
               (= (ite (bvslt var203378 temp7_4)
                       (bvadd var203396 var203378)
                       var203378)
                  temp7_9))))
  (or (and (bvsgt var203396 temp7_5) (bvslt var203378 var203396))
      (and (= var203396 temp7_6) (distinct var198400 temp7_7) a!1))))
(assert (= temp7_11 #x0000000000000000))
(assert (= temp7_10 temp7_11))
(assert (= temp7_12 #x0000000000000000))
(assert (= var594485 temp7_12))
(assert (= temp7_13 #x0000000000000000))
(assert (= var1115904 temp7_13))
(assert (= temp7_14 #x0000000000000000))
(assert (= temp7_15 #x0000000000000000))
(assert (= temp7_16 #x0000000000000000))
(assert (= temp7_17 #x0000000000000000))
(assert (= temp7_18 #x0000000000000000))
(assert (= temp7_19 #xffffffffffffffff))
(assert (let ((a!1 (or (= (ite (bvslt var1120882 temp7_14)
                       (bvadd var1120900 var1120882)
                       var1120882)
                  temp7_18)
               (= (ite (bvslt var1120882 temp7_14)
                       (bvadd var1120900 var1120882)
                       var1120882)
                  temp7_19))))
  (or (and (bvsgt var1120900 temp7_15) (bvslt var1120882 var1120900))
      (and (= var1120900 temp7_16) (distinct var1115904 temp7_17) a!1))))
(assert (= temp7_21 #x0000000000000000))
(assert (= temp7_20 temp7_21))
(assert (= temp7_22 #x0000000000000000))
(assert (= var1511989 temp7_22))
(assert (= temp7_23 #x0000000000000000))
(assert (= var72216
   (ite (= ARGNAME_n_NAMEEND temp7_23) #x0000000000000001 #x0000000000000000)))
(model-add temp7_1 () (_ BitVec 64) #x0000000000000001)
(model-add temp7_2 () (_ BitVec 64) #x0000000000000000)
(model-add var137781 () (_ BitVec 64) #x0000000000000000)
(model-del k!0)
(model-add ARGNAME_input_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite (or k!0 (= #x0000000000000001 #x8000000000000000))
                #x0000000000000001
                (bvsub #x0000000000000001 #x0000000000000001)))






