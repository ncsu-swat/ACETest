(declare-fun temp101_1 () (_ BitVec 64))
(declare-fun var199216 () (_ BitVec 64))
(declare-fun var199212 () (_ BitVec 64))
(declare-fun temp101_2 () (_ BitVec 64))
(declare-fun var132667 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun extend_1524 () (_ BitVec 64))
(declare-fun temp101_3 () (_ BitVec 64))
(declare-fun ARGNAME_block_shape_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp101_4 () (_ BitVec 64))
(declare-fun temp101_5 () (_ BitVec 64))
(declare-fun temp101_6 () (_ BitVec 64))
(declare-fun temp101_7 () (_ BitVec 64))
(declare-fun temp101_8 () (_ BitVec 64))
(declare-fun temp101_9 () (_ BitVec 64))
(declare-fun temp101_10 () (_ BitVec 64))
(declare-fun temp101_11 () (_ BitVec 64))
(declare-fun temp101_12 () (_ BitVec 64))
(declare-fun temp101_13 () (_ BitVec 64))
(declare-fun temp101_14 () (_ BitVec 64))
(declare-fun temp101_15 () (_ BitVec 64))
(declare-fun temp101_16 () (_ BitVec 64))
(declare-fun var132692 () (_ BitVec 64))
(declare-fun var132695 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var132697 () (_ BitVec 64))
(declare-fun temp101_17 () (_ BitVec 64))
(declare-fun temp101_18 () (_ BitVec 64))
(declare-fun ARGNAME_crops_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var264765 () (_ BitVec 64))
(declare-fun var264761 () (_ BitVec 64))
(declare-fun var132721 () (_ BitVec 64))
(declare-fun temp101_19 () (_ BitVec 64))
(declare-fun temp101_20 () (_ BitVec 64))
(declare-fun var132725 () (_ BitVec 64))
(declare-fun temp101_21 () (_ BitVec 64))
(declare-fun var132726 () (_ BitVec 64))
(declare-fun temp101_22 () (_ BitVec 64))
(declare-fun ARGNAME_crops_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp101_23 () (_ BitVec 64))
(declare-fun temp101_24 () (_ BitVec 64))
(declare-fun temp101_25 () (_ BitVec 64))
(declare-fun temp101_26 () (_ BitVec 64))
(declare-fun temp101_27 () (_ BitVec 64))
(declare-fun temp101_28 () (_ BitVec 64))
(declare-fun temp101_29 () (_ BitVec 64))
(declare-fun temp101_30 () (_ BitVec 64))
(declare-fun temp101_31 () (_ BitVec 64))
(declare-fun temp101_32 () (_ BitVec 64))
(declare-fun temp101_33 () (_ BitVec 64))
(declare-fun temp101_34 () (_ BitVec 64))
(declare-fun temp101_35 () (_ BitVec 64))
(declare-fun var132727 () (_ BitVec 64))
(declare-fun var132728 () (_ BitVec 64))
(declare-fun temp101_36 () (_ BitVec 64))
(declare-fun temp101_37 () (_ BitVec 64))
(declare-fun temp101_38 () (_ BitVec 64))
(declare-fun var132730 () (_ BitVec 64))
(declare-fun temp101_39 () (_ BitVec 64))
(declare-fun var132731 () (_ BitVec 64))
(declare-fun temp101_40 () (_ BitVec 64))
(declare-fun temp101_41 () (_ BitVec 64))
(declare-fun var132787 () (_ BitVec 64))
(declare-fun temp101_42 () (_ BitVec 64))
(declare-fun temp101_43 () (_ BitVec 64))
(declare-fun var132789 () (_ BitVec 64))
(declare-fun temp101_44 () (_ BitVec 64))
(declare-fun var132793 () (_ BitVec 64))
(declare-fun temp101_45 () (_ BitVec 64))
(declare-fun var132795 () (_ BitVec 64))
(declare-fun var132801 () (_ BitVec 64))
(declare-fun temp101_46 () (_ BitVec 64))
(declare-fun var132803 () (_ BitVec 64))
(declare-fun var132825 () (_ BitVec 64))
(declare-fun var132826 () (_ BitVec 64))
(declare-fun temp101_47 () (_ BitVec 64))
(declare-fun var132827 () (_ BitVec 64))
(declare-fun temp101_48 () (_ BitVec 64))
(declare-fun var132829 () (_ BitVec 64))
(declare-fun var132830 () (_ BitVec 64))
(declare-fun temp101_49 () (_ BitVec 64))
(declare-fun var132833 () (_ BitVec 64))
(declare-fun var132835 () (_ BitVec 64))
(declare-fun temp101_50 () (_ BitVec 64))
(declare-fun var132836 () (_ BitVec 64))
(declare-fun var132838 () (_ BitVec 64))
(declare-fun temp101_51 () (_ BitVec 64))
(declare-fun var132839 () (_ BitVec 64))
(declare-fun var132840 () (_ BitVec 64))
(declare-fun var132844 () (_ BitVec 64))
(declare-fun var132863 () (_ BitVec 64))
(declare-fun temp101_52 () (_ BitVec 64))
(declare-fun var132864 () (_ BitVec 64))
(declare-fun temp101_53 () (_ BitVec 64))
(declare-fun temp101_54 () (_ BitVec 64))
(declare-fun var132866 () (_ BitVec 64))
(declare-fun temp101_55 () (_ BitVec 64))
(declare-fun var132873 () (_ BitVec 64))
(declare-fun temp101_56 () (_ BitVec 64))
(declare-fun var132874 () (_ BitVec 64))
(declare-fun var132878 () (_ BitVec 64))
(declare-fun temp101_58 () (_ BitVec 64))
(declare-fun ARGNAME_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp101_59 () (_ BitVec 64))
(declare-fun temp101_60 () (_ BitVec 64))
(declare-fun temp101_61 () (_ BitVec 64))
(declare-fun temp101_62 () (_ BitVec 64))
(declare-fun temp101_63 () (_ BitVec 64))
(declare-fun temp101_64 () (_ BitVec 64))
(declare-fun temp101_65 () (_ BitVec 64))
(declare-fun temp101_66 () (_ BitVec 64))
(declare-fun temp101_67 () (_ BitVec 64))
(declare-fun temp101_68 () (_ BitVec 64))
(declare-fun temp101_69 () (_ BitVec 64))
(declare-fun temp101_70 () (_ BitVec 64))
(declare-fun temp101_71 () (_ BitVec 64))
(declare-fun var132917 () (_ BitVec 64))
(declare-fun var132956 () (_ BitVec 64))
(declare-fun temp101_72 () (_ BitVec 64))
(declare-fun var132957 () (_ BitVec 64))
(declare-fun temp101_73 () (_ BitVec 64))
(declare-fun temp101_74 () (_ BitVec 64))
(declare-fun var132991 () (_ BitVec 64))
(declare-fun temp101_75 () (_ BitVec 64))
(declare-fun temp101_76 () (_ BitVec 64))
(declare-fun var133009 () (_ BitVec 64))
(declare-fun temp101_77 () (_ BitVec 64))
(declare-fun var133011 () (_ BitVec 64))
(declare-fun var133049 () (_ BitVec 64))
(declare-fun var133050 () (_ BitVec 64))
(declare-fun temp101_78 () (_ BitVec 64))
(declare-fun var133054 () (_ BitVec 64))
(declare-fun var133055 () (_ BitVec 64))
(declare-fun var133056 () (_ BitVec 64))
(declare-fun var133066 () (_ BitVec 64))
(declare-fun temp101_79 () (_ BitVec 64))
(declare-fun var133067 () (_ BitVec 64))
(declare-fun temp101_80 () (_ BitVec 64))
(declare-fun var133070 () (_ BitVec 64))
(declare-fun var133114 () (_ BitVec 64))
(declare-fun temp101_81 () (_ BitVec 64))
(declare-fun var133115 () (_ BitVec 64))
(declare-fun temp101_82 () (_ BitVec 64))
(declare-fun var133116 () (_ BitVec 64))
(assert (= temp101_1 #x0000000000000001))
(assert (= var199216
   (ite (= extend_1524 temp101_1)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var199212 var199216))
(assert (= var132667 var199212))
(assert (= temp101_2 #x0000000000000001))
(assert (= var132667 temp101_2))
(assert (= temp101_3 #x0000000000000000))
(assert (= temp101_4 (select ARGNAME_block_shape_NAMEEND_DIMSIZE temp101_3)))
(assert (= temp101_5 #x0000000000000001))
(assert (= temp101_6 (select ARGNAME_block_shape_NAMEEND_DIMSIZE temp101_5)))
(assert (= temp101_7 #x0000000000000002))
(assert (= temp101_8 (select ARGNAME_block_shape_NAMEEND_DIMSIZE temp101_7)))
(assert (= temp101_9 #x0000000000000003))
(assert (= temp101_10 (select ARGNAME_block_shape_NAMEEND_DIMSIZE temp101_9)))
(assert (= temp101_11 #x0000000000000004))
(assert (= temp101_12 (select ARGNAME_block_shape_NAMEEND_DIMSIZE temp101_11)))
(assert (= temp101_13 #x0000000000000005))
(assert (= temp101_14 (select ARGNAME_block_shape_NAMEEND_DIMSIZE temp101_13)))
(assert (= temp101_15 #x0000000000000000))
(assert (= temp101_16 (select ARGNAME_block_shape_NAMEEND_DIMSIZE temp101_15)))
(assert (= var132692 temp101_16))
(assert (= var132695 var132692))
(assert (= var132697
   (ite (bvsgt ARGNAME_input_NAMEEND_DIM var132695)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp101_17 #x0000000000000001))
(assert (= var132697 temp101_17))
(assert (= temp101_18 #x0000000000000002))
(assert (= var264765
   (ite (= ARGNAME_crops_NAMEEND_DIM temp101_18)
        #x0000000000000001
        #x0000000000000000)))
(assert (= var264761 var264765))
(assert (= var132721 var264761))
(assert (= temp101_19 #x0000000000000001))
(assert (= var132721 temp101_19))
(assert (= temp101_20 #x0000000000000020))
(assert (= var132725 (bvshl var132692 temp101_20)))
(assert (= temp101_21 #x0000000000000020))
(assert (= var132726 (bvashr var132725 temp101_21)))
(assert (= temp101_22 #x0000000000000000))
(assert (= temp101_23 (select ARGNAME_crops_NAMEEND_DIMSIZE temp101_22)))
(assert (= temp101_24 #x0000000000000001))
(assert (= temp101_25 (select ARGNAME_crops_NAMEEND_DIMSIZE temp101_24)))
(assert (= temp101_26 #x0000000000000002))
(assert (= temp101_27 (select ARGNAME_crops_NAMEEND_DIMSIZE temp101_26)))
(assert (= temp101_28 #x0000000000000003))
(assert (= temp101_29 (select ARGNAME_crops_NAMEEND_DIMSIZE temp101_28)))
(assert (= temp101_30 #x0000000000000004))
(assert (= temp101_31 (select ARGNAME_crops_NAMEEND_DIMSIZE temp101_30)))
(assert (= temp101_32 #x0000000000000005))
(assert (= temp101_33 (select ARGNAME_crops_NAMEEND_DIMSIZE temp101_32)))
(assert (= temp101_34 #x0000000000000000))
(assert (= temp101_35 (select ARGNAME_crops_NAMEEND_DIMSIZE temp101_34)))
(assert (= var132727 temp101_35))
(assert (= var132728
   (ite (= var132726 var132727) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_36 #x0000000000000001))
(assert (= var132728 temp101_36))
(assert (= temp101_37 #x0000000000000001))
(assert (= temp101_38 (select ARGNAME_crops_NAMEEND_DIMSIZE temp101_37)))
(assert (= var132730 temp101_38))
(assert (= temp101_39 #x0000000000000002))
(assert (= var132731
   (ite (= var132730 temp101_39) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_40 #x0000000000000001))
(assert (= var132731 temp101_40))
(assert (= temp101_41 #x0000000000000000))
(assert (= var132787
   (ite (bvsgt var132695 temp101_41) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_42 #x0000000000000001))
(assert (= var132787 temp101_42))
(assert (= temp101_43 #xffffffffffffffff))
(assert (= var132789 (bvand var132692 temp101_43)))
(assert (= temp101_44 #x0000000000000000))
(assert (= var132793 temp101_44))
(assert (= temp101_45 #x0000000000000001))
(assert (= var132795 (bvshl var132793 temp101_45)))
(assert (= var132801 var132793))
(assert (= temp101_46 #x0000000000000001))
(assert (= var132803 (bvor var132795 temp101_46)))
(assert (= var132825 var132801))
(assert (= var132826 (bvsub var132695 var132825)))
(assert (= temp101_47 #x0000000000000000))
(assert (= var132827
   (ite (bvsgt var132826 temp101_47) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_48 #x0000000000000001))
(assert (= var132827 temp101_48))
(assert (= var132829 (bvsub var132695 var132825)))
(assert (= var132830 var132829))
(assert (= temp101_49 #x0000000000000000))
(assert (= var132833 temp101_49))
(assert (= var132835 var132833))
(assert (= temp101_50 #xffffffffffffffff))
(assert (= var132836 (bvxor var132835 temp101_50)))
(assert (= var132838 (bvadd var132836 var132695)))
(assert (= temp101_51 #x0000000000000001))
(assert (= var132839 (bvshl var132838 temp101_51)))
(assert (= var132840 var132839))
(assert (= var132844 var132833))
(assert (= var132863 var132844))
(assert (= temp101_52 #x0000000000000000))
(assert (= var132864
   (ite (bvsgt var132695 temp101_52) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_53 #x0000000000000001))
(assert (= var132864 temp101_53))
(assert (= temp101_54 #xffffffffffffffff))
(assert (= var132866 (bvand var132692 temp101_54)))
(assert (= temp101_55 #x0000000000000000))
(assert (= var132873 temp101_55))
(assert (= temp101_56 #x0000000000000001))
(assert (= var132874 (bvadd var132873 temp101_56)))
(assert (= var132878
   (ite (= var132874 var132866) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_58 #x0000000000000000))
(assert (= temp101_59 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_58)))
(assert (= temp101_60 #x0000000000000001))
(assert (= temp101_61 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_60)))
(assert (= temp101_62 #x0000000000000002))
(assert (= temp101_63 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_62)))
(assert (= temp101_64 #x0000000000000003))
(assert (= temp101_65 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_64)))
(assert (= temp101_66 #x0000000000000004))
(assert (= temp101_67 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_66)))
(assert (= temp101_68 #x0000000000000005))
(assert (= temp101_69 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_68)))
(assert (= temp101_70 #x0000000000000000))
(assert (= temp101_71 (select ARGNAME_input_NAMEEND_DIMSIZE temp101_70)))
(assert (= var132917 temp101_71))
(assert (= var132956 (bvsub var132826 var132863)))
(assert (= temp101_72 #x0000000000000005))
(assert (= var132957
   (ite (bvslt var132956 temp101_72) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_73 #x0000000000000001))
(assert (= var132957 temp101_73))
(assert (= temp101_74 #x0000000000000000))
(assert (= var132991
   (ite (= var132956 temp101_74) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_75 #x0000000000000000))
(assert (= var132991 temp101_75))
(assert (= temp101_76 #x0000000000000000))
(assert (= var133009
   (ite (= var132825 temp101_76) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_77 #x0000000000000001))
(assert (= var133009 temp101_77))
(assert (= var133011 var132917))
(assert (= var133049 (bvsub var132695 var132863)))
(assert (= var133050
   (ite (bvslt var132825 var133049) #x0000000000000001 #x0000000000000000)))
(assert (= temp101_78 #x0000000000000001))
(assert (= var133050 temp101_78))
(assert (= var133054 var132825))
(assert (= var133055 (bvsub var132695 var132863)))
(assert (= var133056 var133055))
(assert (= var133066 var133054))
(assert (= temp101_79 #x0000000000000001))
(assert (= var133067 (bvshl var133066 temp101_79)))
(assert (= temp101_80 #x0000000000000001))
(assert (= var133070 (bvor var133067 temp101_80)))
(assert (= var133114 var133066))
(assert (= temp101_81 #x0000000000000001))
(assert (= var133115 (bvadd var133114 temp101_81)))
(assert (= temp101_82 (select ARGNAME_input_NAMEEND_DIMSIZE var133115)))
(assert (= var133116 temp101_82))
(model-add temp101_1 () (_ BitVec 64) #x0000000000000001)
(model-add var199216 () (_ BitVec 64) #x0000000000000001)
(model-add var199212 () (_ BitVec 64) #x0000000000000001)
(model-add temp101_2 () (_ BitVec 64) #x0000000000000001)
(model-add var132667 () (_ BitVec 64) #x0000000000000001)
(model-del k!0)
(model-add extend_1524
           ()
           (_ BitVec 64)
           (ite k!0 #x0000000000000001 (bvnot #x0000000000000001)))








































































