(declare-fun temp0_1 () (_ BitVec 64))
(declare-fun temp0_2 () (_ BitVec 64))
(declare-fun var66450 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun extend_2976 () (_ BitVec 64))
(declare-fun temp0_3 () (_ BitVec 64))
(declare-fun ARGNAME_orig_input_tensor_shape_NAMEEND_LEN () (_ BitVec 64))
(declare-fun var66456 () (_ BitVec 64))
(declare-fun temp0_4 () (_ BitVec 64))
(declare-fun temp0_5 () (_ BitVec 64))
(declare-fun ARGNAME_out_backprop_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp0_6 () (_ BitVec 64))
(declare-fun temp0_7 () (_ BitVec 64))
(declare-fun temp0_8 () (_ BitVec 64))
(declare-fun temp0_9 () (_ BitVec 64))
(declare-fun temp0_10 () (_ BitVec 64))
(declare-fun temp0_11 () (_ BitVec 64))
(declare-fun temp0_12 () (_ BitVec 64))
(declare-fun temp0_13 () (_ BitVec 64))
(declare-fun temp0_14 () (_ BitVec 64))
(declare-fun temp0_15 () (_ BitVec 64))
(declare-fun temp0_16 () (_ BitVec 64))
(declare-fun temp0_17 () (_ BitVec 64))
(declare-fun temp0_18 () (_ BitVec 64))
(declare-fun var66488 () (_ BitVec 64))
(declare-fun temp0_19 () (_ BitVec 64))
(declare-fun temp0_20 () (_ BitVec 64))
(declare-fun var66491 () (_ BitVec 64))
(declare-fun temp0_21 () (_ BitVec 64))
(declare-fun temp0_22 () (_ BitVec 64))
(declare-fun var66492 () (_ BitVec 64))
(declare-fun temp0_23 () (_ BitVec 64))
(declare-fun temp0_24 () (_ BitVec 64))
(declare-fun var66493 () (_ BitVec 64))
(declare-fun ARGNAME_row_pooling_sequence_NAMEEND_NUMELEMENT () (_ BitVec 64))
(declare-fun var66495 () (_ BitVec 64))
(declare-fun temp0_25 () (_ BitVec 64))
(declare-fun ARGNAME_col_pooling_sequence_NAMEEND_NUMELEMENT () (_ BitVec 64))
(declare-fun var66540 () (_ BitVec 64))
(declare-fun temp0_26 () (_ BitVec 64))
(declare-fun temp0_27 () (_ BitVec 64))
(declare-fun var133110 () (_ BitVec 64))
(declare-fun temp0_28 () (_ BitVec 64))
(declare-fun var198646 () (_ BitVec 64))
(declare-fun temp0_29 () (_ BitVec 64))
(declare-fun var264182 () (_ BitVec 64))
(declare-fun temp0_30 () (_ BitVec 64))
(declare-fun var329718 () (_ BitVec 64))
(declare-fun temp0_31 () (_ BitVec 64))
(declare-fun var66714 () (_ BitVec 64))
(declare-fun var395254 () (_ BitVec 64))
(declare-fun temp0_32 () (_ BitVec 64))
(declare-fun var66715 () (_ BitVec 64))
(declare-fun temp0_33 () (_ BitVec 64))
(declare-fun var66721 () (_ BitVec 64))
(declare-fun temp0_36 () (_ BitVec 64))
(declare-fun temp0_35 () (_ BitVec 64))
(declare-fun temp0_37 () (_ BitVec 64))
(declare-fun var460827 () (_ BitVec 64))
(declare-fun var66737 () (_ BitVec 64))
(declare-fun temp0_38 () (_ BitVec 64))
(declare-fun var985460 () (_ BitVec 64))
(declare-fun temp0_39 () (_ BitVec 64))
(declare-fun var985461 () (_ BitVec 64))
(declare-fun temp0_40 () (_ BitVec 64))
(declare-fun temp0_41 () (_ BitVec 64))
(declare-fun var1050996 () (_ BitVec 64))
(declare-fun temp0_42 () (_ BitVec 64))
(declare-fun var1050997 () (_ BitVec 64))
(declare-fun temp0_43 () (_ BitVec 64))
(declare-fun temp0_44 () (_ BitVec 64))
(declare-fun var2099572 () (_ BitVec 64))
(declare-fun temp0_45 () (_ BitVec 64))
(declare-fun var2099573 () (_ BitVec 64))
(declare-fun temp0_46 () (_ BitVec 64))
(declare-fun temp0_47 () (_ BitVec 64))
(declare-fun var2165108 () (_ BitVec 64))
(declare-fun temp0_48 () (_ BitVec 64))
(declare-fun var2165109 () (_ BitVec 64))
(declare-fun temp0_49 () (_ BitVec 64))
(declare-fun var66834 () (_ BitVec 64))
(declare-fun var66835 () (_ BitVec 64))
(declare-fun var2230418 () (_ BitVec 64))
(declare-fun var2230419 () (_ BitVec 64))
(declare-fun var2361778 () (_ BitVec 64))
(declare-fun var2361779 () (_ BitVec 64))
(declare-fun var2558298 () (_ BitVec 64))
(declare-fun var2623834 () (_ BitVec 64))
(declare-fun var2361791 () (_ BitVec 64))
(declare-fun temp0_50 () (_ BitVec 64))
(declare-fun var2361792 () (_ BitVec 64))
(declare-fun temp0_51 () (_ BitVec 64))
(declare-fun var66851 () (_ BitVec 64))
(declare-fun temp0_52 () (_ BitVec 64))
(declare-fun temp0_53 () (_ BitVec 64))
(declare-fun var66858 () (_ BitVec 64))
(declare-fun temp0_54 () (_ BitVec 64))
(declare-fun var66866 () (_ BitVec 64))
(declare-fun var66867 () (_ BitVec 64))
(declare-fun temp0_55 () (_ BitVec 64))
(declare-fun var66911 () (_ BitVec 64))
(declare-fun var66913 () (_ BitVec 64))
(declare-fun var3147766 () (_ BitVec 64))
(declare-fun temp0_57 () (_ BitVec 64))
(declare-fun var66912 () (_ BitVec 64))
(declare-fun var3213302 () (_ BitVec 64))
(declare-fun temp0_58 () (_ BitVec 64))
(declare-fun ARGNAME_overlapping_NAMEEND () (_ BitVec 64))
(declare-fun var66921 () (_ BitVec 64))
(declare-fun var66923 () (_ BitVec 64))
(declare-fun var66935 () (_ BitVec 64))
(declare-fun var66936 () (_ BitVec 64))
(declare-fun temp0_59 () (_ BitVec 64))
(declare-fun var66975 () (_ BitVec 64))
(declare-fun var66977 () (_ BitVec 64))
(declare-fun var3344374 () (_ BitVec 64))
(declare-fun temp0_61 () (_ BitVec 64))
(declare-fun var66976 () (_ BitVec 64))
(declare-fun var3409910 () (_ BitVec 64))
(declare-fun temp0_62 () (_ BitVec 64))
(declare-fun var66985 () (_ BitVec 64))
(declare-fun var66986 () (_ BitVec 64))
(declare-fun var67029 () (_ BitVec 64))
(assert (= temp0_1 #x0000000000000001))
(assert (= var66450
   (ite (= extend_2976 temp0_1)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp0_2 #x0000000000000001))
(assert (= var66450 temp0_2))
(assert (= temp0_3 #x0000000000000004))
(assert (= var66456
   (ite (= ARGNAME_orig_input_tensor_shape_NAMEEND_LEN temp0_3)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp0_4 #x0000000000000001))
(assert (= var66456 temp0_4))
(assert (= temp0_5 #x0000000000000000))
(assert (= temp0_6 (select ARGNAME_out_backprop_NAMEEND_DIMSIZE temp0_5)))
(assert (= temp0_7 #x0000000000000001))
(assert (= temp0_8 (select ARGNAME_out_backprop_NAMEEND_DIMSIZE temp0_7)))
(assert (= temp0_9 #x0000000000000002))
(assert (= temp0_10 (select ARGNAME_out_backprop_NAMEEND_DIMSIZE temp0_9)))
(assert (= temp0_11 #x0000000000000003))
(assert (= temp0_12 (select ARGNAME_out_backprop_NAMEEND_DIMSIZE temp0_11)))
(assert (= temp0_13 #x0000000000000004))
(assert (= temp0_14 (select ARGNAME_out_backprop_NAMEEND_DIMSIZE temp0_13)))
(assert (= temp0_15 #x0000000000000005))
(assert (= temp0_16 (select ARGNAME_out_backprop_NAMEEND_DIMSIZE temp0_15)))
(assert (= temp0_17 #x0000000000000000))
(assert (= temp0_18 (select ARGNAME_out_backprop_NAMEEND_DIMSIZE temp0_17)))
(assert (= var66488 temp0_18))
(assert (= temp0_19 #x0000000000000001))
(assert (= temp0_20 (select ARGNAME_out_backprop_NAMEEND_DIMSIZE temp0_19)))
(assert (= var66491 temp0_20))
(assert (= temp0_21 #x0000000000000002))
(assert (= temp0_22 (select ARGNAME_out_backprop_NAMEEND_DIMSIZE temp0_21)))
(assert (= var66492 temp0_22))
(assert (= temp0_23 #x0000000000000003))
(assert (= temp0_24 (select ARGNAME_out_backprop_NAMEEND_DIMSIZE temp0_23)))
(assert (= var66493 temp0_24))
(assert (= var66495
   (ite (bvsgt ARGNAME_row_pooling_sequence_NAMEEND_NUMELEMENT var66491)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp0_25 #x0000000000000001))
(assert (= var66495 temp0_25))
(assert (= var66540
   (ite (bvsgt ARGNAME_col_pooling_sequence_NAMEEND_NUMELEMENT var66492)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp0_26 #x0000000000000001))
(assert (= var66540 temp0_26))
(assert (= temp0_27 #x0000000000000000))
(assert (= var133110 temp0_27))
(assert (= temp0_28 #x0000000000000001))
(assert (= var198646 temp0_28))
(assert (= temp0_29 #x0000000000000002))
(assert (= var264182 temp0_29))
(assert (= temp0_30 #x0000000000000003))
(assert (= var329718 temp0_30))
(assert (= temp0_31 #x0000000000000000))
(assert (= var66714 temp0_31))
(assert (= var395254 var66714))
(assert (= temp0_32 #x0000000000000001))
(assert (= var66715 (bvadd var66714 temp0_32)))
(assert (= temp0_33 #x0000000000000004))
(assert (= var66721 (ite (= var66715 temp0_33) #x0000000000000001 #x0000000000000000)))
(assert (= temp0_36 #x0000000000000000))
(assert (= temp0_35 temp0_36))
(assert (= temp0_37 #x0000000000000002))
(assert (= var460827 temp0_37))
(assert (= var66737 var460827))
(assert (= temp0_38 #x0000000000000000))
(assert (= var985460 temp0_38))
(assert (= temp0_39 #x0000000000000000))
(assert (= var985461 (ite (= var985460 temp0_39) #x0000000000000001 #x0000000000000000)))
(assert (= temp0_40 #x0000000000000001))
(assert (= var985461 temp0_40))
(assert (= temp0_41 #x0000000000000000))
(assert (= var1050996 temp0_41))
(assert (= temp0_42 #x0000000000000000))
(assert (= var1050997
   (ite (= var1050996 temp0_42) #x0000000000000001 #x0000000000000000)))
(assert (= temp0_43 #x0000000000000001))
(assert (= var1050997 temp0_43))
(assert (= temp0_44 #x0000000000000000))
(assert (= var2099572 temp0_44))
(assert (= temp0_45 #x0000000000000000))
(assert (= var2099573
   (ite (= var2099572 temp0_45) #x0000000000000001 #x0000000000000000)))
(assert (= temp0_46 #x0000000000000001))
(assert (= var2099573 temp0_46))
(assert (= temp0_47 #x0000000000000000))
(assert (= var2165108 temp0_47))
(assert (= temp0_48 #x0000000000000000))
(assert (= var2165109
   (ite (= var2165108 temp0_48) #x0000000000000001 #x0000000000000000)))
(assert (= temp0_49 #x0000000000000001))
(assert (= var2165109 temp0_49))
(assert (= var66834 (bvmul var66491 var66488)))
(assert (= var66835 (bvmul var66834 var66492)))
(assert (= var2230418 var66493))
(assert (= var2230419 var66835))
(assert (= var2361778 var2230418))
(assert (= var2361779 var2230419))
(assert (= var2558298 var2361778))
(assert (= var2623834 var2361779))
(assert (= var2361791 (bvor var2361779 var2361778)))
(assert (= temp0_50 #xffffffffffffffff))
(assert (= var2361792
   (ite (bvsgt var2361791 temp0_50) #x0000000000000001 #x0000000000000000)))
(assert (= temp0_51 #x0000000000000000))
(assert (= var66851
   (ite (bvsgt var66488 temp0_51) #x0000000000000001 #x0000000000000000)))
(assert (= temp0_52 #x0000000000000001))
(assert (= var66851 temp0_52))
(assert (= temp0_53 #x0000000000000000))
(assert (= var66858
   (ite (bvsgt var66493 temp0_53) #x0000000000000001 #x0000000000000000)))
(assert (= temp0_54 #x0000000000000000))
(assert (= var66866 temp0_54))
(assert (= var66867 (bvmul var66866 var66491)))
(assert (= temp0_55 #x0000000000000000))
(assert (= var66911 temp0_55))
(assert (= var66913
   (ite (bvslt var66911 var66491) #x0000000000000001 #x0000000000000000)))
(assert (= var3147766 var66911))
(assert (= temp0_57 #x0000000000000001))
(assert (= var66912 (bvadd var66911 temp0_57)))
(assert (= var3213302 var66912))
(assert (= temp0_58 #x00000000000000ff))
(assert (= var66921 (bvadd ARGNAME_overlapping_NAMEEND temp0_58)))
(assert (= var66923 var66921))
(assert (= var66935 (bvadd var66911 var66867)))
(assert (= var66936 (bvmul var66935 var66492)))
(assert (= temp0_59 #x0000000000000000))
(assert (= var66975 temp0_59))
(assert (= var66977
   (ite (bvslt var66975 var66492) #x0000000000000001 #x0000000000000000)))
(assert (= var3344374 var66975))
(assert (= temp0_61 #x0000000000000001))
(assert (= var66976 (bvadd var66975 temp0_61)))
(assert (= var3409910 var66976))
(assert (= temp0_62 #x00000000000000ff))
(assert (= var66985 (bvadd ARGNAME_overlapping_NAMEEND temp0_62)))
(assert (= var66986 var66985))
(assert (= var67029 (bvadd var66975 var66936)))
(model-add temp0_1 () (_ BitVec 64) #x0000000000000001)
(model-add temp0_2 () (_ BitVec 64) #x0000000000000001)
(model-add var66450 () (_ BitVec 64) #x0000000000000001)
(model-del k!0)
(model-add extend_2976
           ()
           (_ BitVec 64)
           (ite k!0 #x0000000000000001 (bvnot #x0000000000000001)))
















