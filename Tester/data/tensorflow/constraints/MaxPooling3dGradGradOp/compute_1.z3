(declare-fun temp0_1 () (_ BitVec 64))
(declare-fun temp0_2 () (_ BitVec 64))
(declare-fun var73865 () (_ BitVec 64))
(declare-fun k!0 () Bool)
(declare-fun ARGNAME_orig_input_NAMEEND_DIM () (_ BitVec 64))
(declare-fun ARGNAME_padding_NAMEEND () (_ BitVec 64))
(declare-fun ARGNAME_data_format_NAMEEND_STRFMT () (_ BitVec 64))
(declare-fun temp0_3 () (_ BitVec 64))
(declare-fun ARGNAME_orig_output_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var73888 () (_ BitVec 64))
(declare-fun temp0_4 () (_ BitVec 64))
(declare-fun temp0_5 () (_ BitVec 64))
(declare-fun ARGNAME_grad_NAMEEND_DIM () (_ BitVec 64))
(declare-fun var73909 () (_ BitVec 64))
(declare-fun temp0_6 () (_ BitVec 64))
(declare-fun temp0_7 () (_ BitVec 64))
(declare-fun var139884 () (_ BitVec 64))
(declare-fun temp0_8 () (_ BitVec 64))
(declare-fun temp0_9 () (_ BitVec 64))
(declare-fun ARGNAME_orig_input_NAMEEND_DIMSIZE
             ()
             (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp0_10 () (_ BitVec 64))
(declare-fun temp0_11 () (_ BitVec 64))
(declare-fun temp0_12 () (_ BitVec 64))
(declare-fun temp0_13 () (_ BitVec 64))
(declare-fun temp0_14 () (_ BitVec 64))
(declare-fun temp0_15 () (_ BitVec 64))
(declare-fun temp0_16 () (_ BitVec 64))
(declare-fun temp0_17 () (_ BitVec 64))
(declare-fun temp0_18 () (_ BitVec 64))
(declare-fun temp0_19 () (_ BitVec 64))
(declare-fun temp0_20 () (_ BitVec 64))
(declare-fun temp0_24 () (_ BitVec 64))
(declare-fun temp0_25 () (_ BitVec 64))
(declare-fun temp0_26 () (_ BitVec 64))
(declare-fun temp0_27 () (_ BitVec 64))
(declare-fun temp0_22 () (_ BitVec 64))
(declare-fun temp0_28 () (_ BitVec 64))
(declare-fun temp0_29 () (_ BitVec 64))
(declare-fun temp0_30 () (_ BitVec 64))
(declare-fun temp0_23 () (_ BitVec 64))
(declare-fun temp0_32 () (_ BitVec 64))
(declare-fun temp0_33 () (_ BitVec 64))
(declare-fun temp0_34 () (_ BitVec 64))
(declare-fun temp0_35 () (_ BitVec 64))
(declare-fun temp0_36 () (_ BitVec 64))
(declare-fun temp0_21 () (_ BitVec 64))
(declare-fun temp0_37 () (_ BitVec 64))
(declare-fun var139908 () (_ BitVec 64))
(declare-fun var139909 () (_ BitVec 64))
(declare-fun temp0_41 () (_ BitVec 64))
(declare-fun temp0_42 () (_ BitVec 64))
(declare-fun temp0_43 () (_ BitVec 64))
(declare-fun temp0_44 () (_ BitVec 64))
(declare-fun temp0_39 () (_ BitVec 64))
(declare-fun temp0_45 () (_ BitVec 64))
(declare-fun temp0_46 () (_ BitVec 64))
(declare-fun temp0_47 () (_ BitVec 64))
(declare-fun temp0_40 () (_ BitVec 64))
(declare-fun temp0_49 () (_ BitVec 64))
(declare-fun temp0_50 () (_ BitVec 64))
(declare-fun temp0_51 () (_ BitVec 64))
(declare-fun temp0_52 () (_ BitVec 64))
(declare-fun temp0_53 () (_ BitVec 64))
(declare-fun temp0_54 () (_ BitVec 64))
(declare-fun temp0_55 () (_ BitVec 64))
(declare-fun temp0_38 () (_ BitVec 64))
(declare-fun temp0_56 () (_ BitVec 64))
(declare-fun var139912 () (_ BitVec 64))
(declare-fun var139913 () (_ BitVec 64))
(declare-fun temp0_60 () (_ BitVec 64))
(declare-fun temp0_61 () (_ BitVec 64))
(declare-fun temp0_62 () (_ BitVec 64))
(declare-fun temp0_63 () (_ BitVec 64))
(declare-fun temp0_58 () (_ BitVec 64))
(declare-fun temp0_64 () (_ BitVec 64))
(declare-fun temp0_65 () (_ BitVec 64))
(declare-fun temp0_66 () (_ BitVec 64))
(declare-fun temp0_59 () (_ BitVec 64))
(declare-fun temp0_68 () (_ BitVec 64))
(declare-fun temp0_69 () (_ BitVec 64))
(declare-fun temp0_70 () (_ BitVec 64))
(declare-fun temp0_71 () (_ BitVec 64))
(declare-fun temp0_72 () (_ BitVec 64))
(declare-fun temp0_73 () (_ BitVec 64))
(declare-fun temp0_74 () (_ BitVec 64))
(declare-fun temp0_57 () (_ BitVec 64))
(declare-fun temp0_75 () (_ BitVec 64))
(declare-fun var139916 () (_ BitVec 64))
(declare-fun var139917 () (_ BitVec 64))
(declare-fun temp0_79 () (_ BitVec 64))
(declare-fun temp0_80 () (_ BitVec 64))
(declare-fun temp0_81 () (_ BitVec 64))
(declare-fun temp0_82 () (_ BitVec 64))
(declare-fun temp0_77 () (_ BitVec 64))
(declare-fun temp0_83 () (_ BitVec 64))
(declare-fun temp0_84 () (_ BitVec 64))
(declare-fun temp0_85 () (_ BitVec 64))
(declare-fun temp0_78 () (_ BitVec 64))
(declare-fun temp0_87 () (_ BitVec 64))
(declare-fun temp0_88 () (_ BitVec 64))
(declare-fun temp0_89 () (_ BitVec 64))
(declare-fun temp0_90 () (_ BitVec 64))
(declare-fun temp0_91 () (_ BitVec 64))
(declare-fun temp0_92 () (_ BitVec 64))
(declare-fun temp0_93 () (_ BitVec 64))
(declare-fun temp0_76 () (_ BitVec 64))
(declare-fun temp0_94 () (_ BitVec 64))
(declare-fun var139920 () (_ BitVec 64))
(declare-fun var139921 () (_ BitVec 64))
(declare-fun temp0_98 () (_ BitVec 64))
(declare-fun temp0_99 () (_ BitVec 64))
(declare-fun temp0_100 () (_ BitVec 64))
(declare-fun temp0_101 () (_ BitVec 64))
(declare-fun temp0_96 () (_ BitVec 64))
(declare-fun temp0_102 () (_ BitVec 64))
(declare-fun temp0_103 () (_ BitVec 64))
(declare-fun temp0_104 () (_ BitVec 64))
(declare-fun temp0_97 () (_ BitVec 64))
(declare-fun temp0_106 () (_ BitVec 64))
(declare-fun temp0_107 () (_ BitVec 64))
(declare-fun temp0_108 () (_ BitVec 64))
(declare-fun temp0_109 () (_ BitVec 64))
(declare-fun temp0_95 () (_ BitVec 64))
(declare-fun temp0_110 () (_ BitVec 64))
(declare-fun var139924 () (_ BitVec 64))
(declare-fun var139925 () (_ BitVec 64))
(declare-fun temp0_111 () (_ BitVec 64))
(declare-fun ARGNAME_ksize_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp0_112 () (_ BitVec 64))
(declare-fun temp0_113 () (_ BitVec 64))
(declare-fun temp0_114 () (_ BitVec 64))
(declare-fun temp0_115 () (_ BitVec 64))
(declare-fun temp0_116 () (_ BitVec 64))
(declare-fun temp0_117 () (_ BitVec 64))
(declare-fun temp0_118 () (_ BitVec 64))
(declare-fun temp0_119 () (_ BitVec 64))
(declare-fun temp0_120 () (_ BitVec 64))
(declare-fun temp0_121 () (_ BitVec 64))
(declare-fun temp0_122 () (_ BitVec 64))
(declare-fun temp0_126 () (_ BitVec 64))
(declare-fun temp0_127 () (_ BitVec 64))
(declare-fun temp0_128 () (_ BitVec 64))
(declare-fun temp0_129 () (_ BitVec 64))
(declare-fun ARGNAME_ksize_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp0_124 () (_ BitVec 64))
(declare-fun temp0_130 () (_ BitVec 64))
(declare-fun temp0_131 () (_ BitVec 64))
(declare-fun temp0_132 () (_ BitVec 64))
(declare-fun temp0_125 () (_ BitVec 64))
(declare-fun temp0_134 () (_ BitVec 64))
(declare-fun temp0_135 () (_ BitVec 64))
(declare-fun temp0_136 () (_ BitVec 64))
(declare-fun temp0_137 () (_ BitVec 64))
(declare-fun temp0_138 () (_ BitVec 64))
(declare-fun temp0_139 () (_ BitVec 64))
(declare-fun temp0_140 () (_ BitVec 64))
(declare-fun temp0_123 () (_ BitVec 64))
(declare-fun temp0_141 () (_ BitVec 64))
(declare-fun var139928 () (_ BitVec 64))
(declare-fun temp0_145 () (_ BitVec 64))
(declare-fun temp0_146 () (_ BitVec 64))
(declare-fun temp0_147 () (_ BitVec 64))
(declare-fun temp0_148 () (_ BitVec 64))
(declare-fun temp0_143 () (_ BitVec 64))
(declare-fun temp0_149 () (_ BitVec 64))
(declare-fun temp0_150 () (_ BitVec 64))
(declare-fun temp0_151 () (_ BitVec 64))
(declare-fun temp0_144 () (_ BitVec 64))
(declare-fun temp0_153 () (_ BitVec 64))
(declare-fun temp0_154 () (_ BitVec 64))
(declare-fun temp0_155 () (_ BitVec 64))
(declare-fun temp0_156 () (_ BitVec 64))
(declare-fun temp0_157 () (_ BitVec 64))
(declare-fun temp0_158 () (_ BitVec 64))
(declare-fun temp0_159 () (_ BitVec 64))
(declare-fun temp0_142 () (_ BitVec 64))
(declare-fun temp0_160 () (_ BitVec 64))
(declare-fun var139931 () (_ BitVec 64))
(declare-fun temp0_164 () (_ BitVec 64))
(declare-fun temp0_165 () (_ BitVec 64))
(declare-fun temp0_166 () (_ BitVec 64))
(declare-fun temp0_167 () (_ BitVec 64))
(declare-fun temp0_162 () (_ BitVec 64))
(declare-fun temp0_168 () (_ BitVec 64))
(declare-fun temp0_169 () (_ BitVec 64))
(declare-fun temp0_170 () (_ BitVec 64))
(declare-fun temp0_163 () (_ BitVec 64))
(declare-fun temp0_172 () (_ BitVec 64))
(declare-fun temp0_173 () (_ BitVec 64))
(declare-fun temp0_174 () (_ BitVec 64))
(declare-fun temp0_175 () (_ BitVec 64))
(declare-fun temp0_176 () (_ BitVec 64))
(declare-fun temp0_177 () (_ BitVec 64))
(declare-fun temp0_178 () (_ BitVec 64))
(declare-fun temp0_161 () (_ BitVec 64))
(declare-fun temp0_179 () (_ BitVec 64))
(declare-fun var139934 () (_ BitVec 64))
(declare-fun temp0_183 () (_ BitVec 64))
(declare-fun temp0_184 () (_ BitVec 64))
(declare-fun temp0_185 () (_ BitVec 64))
(declare-fun temp0_186 () (_ BitVec 64))
(declare-fun temp0_181 () (_ BitVec 64))
(declare-fun temp0_187 () (_ BitVec 64))
(declare-fun temp0_188 () (_ BitVec 64))
(declare-fun temp0_189 () (_ BitVec 64))
(declare-fun temp0_182 () (_ BitVec 64))
(declare-fun temp0_191 () (_ BitVec 64))
(declare-fun temp0_192 () (_ BitVec 64))
(declare-fun temp0_193 () (_ BitVec 64))
(declare-fun temp0_194 () (_ BitVec 64))
(declare-fun temp0_195 () (_ BitVec 64))
(declare-fun temp0_180 () (_ BitVec 64))
(declare-fun temp0_196 () (_ BitVec 64))
(declare-fun var139937 () (_ BitVec 64))
(declare-fun temp0_197 () (_ BitVec 64))
(declare-fun ARGNAME_strides_NAMEEND_VAL () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun temp0_198 () (_ BitVec 64))
(declare-fun temp0_199 () (_ BitVec 64))
(declare-fun temp0_200 () (_ BitVec 64))
(declare-fun temp0_201 () (_ BitVec 64))
(declare-fun temp0_202 () (_ BitVec 64))
(declare-fun temp0_203 () (_ BitVec 64))
(declare-fun temp0_204 () (_ BitVec 64))
(declare-fun temp0_205 () (_ BitVec 64))
(declare-fun temp0_206 () (_ BitVec 64))
(declare-fun temp0_207 () (_ BitVec 64))
(declare-fun temp0_208 () (_ BitVec 64))
(declare-fun temp0_212 () (_ BitVec 64))
(declare-fun temp0_213 () (_ BitVec 64))
(declare-fun temp0_214 () (_ BitVec 64))
(declare-fun temp0_215 () (_ BitVec 64))
(declare-fun ARGNAME_strides_NAMEEND_LEN () (_ BitVec 64))
(declare-fun temp0_210 () (_ BitVec 64))
(declare-fun temp0_216 () (_ BitVec 64))
(declare-fun temp0_217 () (_ BitVec 64))
(declare-fun temp0_218 () (_ BitVec 64))
(declare-fun temp0_211 () (_ BitVec 64))
(declare-fun temp0_220 () (_ BitVec 64))
(declare-fun temp0_221 () (_ BitVec 64))
(declare-fun temp0_222 () (_ BitVec 64))
(declare-fun temp0_223 () (_ BitVec 64))
(declare-fun temp0_224 () (_ BitVec 64))
(declare-fun temp0_225 () (_ BitVec 64))
(declare-fun temp0_226 () (_ BitVec 64))
(declare-fun temp0_209 () (_ BitVec 64))
(declare-fun temp0_227 () (_ BitVec 64))
(declare-fun var139940 () (_ BitVec 64))
(declare-fun temp0_231 () (_ BitVec 64))
(declare-fun temp0_232 () (_ BitVec 64))
(declare-fun temp0_233 () (_ BitVec 64))
(declare-fun temp0_234 () (_ BitVec 64))
(declare-fun temp0_229 () (_ BitVec 64))
(declare-fun temp0_235 () (_ BitVec 64))
(declare-fun temp0_236 () (_ BitVec 64))
(declare-fun temp0_237 () (_ BitVec 64))
(declare-fun temp0_230 () (_ BitVec 64))
(declare-fun temp0_239 () (_ BitVec 64))
(declare-fun temp0_240 () (_ BitVec 64))
(declare-fun temp0_241 () (_ BitVec 64))
(declare-fun temp0_242 () (_ BitVec 64))
(declare-fun temp0_243 () (_ BitVec 64))
(declare-fun temp0_244 () (_ BitVec 64))
(declare-fun temp0_245 () (_ BitVec 64))
(declare-fun temp0_228 () (_ BitVec 64))
(declare-fun temp0_246 () (_ BitVec 64))
(declare-fun var139943 () (_ BitVec 64))
(declare-fun temp0_250 () (_ BitVec 64))
(declare-fun temp0_251 () (_ BitVec 64))
(declare-fun temp0_252 () (_ BitVec 64))
(declare-fun temp0_253 () (_ BitVec 64))
(declare-fun temp0_248 () (_ BitVec 64))
(declare-fun temp0_254 () (_ BitVec 64))
(declare-fun temp0_255 () (_ BitVec 64))
(declare-fun temp0_256 () (_ BitVec 64))
(declare-fun temp0_249 () (_ BitVec 64))
(declare-fun temp0_258 () (_ BitVec 64))
(declare-fun temp0_259 () (_ BitVec 64))
(declare-fun temp0_260 () (_ BitVec 64))
(declare-fun temp0_261 () (_ BitVec 64))
(declare-fun temp0_262 () (_ BitVec 64))
(declare-fun temp0_263 () (_ BitVec 64))
(declare-fun temp0_264 () (_ BitVec 64))
(declare-fun temp0_247 () (_ BitVec 64))
(declare-fun temp0_265 () (_ BitVec 64))
(declare-fun var139946 () (_ BitVec 64))
(declare-fun temp0_269 () (_ BitVec 64))
(declare-fun temp0_270 () (_ BitVec 64))
(declare-fun temp0_271 () (_ BitVec 64))
(declare-fun temp0_272 () (_ BitVec 64))
(declare-fun temp0_267 () (_ BitVec 64))
(declare-fun temp0_273 () (_ BitVec 64))
(declare-fun temp0_274 () (_ BitVec 64))
(declare-fun temp0_275 () (_ BitVec 64))
(declare-fun temp0_268 () (_ BitVec 64))
(declare-fun temp0_277 () (_ BitVec 64))
(declare-fun temp0_278 () (_ BitVec 64))
(declare-fun temp0_279 () (_ BitVec 64))
(declare-fun temp0_280 () (_ BitVec 64))
(declare-fun temp0_281 () (_ BitVec 64))
(declare-fun temp0_266 () (_ BitVec 64))
(declare-fun temp0_282 () (_ BitVec 64))
(declare-fun var139949 () (_ BitVec 64))
(declare-fun var139952 () (_ BitVec 64))
(declare-fun temp0_283 () (_ BitVec 64))
(declare-fun var139953 () (_ BitVec 64))
(declare-fun temp0_284 () (_ BitVec 64))
(declare-fun var139954 () (_ BitVec 64))
(declare-fun var139955 () (_ BitVec 64))
(declare-fun temp0_285 () (_ BitVec 64))
(declare-fun var139977 () (_ BitVec 64))
(declare-fun var139978 () (_ BitVec 64))
(declare-fun var139979 () (_ BitVec 64))
(declare-fun var139980 () (_ BitVec 64))
(declare-fun var139981 () (_ BitVec 64))
(declare-fun var139982 () (_ BitVec 64))
(declare-fun var207838 () (_ BitVec 64))
(declare-fun var207839 () (_ BitVec 64))
(declare-fun var207840 () (_ BitVec 64))
(declare-fun temp0_286 () (_ BitVec 64))
(declare-fun var207846 () (_ BitVec 64))
(declare-fun temp0_287 () (_ BitVec 64))
(assert (or (= ARGNAME_padding_NAMEEND #x0000000000000001)
    (= ARGNAME_padding_NAMEEND #x0000000000000002)
    (= ARGNAME_padding_NAMEEND #x0000000000000003)))
(assert (or (= ARGNAME_data_format_NAMEEND_STRFMT #x0000000000000000)
    (= ARGNAME_data_format_NAMEEND_STRFMT #x0000000000000001)
    (= ARGNAME_data_format_NAMEEND_STRFMT #x0000000000000002)
    (= ARGNAME_data_format_NAMEEND_STRFMT #x0000000000000003)
    (= ARGNAME_data_format_NAMEEND_STRFMT #x0000000000000004)
    (= ARGNAME_data_format_NAMEEND_STRFMT #x0000000000000005)))
(assert (= temp0_1 #x0000000000000005))
(assert (= var73865
   (ite (= ARGNAME_orig_input_NAMEEND_DIM temp0_1)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp0_2 #x0000000000000001))
(assert (= var73865 temp0_2))
(assert (= temp0_3 #x0000000000000005))
(assert (= var73888
   (ite (= ARGNAME_orig_output_NAMEEND_DIM temp0_3)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp0_4 #x0000000000000001))
(assert (= var73888 temp0_4))
(assert (= temp0_5 #x0000000000000005))
(assert (= var73909
   (ite (= ARGNAME_grad_NAMEEND_DIM temp0_5)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp0_6 #x0000000000000001))
(assert (= var73909 temp0_6))
(assert (= temp0_7 #x0000000000000005))
(assert (= var139884
   (ite (= ARGNAME_orig_input_NAMEEND_DIM temp0_7)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp0_8 #x0000000000000001))
(assert (= var139884 temp0_8))
(assert (= temp0_9 #x0000000000000000))
(assert (= temp0_10 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_9)))
(assert (= temp0_11 #x0000000000000001))
(assert (= temp0_12 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_11)))
(assert (= temp0_13 #x0000000000000002))
(assert (= temp0_14 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_13)))
(assert (= temp0_15 #x0000000000000003))
(assert (= temp0_16 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_15)))
(assert (= temp0_17 #x0000000000000004))
(assert (= temp0_18 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_17)))
(assert (= temp0_19 #x0000000000000005))
(assert (= temp0_20 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_19)))
(assert (= temp0_24 #x0000000000000002))
(assert (= temp0_25 #x0000000000000003))
(assert (= temp0_26 #x0000000000000002))
(assert (= temp0_27 #x0000000000000003))
(assert (= temp0_22
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_26)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_27))
        (bvsub ARGNAME_orig_input_NAMEEND_DIM temp0_25)
        (bvsub ARGNAME_orig_input_NAMEEND_DIM temp0_24))))
(assert (= temp0_28 #x0000000000000002))
(assert (= temp0_29 #x0000000000000003))
(assert (= temp0_30 #x0000000000000003))
(assert (= temp0_23 (ite (= temp0_22 temp0_30) temp0_29 temp0_28)))
(assert (= temp0_32 #x0000000000000001))
(assert (= temp0_33 #x0000000000000005))
(assert (= temp0_34 #x0000000000000001))
(assert (= temp0_35 #x0000000000000001))
(assert (= temp0_36 #x0000000000000002))
(assert (= temp0_21
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_35)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_36))
        temp0_34
        (ite (= ARGNAME_data_format_NAMEEND_STRFMT temp0_33)
             temp0_23
             (bvadd temp0_23 temp0_32)))))
(assert (= temp0_37 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_21)))
(assert (= var139908 temp0_37))
(assert (= var139909 var139908))
(assert (= temp0_41 #x0000000000000002))
(assert (= temp0_42 #x0000000000000003))
(assert (= temp0_43 #x0000000000000002))
(assert (= temp0_44 #x0000000000000003))
(assert (= temp0_39
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_43)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_44))
        (bvsub ARGNAME_orig_input_NAMEEND_DIM temp0_42)
        (bvsub ARGNAME_orig_input_NAMEEND_DIM temp0_41))))
(assert (= temp0_45 #x0000000000000002))
(assert (= temp0_46 #x0000000000000003))
(assert (= temp0_47 #x0000000000000003))
(assert (= temp0_40 (ite (= temp0_39 temp0_47) temp0_46 temp0_45)))
(assert (= temp0_49 #x0000000000000000))
(assert (= temp0_50 #x0000000000000002))
(assert (= temp0_51 #x0000000000000001))
(assert (= temp0_52 #x0000000000000002))
(assert (= temp0_53 #x0000000000000001))
(assert (= temp0_54 #x0000000000000000))
(assert (= temp0_55 #x0000000000000003))
(assert (let ((a!1 (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_54)
                    (= ARGNAME_data_format_NAMEEND_STRFMT temp0_55))
                temp0_53
                (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_51)
                         (= ARGNAME_data_format_NAMEEND_STRFMT temp0_52))
                     temp0_50
                     temp0_49))))
  (= temp0_38 a!1)))
(assert (= temp0_56 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_38)))
(assert (= var139912 temp0_56))
(assert (= var139913 var139912))
(assert (= temp0_60 #x0000000000000002))
(assert (= temp0_61 #x0000000000000003))
(assert (= temp0_62 #x0000000000000002))
(assert (= temp0_63 #x0000000000000003))
(assert (= temp0_58
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_62)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_63))
        (bvsub ARGNAME_orig_input_NAMEEND_DIM temp0_61)
        (bvsub ARGNAME_orig_input_NAMEEND_DIM temp0_60))))
(assert (= temp0_64 #x0000000000000002))
(assert (= temp0_65 #x0000000000000003))
(assert (= temp0_66 #x0000000000000003))
(assert (= temp0_59 (ite (= temp0_58 temp0_66) temp0_65 temp0_64)))
(assert (= temp0_68 #x0000000000000001))
(assert (= temp0_69 #x0000000000000003))
(assert (= temp0_70 #x0000000000000001))
(assert (= temp0_71 #x0000000000000002))
(assert (= temp0_72 #x0000000000000002))
(assert (= temp0_73 #x0000000000000000))
(assert (= temp0_74 #x0000000000000003))
(assert (let ((a!1 (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_73)
                    (= ARGNAME_data_format_NAMEEND_STRFMT temp0_74))
                temp0_72
                (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_70)
                         (= ARGNAME_data_format_NAMEEND_STRFMT temp0_71))
                     temp0_69
                     temp0_68))))
  (= temp0_57 a!1)))
(assert (= temp0_75 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_57)))
(assert (= var139916 temp0_75))
(assert (= var139917 var139916))
(assert (= temp0_79 #x0000000000000002))
(assert (= temp0_80 #x0000000000000003))
(assert (= temp0_81 #x0000000000000002))
(assert (= temp0_82 #x0000000000000003))
(assert (= temp0_77
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_81)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_82))
        (bvsub ARGNAME_orig_input_NAMEEND_DIM temp0_80)
        (bvsub ARGNAME_orig_input_NAMEEND_DIM temp0_79))))
(assert (= temp0_83 #x0000000000000002))
(assert (= temp0_84 #x0000000000000003))
(assert (= temp0_85 #x0000000000000003))
(assert (= temp0_78 (ite (= temp0_77 temp0_85) temp0_84 temp0_83)))
(assert (= temp0_87 #x0000000000000002))
(assert (= temp0_88 #x0000000000000004))
(assert (= temp0_89 #x0000000000000001))
(assert (= temp0_90 #x0000000000000002))
(assert (= temp0_91 #x0000000000000003))
(assert (= temp0_92 #x0000000000000000))
(assert (= temp0_93 #x0000000000000003))
(assert (let ((a!1 (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_92)
                    (= ARGNAME_data_format_NAMEEND_STRFMT temp0_93))
                temp0_91
                (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_89)
                         (= ARGNAME_data_format_NAMEEND_STRFMT temp0_90))
                     temp0_88
                     temp0_87))))
  (= temp0_76 a!1)))
(assert (= temp0_94 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_76)))
(assert (= var139920 temp0_94))
(assert (= var139921 var139920))
(assert (= temp0_98 #x0000000000000002))
(assert (= temp0_99 #x0000000000000003))
(assert (= temp0_100 #x0000000000000002))
(assert (= temp0_101 #x0000000000000003))
(assert (= temp0_96
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_100)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_101))
        (bvsub ARGNAME_orig_input_NAMEEND_DIM temp0_99)
        (bvsub ARGNAME_orig_input_NAMEEND_DIM temp0_98))))
(assert (= temp0_102 #x0000000000000002))
(assert (= temp0_103 #x0000000000000003))
(assert (= temp0_104 #x0000000000000003))
(assert (= temp0_97 (ite (= temp0_96 temp0_104) temp0_103 temp0_102)))
(assert (= temp0_106 #x0000000000000000))
(assert (= temp0_107 #x0000000000000001))
(assert (= temp0_108 #x0000000000000005))
(assert (= temp0_109 #x0000000000000004))
(assert (= temp0_95
   (ite (= ARGNAME_data_format_NAMEEND_STRFMT temp0_109)
        temp0_97
        (ite (= ARGNAME_data_format_NAMEEND_STRFMT temp0_108)
             (bvadd temp0_97 temp0_107)
             temp0_106))))
(assert (= temp0_110 (select ARGNAME_orig_input_NAMEEND_DIMSIZE temp0_95)))
(assert (= var139924 temp0_110))
(assert (= var139925 var139924))
(assert (= temp0_111 #x0000000000000000))
(assert (= temp0_112 (select ARGNAME_ksize_NAMEEND_VAL temp0_111)))
(assert (= temp0_113 #x0000000000000001))
(assert (= temp0_114 (select ARGNAME_ksize_NAMEEND_VAL temp0_113)))
(assert (= temp0_115 #x0000000000000002))
(assert (= temp0_116 (select ARGNAME_ksize_NAMEEND_VAL temp0_115)))
(assert (= temp0_117 #x0000000000000003))
(assert (= temp0_118 (select ARGNAME_ksize_NAMEEND_VAL temp0_117)))
(assert (= temp0_119 #x0000000000000004))
(assert (= temp0_120 (select ARGNAME_ksize_NAMEEND_VAL temp0_119)))
(assert (= temp0_121 #x0000000000000005))
(assert (= temp0_122 (select ARGNAME_ksize_NAMEEND_VAL temp0_121)))
(assert (= temp0_126 #x0000000000000002))
(assert (= temp0_127 #x0000000000000003))
(assert (= temp0_128 #x0000000000000002))
(assert (= temp0_129 #x0000000000000003))
(assert (= temp0_124
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_128)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_129))
        (bvsub ARGNAME_ksize_NAMEEND_LEN temp0_127)
        (bvsub ARGNAME_ksize_NAMEEND_LEN temp0_126))))
(assert (= temp0_130 #x0000000000000002))
(assert (= temp0_131 #x0000000000000003))
(assert (= temp0_132 #x0000000000000003))
(assert (= temp0_125 (ite (= temp0_124 temp0_132) temp0_131 temp0_130)))
(assert (= temp0_134 #x0000000000000000))
(assert (= temp0_135 #x0000000000000002))
(assert (= temp0_136 #x0000000000000001))
(assert (= temp0_137 #x0000000000000002))
(assert (= temp0_138 #x0000000000000001))
(assert (= temp0_139 #x0000000000000000))
(assert (= temp0_140 #x0000000000000003))
(assert (let ((a!1 (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_139)
                    (= ARGNAME_data_format_NAMEEND_STRFMT temp0_140))
                temp0_138
                (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_136)
                         (= ARGNAME_data_format_NAMEEND_STRFMT temp0_137))
                     temp0_135
                     temp0_134))))
  (= temp0_123 a!1)))
(assert (= temp0_141 (select ARGNAME_ksize_NAMEEND_VAL temp0_123)))
(assert (= var139928 temp0_141))
(assert (= temp0_145 #x0000000000000002))
(assert (= temp0_146 #x0000000000000003))
(assert (= temp0_147 #x0000000000000002))
(assert (= temp0_148 #x0000000000000003))
(assert (= temp0_143
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_147)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_148))
        (bvsub ARGNAME_ksize_NAMEEND_LEN temp0_146)
        (bvsub ARGNAME_ksize_NAMEEND_LEN temp0_145))))
(assert (= temp0_149 #x0000000000000002))
(assert (= temp0_150 #x0000000000000003))
(assert (= temp0_151 #x0000000000000003))
(assert (= temp0_144 (ite (= temp0_143 temp0_151) temp0_150 temp0_149)))
(assert (= temp0_153 #x0000000000000001))
(assert (= temp0_154 #x0000000000000003))
(assert (= temp0_155 #x0000000000000001))
(assert (= temp0_156 #x0000000000000002))
(assert (= temp0_157 #x0000000000000002))
(assert (= temp0_158 #x0000000000000000))
(assert (= temp0_159 #x0000000000000003))
(assert (let ((a!1 (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_158)
                    (= ARGNAME_data_format_NAMEEND_STRFMT temp0_159))
                temp0_157
                (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_155)
                         (= ARGNAME_data_format_NAMEEND_STRFMT temp0_156))
                     temp0_154
                     temp0_153))))
  (= temp0_142 a!1)))
(assert (= temp0_160 (select ARGNAME_ksize_NAMEEND_VAL temp0_142)))
(assert (= var139931 temp0_160))
(assert (= temp0_164 #x0000000000000002))
(assert (= temp0_165 #x0000000000000003))
(assert (= temp0_166 #x0000000000000002))
(assert (= temp0_167 #x0000000000000003))
(assert (= temp0_162
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_166)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_167))
        (bvsub ARGNAME_ksize_NAMEEND_LEN temp0_165)
        (bvsub ARGNAME_ksize_NAMEEND_LEN temp0_164))))
(assert (= temp0_168 #x0000000000000002))
(assert (= temp0_169 #x0000000000000003))
(assert (= temp0_170 #x0000000000000003))
(assert (= temp0_163 (ite (= temp0_162 temp0_170) temp0_169 temp0_168)))
(assert (= temp0_172 #x0000000000000002))
(assert (= temp0_173 #x0000000000000004))
(assert (= temp0_174 #x0000000000000001))
(assert (= temp0_175 #x0000000000000002))
(assert (= temp0_176 #x0000000000000003))
(assert (= temp0_177 #x0000000000000000))
(assert (= temp0_178 #x0000000000000003))
(assert (let ((a!1 (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_177)
                    (= ARGNAME_data_format_NAMEEND_STRFMT temp0_178))
                temp0_176
                (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_174)
                         (= ARGNAME_data_format_NAMEEND_STRFMT temp0_175))
                     temp0_173
                     temp0_172))))
  (= temp0_161 a!1)))
(assert (= temp0_179 (select ARGNAME_ksize_NAMEEND_VAL temp0_161)))
(assert (= var139934 temp0_179))
(assert (= temp0_183 #x0000000000000002))
(assert (= temp0_184 #x0000000000000003))
(assert (= temp0_185 #x0000000000000002))
(assert (= temp0_186 #x0000000000000003))
(assert (= temp0_181
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_185)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_186))
        (bvsub ARGNAME_ksize_NAMEEND_LEN temp0_184)
        (bvsub ARGNAME_ksize_NAMEEND_LEN temp0_183))))
(assert (= temp0_187 #x0000000000000002))
(assert (= temp0_188 #x0000000000000003))
(assert (= temp0_189 #x0000000000000003))
(assert (= temp0_182 (ite (= temp0_181 temp0_189) temp0_188 temp0_187)))
(assert (= temp0_191 #x0000000000000001))
(assert (= temp0_192 #x0000000000000005))
(assert (= temp0_193 #x0000000000000001))
(assert (= temp0_194 #x0000000000000001))
(assert (= temp0_195 #x0000000000000002))
(assert (= temp0_180
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_194)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_195))
        temp0_193
        (ite (= ARGNAME_data_format_NAMEEND_STRFMT temp0_192)
             temp0_182
             (bvadd temp0_182 temp0_191)))))
(assert (= temp0_196 (select ARGNAME_ksize_NAMEEND_VAL temp0_180)))
(assert (= var139937 temp0_196))
(assert (= temp0_197 #x0000000000000000))
(assert (= temp0_198 (select ARGNAME_strides_NAMEEND_VAL temp0_197)))
(assert (= temp0_199 #x0000000000000001))
(assert (= temp0_200 (select ARGNAME_strides_NAMEEND_VAL temp0_199)))
(assert (= temp0_201 #x0000000000000002))
(assert (= temp0_202 (select ARGNAME_strides_NAMEEND_VAL temp0_201)))
(assert (= temp0_203 #x0000000000000003))
(assert (= temp0_204 (select ARGNAME_strides_NAMEEND_VAL temp0_203)))
(assert (= temp0_205 #x0000000000000004))
(assert (= temp0_206 (select ARGNAME_strides_NAMEEND_VAL temp0_205)))
(assert (= temp0_207 #x0000000000000005))
(assert (= temp0_208 (select ARGNAME_strides_NAMEEND_VAL temp0_207)))
(assert (= temp0_212 #x0000000000000002))
(assert (= temp0_213 #x0000000000000003))
(assert (= temp0_214 #x0000000000000002))
(assert (= temp0_215 #x0000000000000003))
(assert (= temp0_210
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_214)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_215))
        (bvsub ARGNAME_strides_NAMEEND_LEN temp0_213)
        (bvsub ARGNAME_strides_NAMEEND_LEN temp0_212))))
(assert (= temp0_216 #x0000000000000002))
(assert (= temp0_217 #x0000000000000003))
(assert (= temp0_218 #x0000000000000003))
(assert (= temp0_211 (ite (= temp0_210 temp0_218) temp0_217 temp0_216)))
(assert (= temp0_220 #x0000000000000000))
(assert (= temp0_221 #x0000000000000002))
(assert (= temp0_222 #x0000000000000001))
(assert (= temp0_223 #x0000000000000002))
(assert (= temp0_224 #x0000000000000001))
(assert (= temp0_225 #x0000000000000000))
(assert (= temp0_226 #x0000000000000003))
(assert (let ((a!1 (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_225)
                    (= ARGNAME_data_format_NAMEEND_STRFMT temp0_226))
                temp0_224
                (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_222)
                         (= ARGNAME_data_format_NAMEEND_STRFMT temp0_223))
                     temp0_221
                     temp0_220))))
  (= temp0_209 a!1)))
(assert (= temp0_227 (select ARGNAME_strides_NAMEEND_VAL temp0_209)))
(assert (= var139940 temp0_227))
(assert (= temp0_231 #x0000000000000002))
(assert (= temp0_232 #x0000000000000003))
(assert (= temp0_233 #x0000000000000002))
(assert (= temp0_234 #x0000000000000003))
(assert (= temp0_229
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_233)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_234))
        (bvsub ARGNAME_strides_NAMEEND_LEN temp0_232)
        (bvsub ARGNAME_strides_NAMEEND_LEN temp0_231))))
(assert (= temp0_235 #x0000000000000002))
(assert (= temp0_236 #x0000000000000003))
(assert (= temp0_237 #x0000000000000003))
(assert (= temp0_230 (ite (= temp0_229 temp0_237) temp0_236 temp0_235)))
(assert (= temp0_239 #x0000000000000001))
(assert (= temp0_240 #x0000000000000003))
(assert (= temp0_241 #x0000000000000001))
(assert (= temp0_242 #x0000000000000002))
(assert (= temp0_243 #x0000000000000002))
(assert (= temp0_244 #x0000000000000000))
(assert (= temp0_245 #x0000000000000003))
(assert (let ((a!1 (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_244)
                    (= ARGNAME_data_format_NAMEEND_STRFMT temp0_245))
                temp0_243
                (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_241)
                         (= ARGNAME_data_format_NAMEEND_STRFMT temp0_242))
                     temp0_240
                     temp0_239))))
  (= temp0_228 a!1)))
(assert (= temp0_246 (select ARGNAME_strides_NAMEEND_VAL temp0_228)))
(assert (= var139943 temp0_246))
(assert (= temp0_250 #x0000000000000002))
(assert (= temp0_251 #x0000000000000003))
(assert (= temp0_252 #x0000000000000002))
(assert (= temp0_253 #x0000000000000003))
(assert (= temp0_248
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_252)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_253))
        (bvsub ARGNAME_strides_NAMEEND_LEN temp0_251)
        (bvsub ARGNAME_strides_NAMEEND_LEN temp0_250))))
(assert (= temp0_254 #x0000000000000002))
(assert (= temp0_255 #x0000000000000003))
(assert (= temp0_256 #x0000000000000003))
(assert (= temp0_249 (ite (= temp0_248 temp0_256) temp0_255 temp0_254)))
(assert (= temp0_258 #x0000000000000002))
(assert (= temp0_259 #x0000000000000004))
(assert (= temp0_260 #x0000000000000001))
(assert (= temp0_261 #x0000000000000002))
(assert (= temp0_262 #x0000000000000003))
(assert (= temp0_263 #x0000000000000000))
(assert (= temp0_264 #x0000000000000003))
(assert (let ((a!1 (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_263)
                    (= ARGNAME_data_format_NAMEEND_STRFMT temp0_264))
                temp0_262
                (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_260)
                         (= ARGNAME_data_format_NAMEEND_STRFMT temp0_261))
                     temp0_259
                     temp0_258))))
  (= temp0_247 a!1)))
(assert (= temp0_265 (select ARGNAME_strides_NAMEEND_VAL temp0_247)))
(assert (= var139946 temp0_265))
(assert (= temp0_269 #x0000000000000002))
(assert (= temp0_270 #x0000000000000003))
(assert (= temp0_271 #x0000000000000002))
(assert (= temp0_272 #x0000000000000003))
(assert (= temp0_267
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_271)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_272))
        (bvsub ARGNAME_strides_NAMEEND_LEN temp0_270)
        (bvsub ARGNAME_strides_NAMEEND_LEN temp0_269))))
(assert (= temp0_273 #x0000000000000002))
(assert (= temp0_274 #x0000000000000003))
(assert (= temp0_275 #x0000000000000003))
(assert (= temp0_268 (ite (= temp0_267 temp0_275) temp0_274 temp0_273)))
(assert (= temp0_277 #x0000000000000001))
(assert (= temp0_278 #x0000000000000005))
(assert (= temp0_279 #x0000000000000001))
(assert (= temp0_280 #x0000000000000001))
(assert (= temp0_281 #x0000000000000002))
(assert (= temp0_266
   (ite (or (= ARGNAME_data_format_NAMEEND_STRFMT temp0_280)
            (= ARGNAME_data_format_NAMEEND_STRFMT temp0_281))
        temp0_279
        (ite (= ARGNAME_data_format_NAMEEND_STRFMT temp0_278)
             temp0_268
             (bvadd temp0_268 temp0_277)))))
(assert (= temp0_282 (select ARGNAME_strides_NAMEEND_VAL temp0_266)))
(assert (= var139949 temp0_282))
(assert (= var139952 var139937))
(assert (= temp0_283 #x0000000000000001))
(assert (= var139953
   (ite (= var139952 temp0_283) #x0000000000000001 #x0000000000000000)))
(assert (= temp0_284 #x0000000000000001))
(assert (= var139954
   (ite (= var139949 temp0_284) #x0000000000000001 #x0000000000000000)))
(assert (= var139955 (bvand var139954 var139953)))
(assert (= temp0_285 #x0000000000000001))
(assert (= var139955 temp0_285))
(assert (= var139977 var139913))
(assert (= var139978 var139977))
(assert (= var139979 var139928))
(assert (= var139980 var139979))
(assert (= var139981 var139940))
(assert (= var139982 var139981))
(assert (= var207838 var139978))
(assert (= var207839 var139980))
(assert (= var207840 var139982))
(assert (= temp0_286 #x0000000000000003))
(assert (= var207846
   (ite (= ARGNAME_padding_NAMEEND temp0_286)
        #x0000000000000001
        #x0000000000000000)))
(assert (= temp0_287 #x0000000000000001))
(assert (= var207846 temp0_287))
(model-add temp0_1 () (_ BitVec 64) #x0000000000000005)
(model-add temp0_2 () (_ BitVec 64) #x0000000000000001)
(model-add var73865 () (_ BitVec 64) #x0000000000000001)
(model-del k!0)
(model-add ARGNAME_orig_input_NAMEEND_DIM
           ()
           (_ BitVec 64)
           (ite k!0 #x0000000000000005 (bvnot #x0000000000000005)))

























